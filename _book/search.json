[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"project serves companion Cambridge Manuals Archaeology book Archaeological Network Science Tom Brughmans Matthew . Peeples (2022).document contains series tutorials outline methods managing, analyzing, visualizing network data, primarily using R programming language. provide code examples replicate analyses presented book well many additional useful code snippets, examples, tools. Online Companion designed expand upon topics covered book may find useful follow along examples read text. Sections 1 6 document correspond topics information covered Chapters 2 7 Brughmans Peeples book. can use table contents left-hand side screen jump directly particular section table contents right navigate within Section.information book authors check project website : archnetworks.net.Cite document :Peeples, Matthew . Tom Brughmans (2022). Online Companion Archaeological Network Science Brughmans Peeples. https://archnetworks.net, Accessed 2022-05-25.associated book can cited asBrughmans, Tom Matthew . Peeples (press). Archaeological Network Science. Cambridge Manuals Archaeology. Cambridge University Press, Cambridge, UK.\nNOTICE\n\nNote pre-release version document. aware document still updated edited. Please check back updates coming months final version document.\n","code":""},{"path":"index.html","id":"HowTo","chapter":"Welcome","heading":"How Should I Use This Online Companion?","text":"tutorials designed complement text associated book (Brughmans Peeples 2022) can also stand alone guide implementation basic background network methods terminology. Although section guide builds upon previous sections terms network concepts R methods, Sections independent terms data, examples, code can run order choose.suggestions start:new network analysis R, suggest going section document, starting “Getting Started R” going numbered sections order following along book.already familiar R new network analysis, suggest read Section 1 set data workspace, follow along remaining numbered Sections associated book chapters read.already avid network analyst R user just looking code chunks implement something particular, feel free skip around. tried make Section independent possible can pick choose want work .’re real pro designing network analyses visualizations, love contributed project help document grow.Throughout document use icons indicate information packages, warnings, general useful tips. Keep eye callouts :\nuse icon highlight discussions R packages used \nproject. Check brief overviews instructions \nuse configure packages.\n\nuse icon highlight particular areas concern \ndiscussion network methods R code. particular, use \nicon warn common errors pitfalls particular\nfunctions.\n\nuse icon highlight helpful tips using particular R\nfunctions R studio procedures.\n","code":""},{"path":"index.html","id":"Repro","chapter":"Welcome","heading":"Reproducibility","text":"recent version document built R version 4.2.0 (2022-04-22 ucrt). suggest use recent version R attempting use code document.content document designed accessible reproducible possible. source code used produce document along data used analyses available GitHub. GitHub repository allows users open issues, contribute document, help fix typos errors (see information contributing ). also opened GitHub discussion board repository users can ask questions data code repository without making edits issue requests directly.easiest way reproduce document launch project directly browser using Binder. click link open browser based instance R studio required packages files. can test evaluate code directly.can also install repository R package directly GitHub using:Finally, can run code generate documents locally using R R Studio downloading entire R repository : main.zip. Unzip files :Open “Archaeological_Network_Science.Rproj” file R studio.Use renv::restore() command install required packages dependencies. large document uses many packages may take time.able browse files execute code repository.online bookdown document deployed using Netlify platform badge shows current status build hosted https://book.archnetworks.net.","code":"\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"mpeeples2008/ArchNetSci\")"},{"path":"index.html","id":"discord-community","chapter":"Welcome","heading":"Discord Community","text":"created associated Archaeological Network Science - Discord Server, hope provide additional venue archaeological network practitioners collaborate, interact, ask help document archaeological networks broadly. invite use place ask questions authors community large. Note Discord subject code conduct use GitHub repository must abide agreement participate. require Discord account verified email address.Join Discord","code":""},{"path":"index.html","id":"new-to-r-and-r-studio","chapter":"Welcome","heading":"New to R and R Studio?","text":"network tutorials document built users basic familiarity R R-studio ’re just getting started, don’t worry. created detailed guide Getting started R. document covers installation required software provides basic introduction R programming environment hope enough get started.already basic familiarity R want go , numerous additional resources (completely free) help learn. resources recommend include R Data Science (Wickham Grolemund 2017), Advanced R (Wickham 2019), R Cookbook, 2nd edition (Long Teetor 2019), R Action associated Quick-R website (Kabacoff 2015). addition Ben Marwick created excellent repository resources using R archaeology well ever-growing list archaeological publications include R code. website associated book (archnetworks.net) also includes list archaeological articles focused network research include data code. Reproducing published results , experience, one best ways learn advanced techniques data management R suggest give try.","code":""},{"path":"index.html","id":"Contributing","chapter":"Welcome","heading":"Contribute To the Project","text":"welcome contributions project community GitHub platform helps us facilitate . first need sign GitHub account log . find something needs updating changing (typos errors) can simply click “View source” link right sidebar relevant page click edit icon found near top code block make proposed changes. changes saved new “fork” document review implement relevant happily add name list contributors.detect larger error code running like request new feature update, can create issue using issue tracker page associated project repository.contributors must agree adhere code conduct.","code":""},{"path":"index.html","id":"project-license","chapter":"Welcome","heading":"Project License","text":"Online Companion Archaeological Network Science licensed Creative Commons Attribution-NonCommercial-NoDerivitives 4.0 International License.","code":""},{"path":"index.html","id":"help-support-this-project-and-build-the-community","chapter":"Welcome","heading":"Help Support this Project and Build the Community","text":"devoted seeing community archaeological network practitioners grow hope book online resources help make happen. can support growth community !Spread word friends colleaguesShare links online resources social media using #archnetworks hashtagPlease cite book Online Companion use methods code documentStar GitHub project repository contribute projectJoin Discord invite interested peopleShare articles, teaching resources, data, archaeological network materials posting associated website (archnetworks.net)Buy bookReview book online book sellers","code":""},{"path":"index.html","id":"acknowledgements","chapter":"Welcome","heading":"Acknowledgements","text":"online bookdown project associated book made possible thanks support several generous funding sources including: Carlsberg Foundation, context Past Social Networks Project (CF21-0382); National Science Foundation Archaeology Measurement, Methodology, Statistics programs (grant #1758690 #1758606); School Human Evolution Social Change Arizona State University. Thank Jens Emil Bødstrup Christoffersen providing detailed comments testing initial version document. errors remain .","code":""},{"path":"GettingStarted.html","id":"GettingStarted","chapter":"Gettings Started with R","heading":"Gettings Started with R","text":"order follow along code examples document, need recent installations R R-Studio computer. R R-studio available Windows, MacOS, Linux. Section provides brief overview get running. Following , introduce basics R R-Studio get ready tutorials remainder document. follow tutorial confident able engage examples code Online Companion.","code":""},{"path":"GettingStarted.html","id":"InstallR","chapter":"Gettings Started with R","heading":"Download and Install R","text":"first step install recent version R (recommend 4.2 later document originally created version 4.2). Follow instructions appropriate operating system.first step go R project website www.r-project.org click CRAN link “Downloads” left hand side.Choose mirror download selecting one country “Cloud” option.Next, click Windows, MacOS, Linux distribution follow instructions .","code":""},{"path":"GettingStarted.html","id":"windows","chapter":"Gettings Started with R","heading":"Windows","text":"Click “base” sub-directory left hand side screen click “Download R-4.2.0 Windows” (version number 4.2 later) download recent version executable.download complete, run *.exe file answer questions prompted complete installation.","code":""},{"path":"GettingStarted.html","id":"macos","chapter":"Gettings Started with R","heading":"MacOS","text":"install R MacOS, first need know chip manufacturer Mac . order determine chip go Apple menu select “Mac” look information “Processor” “Chip” window pops . either Intel M1.Next, click link “Latest release” *.pkg file appropriate Mac processor computer. separate notarized signed .pkg file Macs Intel processors Macs Apple M1 processors (mostly produced 2020 later). Note, .pkg files interchangeable confirm one need.downloaded appropriate .pkg, run answer questions install required.","code":""},{"path":"GettingStarted.html","id":"linux","chapter":"Gettings Started with R","heading":"Linux","text":"Linux installations R primarily done console instructions slightly different depending distribution using.Click link appropriate Linux distribution follow detailed instructions provided.“R-core” “R-base” builds ones want choose.Follow instructions build install recommended dependencies.","code":""},{"path":"GettingStarted.html","id":"InstallRStudio","chapter":"Gettings Started with R","heading":"Download and Install R-Studio","text":"R-studio integrated development environment (IDE) R, Python, related programming tools provides additional features running debugging code data management. see IDE essential working large complex R projects.order install R-Studio:Go R-Studio website www.rstudio.com click “Download” top screen.Select “RStudio Desktop” option.Download run latest “installer” file appropriate operating system.Run downloaded file answer questions prompts appropriate. R-Studio automatically detect installation R.","code":""},{"path":"GettingStarted.html","id":"run-r-studio","chapter":"Gettings Started with R","heading":"Run R-Studio","text":"’ve installed R R-Studio, open R-studio look Console window (typically left hand side screen). tell version R associated installation R-Studio. goes well, recent version R just installed.R Version Installed","code":""},{"path":"GettingStarted.html","id":"RBasics","chapter":"Gettings Started with R","heading":"R and R-Studio Basics","text":"R powerful statistical analysis platform can used conduct quite complex analyses. learning curve bit steep first getting started payoff HUGE ecosystem existing R scripts packages large diverse. hope cover everything R R-Studio can short intro . tutorial version “Introduction R programming” Peeples used first week Quantitative Formal Methods Archaeology class number years. Hopefully get started.Although R seems complicated first, many quite complex statistical analyses run just lines code. learn basics, complex features R really just combinations basic procedures. won’t become R expert overnight, ’ve seen many students pick basics quite quickly begin take first analyses R matter hours.","code":""},{"path":"GettingStarted.html","id":"organization-of-r-studio","chapter":"Gettings Started with R","heading":"Organization of R-Studio","text":"First , let’s take look R-Studio setup. first open R-Studio first time, see screen divided 3 panes. getting started click “File” top screen go “New File > R Script” open 4th pane. see something like screen (Note color screen may different using particular color setting find easier eyes).R-StudioOrganization R-Studio Windows:Workspace - pane top left contains Workspace tabs can write code documents prior executing code.Console - pane bottom left console can type run commands directly.Environment/History - pane upper right includes tabs Environment (list objects functions currently initialized) History (list previous commands run console).Files/Plots/Packages - lower right pane tabs Files (shows files current directory), Plots (plots created console displayed), Packages (list additional packages installed initialized R), Help (can get information particular functions packages).Note locations visibility panes can changed going “View > Panes” selecting different options. set tutorials follow going focus Console first introduce panels provide along way.","code":""},{"path":"GettingStarted.html","id":"Math","chapter":"Gettings Started with R","heading":"Mathematical Operations","text":"Getting started R simple typing directly Console. can use R console like calculator conduct mathematical operations. Simply type numbers operators console hit enter calculate. answer output directly console default. Try typing following console:R uses ( ) bracketing groups operations. can nested complex mathematical operations determine order operations. example compare two equations :R uses typical mathematical operators including + - * / addition, subtraction, multiplication, division ^ raise number exponent.Anything placed # block code treated comment evaluated:","code":"\n3+3\n#> [1] 6\n4*10\n#> [1] 40\n50/5\n#> [1] 10\n((4*5+3)/2)*12\n#> [1] 138\n\n(((4*5))+3/2)*12\n#> [1] 258\n5^2\n#> [1] 25\n5^(2+1)\n#> [1] 125\n4 * 20 # comment here\n#> [1] 80\n3 * 4 # 4 + 4 will not be evaluated as it is after the #\n#> [1] 12"},{"path":"GettingStarted.html","id":"Variables","chapter":"Gettings Started with R","heading":"Creating Variables/Objects","text":"R can also assign numbers, characters, complex operations variables (also known objects context) can used mathematical operations. Typically, assign values object using <- assign command = also works. example:Object names R case sensitive include spaces. Object names can include numbers letters must start letter. good idea use descriptive object names object used repeatably.formatting object names common styles :snake_case_style - see little snakes (underscores) place spacesCamalCaseStyle - see capitalized humps denoting wordkebab-case-style - skewered right middleIn general styles fine, suggest try remain consistent. Also, avoid using . separate words used particular R functions calls ways can cause confusion.Illustration Allison HorstMany mathematical constants built right R sure overwrite (function) giving object name.","code":"\ntest_var <- 50\ntest_var\n#> [1] 50\n\ntest2 = 10 + test_var\ntest2\n#> [1] 60\n\nchar1 <- \"hello world\"\nchar1\n#> [1] \"hello world\"\npi\n#> [1] 3.141593\nLETTERS\n#>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\"\n#> [15] \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\nletters\n#>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\"\n#> [15] \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\nmonth.name\n#>  [1] \"January\"   \"February\"  \"March\"     \"April\"    \n#>  [5] \"May\"       \"June\"      \"July\"      \"August\"   \n#>  [9] \"September\" \"October\"   \"November\"  \"December\""},{"path":"GettingStarted.html","id":"Logical","chapter":"Gettings Started with R","heading":"Logical Operators","text":"R can also use logical operators (see list ). operators can used conjunction operations return value indicating TRUE FALSE. can used complex functions conditional statements see .Logical operators can also include statements & symbol statements |. example:","code":"\nv <- 50\nv > 20\n#> [1] TRUE\nv < 20\n#> [1] FALSE\nv*2 == 100\n#> [1] TRUE\nv <- 40\nv > 20 & v < 30 # and statement\n#> [1] FALSE\nv > 20 | v < 30 # or statement\n#> [1] TRUE"},{"path":"GettingStarted.html","id":"Vectors","chapter":"Gettings Started with R","heading":"Vectors","text":"R can also assign vector numbers characters variable preform operations using vector. example following use c() (c combine) command create vector subject mathematical operation.want call particular value selection values vector can use [] square brackets indicate item(s) interested .can also search vectors objects specific values:see particular value given object can use %% operator.","code":"\nz <- c(2,4,6,8,10,12)\nz/2\n#> [1] 1 2 3 4 5 6\nz[3] # item 3 in object z\n#> [1] 6\nz[4:6] # items 4 through 6 in object z\n#> [1]  8 10 12\nz[c(3,2,1)] # items 3, 2, 1, in that order from object z\n#> [1] 6 4 2\nvec_obj <- c(\"Ohtani\", \"Wheeler\", \"Correa\", \"Semien\", \"Soto\", \"Guerrero Jr.\", \"Correa\")\nvec_obj[vec_obj == \"Correa\"]\n#> [1] \"Correa\" \"Correa\"\n\"Ohtani\" %in% vec_obj\n#> [1] TRUE\n\n\"Judge\" %in% vec_obj\n#> [1] FALSE"},{"path":"GettingStarted.html","id":"Functions","chapter":"Gettings Started with R","heading":"Using Basic R Functions","text":"R number built-functions perform many common operations assessments. already used one c() fast easy might missed . Functions typically used typing name function followed set parenthesis contain arguments function expects. example:list frequently used built-functions see Quick-R page.","code":"\nv <- c(5, 10, 15, 20, 25, 30, 2000)\nmax(v)\n#> [1] 2000\nmin(v)\n#> [1] 5\nmean(v)\n#> [1] 300.7143\nmedian(v)\n#> [1] 20\nlog(v, base = exp(1)) # argument setting the base\n#> [1] 1.609438 2.302585 2.708050 2.995732 3.218876 3.401197\n#> [7] 7.600902\nlog10(v)\n#> [1] 0.698970 1.000000 1.176091 1.301030 1.397940 1.477121\n#> [7] 3.301030\nround(pi, digits = 2) # argument setting the number of digits to retain\n#> [1] 3.14"},{"path":"GettingStarted.html","id":"Tabular","chapter":"Gettings Started with R","heading":"Tabular Data","text":"R can used work tabular data well. Typically convenient read data file large tabular data (see working files ), can also generate simple numeric tabular data directly R using matrix() function. following example create two-row, two-column matrix converting vector numbers matrix specifying number rows nrow number columns ncol. assignments make inside matrix() function called arguments.Note matrix() function read numbers first column row. want want change can first investigate options function using help() function. order see documentation given function simply type help(\"NameOfFunction\") console ?NameOfFunction.help matrix functionAnd let’s zoom one piece particular:byrow argumentAs can see help materials matrix, additional argument use called byrow set FALSE default. Let’s change TRUE check results. Note can use capital F T place FALSE TRUE functions. Note also function call can span multiple rows automatically end close parentheses. multi-line formatting essential making longer function calls readable.Just like vectors, can also use matrices many mathematical statistical functions built directly R. example, let’s run Fisher’s Exact Test using fisher.test function assess independence rows columns table.output includes information data used run test, p-value, alternative hypothesis, confidence intervals, odds ratio. output get given function vary depending application. See help() documents function interest get info output.","code":"\ndat <- c(3,4,2,20)\nmat1 <- matrix(data = dat, nrow = 2, ncol = 2)\nmat1\n#>      [,1] [,2]\n#> [1,]    3    2\n#> [2,]    4   20\n?matrix\nmat2 <- matrix(\n  data = dat,\n  nrow = 2,\n  ncol = 2,\n  byrow = T\n)\nmat2\n#>      [,1] [,2]\n#> [1,]    3    4\n#> [2,]    2   20\nfisher.test(mat2)\n#> \n#>  Fisher's Exact Test for Count Data\n#> \n#> data:  mat2\n#> p-value = 0.07474\n#> alternative hypothesis: true odds ratio is not equal to 1\n#> 95 percent confidence interval:\n#>    0.5875228 107.8450263\n#> sample estimates:\n#> odds ratio \n#>   6.815654"},{"path":"GettingStarted.html","id":"DataTypes","chapter":"Gettings Started with R","heading":"Data Types in R","text":"many different types data R understands focus common. includes numeric data, integer data, character data, logical data, factors.numeric data - designation used real numbers can include decimal point.integer data - designation numbers without decimal. designate number integer type, can add L number (see example ). Note R automatically converts numeric integer data necessary mathematical operations.character data - designation string characters exclusively consist numbers. Character data can single character “” long string \"string character data\". general R displays character data inside \" \".logical data - designation evaluations logical statements takes form TRUE FALSE.factors - Factors nominal variables stored vectors R objects distinct “levels” value must . Factors useful many statistical procedures visualizations unique values can treated “groups” rather simply unique character data. designate data factor, use .factor() function. Note factors can numbers treated nominal characters evaluated.possible determine type data R object contains using str() function. Let’s look examples type :","code":"\nnum <- c(12.3, 32.4, 53, 4.2, 4, 22.3)\nstr(num)\n#>  num [1:6] 12.3 32.4 53 4.2 4 22.3\n\nint <- c(1L, 2L, 5L, 6L)\nstr(int)\n#>  int [1:4] 1 2 5 6\n\nchar <- c(\"string1\", \"string2\", \"This too is a string\")\nstr(char)\n#>  chr [1:3] \"string1\" \"string2\" \"This too is a string\"\n\nTF <- c(TRUE, FALSE, FALSE, TRUE) # note the lack of \" \"\nstr(TF)\n#>  logi [1:4] TRUE FALSE FALSE TRUE\n\nfac <- as.factor(c(\"type1\", \"type2\", \"type2\", \"type3\"))\nstr(fac)\n#>  Factor w/ 3 levels \"type1\",\"type2\",..: 1 2 2 3"},{"path":"GettingStarted.html","id":"ObjectTypes","chapter":"Gettings Started with R","heading":"Object Types in R","text":"four common object types R vectors, matrices, lists, data frames. already explored vectors matrices can define classes detail .vector - combined set values type (character, numeric, etc.)matrix - set values rectangular two-way table type (character, numeric, etc.)data frame - set values rectangular two-way table different columns can different data typeslist - list collection R objects can vectors, matrices, data frames others format combined single object.","code":""},{"path":"GettingStarted.html","id":"vectors","chapter":"Gettings Started with R","heading":"Vectors","text":"already introduced vectors can point one feature often useful assessing vectors. length() function tells many elements vector.","code":"\nv <- c(1, 6, 4, 8, 7, 5, 3, 8, 10, 44)\nlength(v)\n#> [1] 10"},{"path":"GettingStarted.html","id":"matrices","chapter":"Gettings Started with R","heading":"Matrices","text":", already introduced matrices details worth addressing . , want call specific value matrix can use [,] square brackets row number listed followed comma column number. example:want know size matrix, can use dim() dimensions function:","code":"\nmat1\n#>      [,1] [,2]\n#> [1,]    3    2\n#> [2,]    4   20\nmat1[2, 1] # row 2 column 1\n#> [1] 4\ndim(mat1)\n#> [1] 2 2"},{"path":"GettingStarted.html","id":"data-frame","chapter":"Gettings Started with R","heading":"Data Frame","text":"brief definitions suggest, data frames similar matrices can include mixed data types rectangular table. row column must, however, number entries. data frame can created combining set vectors. example:want look kind data R understands column , can use str() structure function.Note dim() function also works data frames [,] call specific items:","code":"\ncol1 <- c(\"mammoth\", \"mastadon\", \"bison\")\ncol2 <- c(50L, 52L, 14L)\ncol3 <- c(11.14, 22.23, 656.34)\ncol4 <- as.factor(c(\"type1\", \"type1\", \"type2\"))\ncol5 <- c(TRUE, FALSE, TRUE)\n\ndat <- data.frame(col1, col2, col3, col4, col5)\ndat\n#>       col1 col2   col3  col4  col5\n#> 1  mammoth   50  11.14 type1  TRUE\n#> 2 mastadon   52  22.23 type1 FALSE\n#> 3    bison   14 656.34 type2  TRUE\nstr(dat)\n#> 'data.frame':    3 obs. of  5 variables:\n#>  $ col1: chr  \"mammoth\" \"mastadon\" \"bison\"\n#>  $ col2: int  50 52 14\n#>  $ col3: num  11.1 22.2 656.3\n#>  $ col4: Factor w/ 2 levels \"type1\",\"type2\": 1 1 2\n#>  $ col5: logi  TRUE FALSE TRUE\ndat\n#>       col1 col2   col3  col4  col5\n#> 1  mammoth   50  11.14 type1  TRUE\n#> 2 mastadon   52  22.23 type1 FALSE\n#> 3    bison   14 656.34 type2  TRUE\ndim(dat)\n#> [1] 3 5\ndat[2, 1]\n#> [1] \"mastadon\""},{"path":"GettingStarted.html","id":"lists","chapter":"Gettings Started with R","heading":"Lists","text":"list simply convenient way combining multiple objects single object. doesn’t matter type objects . Lists can defined using list() function. example:want call specific element list use double square brackets [[]] along numeric index middle:can even stack sets double single brackets call specific items within list elements:","code":"\nout1 <- list(mat1, dat, c(1, 2, 4)) # create a list containing 3 objects\nout1\n#> [[1]]\n#>      [,1] [,2]\n#> [1,]    3    2\n#> [2,]    4   20\n#> \n#> [[2]]\n#>       col1 col2   col3  col4  col5\n#> 1  mammoth   50  11.14 type1  TRUE\n#> 2 mastadon   52  22.23 type1 FALSE\n#> 3    bison   14 656.34 type2  TRUE\n#> \n#> [[3]]\n#> [1] 1 2 4\nout1[[3]]\n#> [1] 1 2 4\nout1[[3]][2] # item 2 in list object 3\n#> [1] 2\nout1[[2]][2, 1] # row 2 column 1 in list object 2\n#> [1] \"mastadon\""},{"path":"GettingStarted.html","id":"Workspace","chapter":"Gettings Started with R","heading":"The Workspace Tab","text":"Now starting get complex calls functions, useful write edit code executing rather typing directly Console. , can work Workspace tab R script document created beginning tutorial (Go File > New File > R Script open new document). .R documents can edited saved computer can return later. Let’s take look works.Think R script document draft plan type Console.","code":""},{"path":"GettingStarted.html","id":"Directory","chapter":"Gettings Started with R","heading":"Setting the Working Directory","text":"get started, let’s save blank R file just created. First, want define “Working Directory” files associated project go. go menu top screen click “Session > Set Working Directory > Choose Working Directory” navigate location like save file. Next, click “File > Save ” define name R script. end .R extension R R studio recognize R Scripts.","code":""},{"path":"GettingStarted.html","id":"Files","chapter":"Gettings Started with R","heading":"Working with your first R script","text":"Now saved script, can type mathematical operations, functions, code just directly Console . main advantage make mistake can go back fix easily. Go ahead copy code next code chunk paste R script int Workspace window save document.saved, highlight code Workspace window click “Run” button top right side pane (see yellow arrow ).WorkspaceThis execute code Console print results. Let’s say ran code, realized actually wanted raise mat3 3rd power typed one number data incorrectly. can make changes select code click run . true power scripts allow us make changes modify code easily go without retyping commands. Anything can console can first set Workspace pane.","code":"\nmat3 <- matrix(\n  data = c(4, 5, 1, 5, 1, 5),\n  nrow = 2,\n  ncol = 3,\n  byrow = T\n)\n\nmat3^2"},{"path":"GettingStarted.html","id":"InstallPackages","chapter":"Gettings Started with R","heading":"Installing and Using Packages","text":"far, everything done involved packages included “base” R internal built-functions. One best things R ecosystem packages created peer reviewed others manner statistical analyses can imagine. package just everything always good idea check start write complex script .order install external packages, need know name package want simply type install.packages(\"NameOfPackage\") console. Let’s try installing vegan package first includes lots useful functions community ecology research.package installs, can “call” initialize using libaray() function. Notice load package also loads “permute” “lattice” two additional packages used within vegan. dependencies automatically installed installed vegan package.Now can use just base R functions, also functions within vegan package. Within package one particularly useful function called diversity() allows us calculate manner common diversity measures. Remember check ?diversity want learn package arguments. Let’s give try creating vector calculating two different diversity indices vector:\nexample shows, package loaded using \nlibrary() function, nothing special using\nexternal functions. called Console just like built-\nfunctions. , however, one additional consideration. Since \nmany packages created many people, sometimes\ntwo packages use function name. example, \nigraph sna packages use function\nname degree() degree centrality. packages \ninitialized R, R know one use? solution \nuse package name directly function call like \ncode :\nwriting code others use, may good idea include package names function calls avoid ambiguity.\ntons useful packages can sometimes \nbit overwhelming trying find . Searching search engine \nsimple letter “R” can also yield unexpected results. One helpful tip\nsearching packages include “CRAN” “package” \nsearch terms. CRAN stands Comprehensive R Archive Network \narchive contains peer reviewed \nestablished packages R.\n","code":"\ninstall.packages(\"vegan\")\nlibrary(vegan)\n#> Loading required package: permute\n#> Loading required package: lattice\n#> This is vegan 2.6-2\nvec1 <- c(1,6,2,7,45,3,6,2,4,6,7,2)\n\ndiversity(vec1, index = \"shannon\")\n#> [1] 1.831803\n\ndiversity(vec1, index = \"simpson\")\n#> [1] 0.7259993\nigraph::degree(data) # igraph degree function\nsna::degree(data) # sna degree function"},{"path":"GettingStarted.html","id":"WorkingWithFiles","chapter":"Gettings Started with R","heading":"Working with Files","text":"many cases may wish either write read external files R. Frequently files take shape spreadsheets Excel documents csv (comma separated value) documents. R many functions reading data built-base R. Let’s try first writing .csv (comma separated value) file matrix generate reading back . Note files write console go directly R working directory unless otherwise specify.write csv file use write.csv() function. First create simple matrix, add row names column names, export .export file, see appear File pane bottom right R-Studio within working directory.File paneIf want read file back , can simply use read.csv() function. Let’s give try create new object called, read_mat results function. use argument header = T indicate first row represents column names row.names = 1 indicate first column includes row names.\nimportant note , however, \nread.csv()function doesn’t know difference \ndata frame matrix unless specify. Indeed, check, R sees\nread_mat data frame. purposes doesn’t\nmatter , can convert matrix using \n.matrix() function.\nlots different functions reading files different formats introduce later subsequent sections tutorial relevant. overview common file types see Quick-R tutorial.","code":"\nvec2 <- c(4, 2, 65, 4, 2, 4, 6, 4, 2)\n# Notice in the matrix call below we don't enter 'nrow'\n# and other argument names as R automatically expects\n# them to occur in the order mentioned in the documentation\nmat4 <- matrix(vec2, 3, 3) # 3 row 3 column matrix\nrow.names(mat4) <- c(\"row 1\", \"row 2\", \"row 3\") # assign row names\ncolnames(mat4) <- c(\"A\", \"B\", \"C\") #assign col names\nmat4 # view matrix\n#>        A B C\n#> row 1  4 4 6\n#> row 2  2 2 4\n#> row 3 65 4 2\n\n# Export the matrix as a csv file\nwrite.csv(mat4, file = \"output_mat.csv\")\nread_mat <- read.csv(file = \"output_mat.csv\", header = T, row.names = 1)\nread_mat\n#>        A B C\n#> row 1  4 4 6\n#> row 2  2 2 4\n#> row 3 65 4 2\nstr(read_mat)\n#> 'data.frame':    3 obs. of  3 variables:\n#>  $ A: int  4 2 65\n#>  $ B: int  4 2 4\n#>  $ C: int  6 4 2\nread_mat2 <- as.matrix(read_mat)\nis.matrix(read_mat2)\n#> [1] TRUE"},{"path":"GettingStarted.html","id":"Plotting","chapter":"Gettings Started with R","heading":"Plotting Data","text":"One great features R ability make kinds amazing data visualizations. Making simple graphics easy see, defining specific details often requires number different packages considerable care. Indeed, vast majority functions used Online Companion used visualizations.Let’s start something simple creating two vectors creating bi-plot comparing . use plot() function plot automatically appear bottom right pane R-Studio window. use rnorm() function generate random numbers normal distribution.\nchunk code , many places document,\nuse set.seed() function. function expects \ninteger uses number initialize random number generator\nbuilt R. use seed computer, \nget results . entered different number \nset.seed() get different results. helps us\nensure code reproducible.\ncan also easily create histogram single variable additional arguments:boxplots:lots figures built right base R suggest exploring R Gallery Book outlines many options.\nremainder Online Companion go detail \nmodify configure visualizations worth mentioning one\ncommon visualization tool almost eclipsed base R graphics\npopularity. package ggplot2. package\ncan used sorts visualizations uses format \nsomewhat different base R.\nLet’s take look example:code chunk , created data frame (ggplot2 requires) combining random x y variables. Next, made generic call ggplot2 using ggplot(data = df) line. creates ggplot object set df data considered. Notice line followed +. package continue read lines line end symbol ggplot calls can often quite long.next line geom_point() function. package designates different kinds visualizations geom_ many options (geom_histogram, geom_bar, geom_polygon, etc.). geom_point function refers simple point plot. argument inside function defined aes(x = x, y = y). package aes stands aesthetics. case, using aesthetics call designate variable x y axis, easy named variable appropriately.ggplot2 includes seemingly endless customization options. way many options us cover good place start R Graph Gallery website.cover many examples visualization Section tutorial particular leans heavily ggplot2 format now, let’s just see couple additional examples.","code":"\nset.seed(465)\n# Create a random normal variable with 5000 entries and \n# a mean of 40 and standard deviation of 3\nx <- rnorm(5000, mean = 40, sd = 3)\n# Create a random normal variable with 5000 entries and \n# a mean of 5 and standard deviation of 0.5\ny <- rnorm(5000, mean = 5, sd = 0.5)\n# plot the results\nplot(x,y)\nhist(x, breaks=20) # breaks defines the number of bars\nboxplot(x, y)\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\ndf <- data.frame(x, y)\n\nggplot(data = df) +\n  geom_point(aes(x = x, y = y))\nggplot(data = df) +\n  geom_histogram(aes(x = y), col = \"blue\", fill = \"darkorchid4\") +\n  xlab(\"Numbers!!\") +\n  ylab(\"REALLY BIG NUMBERS\") +\n  theme_minimal()\n\nggplot(data = df) +\n  geom_bin2d(aes(x = x, y = y)) +\n  scale_fill_continuous(type = \"viridis\") +\n  theme_bw()\n\ndf2 <- data.frame(d1 = rpois(50, lambda = 4),\n                  gp = sample(size = 50, letters[1:4], replace = T))\nggplot(data = df2) +\n  geom_bar(aes(x = d1, fill = factor(gp))) +\n  theme_bw()"},{"path":"GettingStarted.html","id":"AdvancedR","chapter":"Gettings Started with R","heading":"More Advanced R Features","text":"examples far covered basic features R R-Studio. just things implemented online document need bit additional explanation. can follow along examples , able replicate work document. features section help expand skills better understand complicated code document.","code":""},{"path":"GettingStarted.html","id":"Conditionals","chapter":"Gettings Started with R","heading":"Conditional Statements","text":"Another common need programming R conduct action conditioned another action variable state. example, TRUE B. statements like formally R using following format:Example 1 statement called test evaluated TRUE event1 executed. test evaluated FALSE nothing happens.Example 2 …else statement. example statement called test evaluated TRUE event1 executed. test evaluated FALSE event2 executed.Let’s take look worked example print output screen depending outcome test expression.first example , evaluation x > 50 FALSE statement brackets else evaluated. second example, evaluation x*2 >50 TRUE first statement evaluated. Finally, third example, x > 50 FALSE since else statement nothing happened.want apply ...else statement vector values rather one time, can use useful function ifelse(). ifelse() function expects first item parenthesis test expression, followed event execute statement true event execute expression false.Another useful frequently used conditional function () function. function allows evaluate items object meet given condition. Let’s take look example see works:first example , created sequence numbers 1 10 evaluated greater 5. results indicated items 6, 7, 8, 9, 10 vector greater 5. Note results referring values instead numeric indexes values. second example illustrates . much like first example create sequence numbers 2 20 counting 2s. evaluate numbers vector greater 10, results tell us 6th, 7th, 8th, 9th, 10th numbers greater 10.","code":"\n# Example 1\nif (test) {\n  event1\n}\n\n# Example 2\nif (test) {\n  event1\n} else {\n  event2\n}\nx <- 40\n\nif (x > 50) {\n  cat('Greater Than 50')\n} else {\n  cat('Less Than 50')\n}\n#> Less Than 50\n\nif (x*2 > 50) {\n  cat('Greater Than 50')\n} else {\n  cat('Less Than 50')\n}\n#> Greater Than 50\n\nif (x > 50) {\n  cat('Greater Than 50')\n} \nx <- seq(5, 100, by = 5)\nx\n#>  [1]   5  10  15  20  25  30  35  40  45  50  55  60  65  70\n#> [15]  75  80  85  90  95 100\n\nifelse(x > 50, \"Greater Than 50\", \"Less Than 50\")\n#>  [1] \"Less Than 50\"    \"Less Than 50\"    \"Less Than 50\"   \n#>  [4] \"Less Than 50\"    \"Less Than 50\"    \"Less Than 50\"   \n#>  [7] \"Less Than 50\"    \"Less Than 50\"    \"Less Than 50\"   \n#> [10] \"Less Than 50\"    \"Greater Than 50\" \"Greater Than 50\"\n#> [13] \"Greater Than 50\" \"Greater Than 50\" \"Greater Than 50\"\n#> [16] \"Greater Than 50\" \"Greater Than 50\" \"Greater Than 50\"\n#> [19] \"Greater Than 50\" \"Greater Than 50\"\nx <- seq(1, 10) # sequence of numbers 1 to 10\nx\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nwhich(x > 5)\n#> [1]  6  7  8  9 10\n\ny <- seq(2, 20, by = 2) # sequence of numbers 2 to 20 by 2s\ny\n#>  [1]  2  4  6  8 10 12 14 16 18 20\nwhich(y > 10)\n#> [1]  6  7  8  9 10"},{"path":"GettingStarted.html","id":"Loops","chapter":"Gettings Started with R","heading":"Loops","text":"loop provides set instructions R repeat code block number times based rules supply. typical syntax :means every value sequence values, evaluate expression event chunk. Let’s take look worked example help clarify .example helps illustrate, (1:5) statement defines = 1 evaluates statement print(* 2), defines = 2 evaluates print(* 2), completes chunk = 5. key feature loops can use value assigned iterator statement inside curly brackets {} evaluate statement range values. sequence values assigned iterator arbitrary can occur order:can also assign results expressions curly brackets new object. want retain results results rewritten, need first define output object start.second example, statement within brackets tells R assign value z position [z] therefore results retained rather rewritten sequence loop.lot can done loops basic description need know understand code document.","code":"\nfor (value in sequence) {\n  event\n}\nfor (i in 1:5) { # for every value in the sequence from 1:5\n  print(i * 2)\n  }\n#> [1] 2\n#> [1] 4\n#> [1] 6\n#> [1] 8\n#> [1] 10\nval_seq <- c(5,1,8,4,1,5,7)\n\nfor (m in val_seq) {\n  print(m)\n}\n#> [1] 5\n#> [1] 1\n#> [1] 8\n#> [1] 4\n#> [1] 1\n#> [1] 5\n#> [1] 7\n# Compare these two chunks of code\n\nfor (z in 1:10) {\n  out <- z\n}\nout\n#> [1] 10\n\nout <- NULL\nfor (z in 1:10) {\n  out[z] <- z\n}\nout\n#>  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"GettingStarted.html","id":"CustomFunctions","chapter":"Gettings Started with R","heading":"Custom Functions","text":"Finally, going end discussion R can used create custom functions. operation , doesn’t make sense keep copying pasting code every time. makes sense define function just call . defined, custom function works just like built-package functions ’ve seen . basic syntax function R:format fairly simple example. functions can quite complex, complexity usually product combining loops conditional statements processes discussed within function rather anything new beyond ’ve shown far. Let’s take look simple worked example see custom functions work:shows, named argument function call can used expression evaluated within brackets. Functions can contain many lines code many arguments features format simple examples . Let’s look somewhat complex function see works:Let’s break happening chunk code . First, defined function one argument x. Inside function expression initialized new variable output called z. enter loop iterates values sequence numbers 1 length vector x. value z position defined value x position times divided 5. loop finishes, function returns vector z results. example shows, arguments need limited single values can include vectors, data.frames, matrices, lists, type R object.","code":"\nfunction_name <- function(arguments) {\n  result <- expression_to_evaluate\n  return(result)\n}\n\n# Once defined function can be run as\nfunction_name(arguments)\nfunc1 <- function(x, y) {\n  result <- (x * y) + (x - y)^2\n  return(result)\n}\n\nfunc1(4, 5)\n#> [1] 21\n\nfunc1(10, 5)\n#> [1] 75\nmyfunct <- function(x) {\n  z <- NULL\n  for (i in 1:length(x)) {\n    z[i] <- (x[i] * i) / 5\n  }\n  return(z)\n}\n\nval_seq <- seq(1:10)\nmyfunct(val_seq)\n#>  [1]  0.2  0.8  1.8  3.2  5.0  7.2  9.8 12.8 16.2 20.0"},{"path":"GettingStarted.html","id":"test-your-skills","chapter":"Gettings Started with R","heading":"Test Your Skills","text":"’ve followed along tutorial far, able many basic operations R R-Studio. Let’s now put skills test. Use learned create function converts Fahrenheit temperatures Celsius. formula conversion (F_temp - 32) * 5 / 9. Create function reads F temperature outputs C run sequence values .Hints: Remember can’t use F object name designation R uses FALSE. Also, think trying accomplish . want create function iterates across vector. ’s much previous example can use code inspiration.working function, use round() function convert results integers (check ?round() need hints ) output results object called res. Finally run chunk code surprise:provided answer give try first peeking answer.peeking try!!Artwork Allison HorstHere solution :","code":"\nF_temp <- c(44, 59, 59, 39, 50, 59, 35)\npaste(c(LETTERS[res]), collapse = \"\")\ntemp_func <- function(f) {\n  results <- NULL\n  for (i in 1:length(f)) {\n    results[i] <- ((f[i] - 32) * 5 / 9)\n  }\n  return(results)\n}\n\nF_temp <- c(44,59,59,39,50,59,35)\nout <- temp_func(F_temp)\nout\n#> [1]  6.666667 15.000000 15.000000  3.888889 10.000000\n#> [6] 15.000000  1.666667\n\nres <- round(out, digits = 0)\nres\n#> [1]  7 15 15  4 10 15  2\n\npaste(c(LETTERS[res]), collapse = \"\")\n#> [1] \"GOODJOB\""},{"path":"DataWorkspaceSetup.html","id":"DataWorkspaceSetup","chapter":"Section 1 Data and Workspace Setup","heading":"Section 1 Data and Workspace Setup","text":"section provides downloadable files network data sets used online companion book well information primary R packages used analysis visualization throughout tutorial. also provide brief instructions importing data R using R-studio guidance setting R-studio working environment. additional guidance see Getting Started R.","code":""},{"path":"DataWorkspaceSetup.html","id":"DataSets","chapter":"Section 1 Data and Workspace Setup","heading":"1.1 Data Sets","text":"analyses illustrated document use number real simulated archaeological data sets serve examples particular data types techniques. data sets used provided .csv (comma separated value) .RData formats can downloaded can follow along analyses computer. encourage explore files see formatted guide setting data sets.data used include range different network data formats types. primary data sets described detail Brughmans Peeples (2022) Chapter 2.8. Note spatial locations archaeological sites provided locations randomly jittered 10 kilometers actual locations maintain data security.files can right click “save ” save use locally. Note many additional data sets relating replication particular figures book provided code particular figure occurs. ’d like just download everything see next section","code":""},{"path":"DataWorkspaceSetup.html","id":"Everything","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.1 Just Give Me Everything","text":"Hey, get . ’re busy just want data one convenient package. provide data used appendix single .zip file download. follow along examples appendix need choose R working directory place contents *.zip folder within individual files contained within folder called “data”. Note includes additional files required reproducing particular figures well.All_data.zip - single compressed file containing data files used appendix.","code":""},{"path":"DataWorkspaceSetup.html","id":"RomanRoad","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.2 Roman Road Networks","text":"development elaborate road system one enduring legacies Roman Republic Empire. Areas came Roman control connected Rome important provincial centers entirely new roads well redeveloped existing roads. roughly second century AD onward resulted integrated terrestrial transport network connecting North-Africa, Middle East, western southern Europe. Much subsequent development transport systems regions built Roman system.primary source roads entire Roman world Barrington Atlas Greek Roman World (Talbert 2000) digitization Ancient World Mapping Center (2012). many examples focus particular roads Iberian Peninsula, digitized great detail Pau de Soto (de Soto Carreras 2021). analyses Roman road network ancient settlements represented nodes existence road two settlements represented edge. also include length road edge attribute.Hispania_nodes - NodeIDs names Roman era settlements Iberian Peninsula along names latitude longitude locations decimal degrees.Hispania_roads - Edge list road connections using NodeIDs Hispania_nodes file. file contains “weight” variable defined edge denotes length road segment.Stanford ORBIS project provide additional data across Roman World including settlements, roads, characterizations travel time. data wrapped convenient R compendium Sebastian Heath data available GitHub :data sets used case studies road networks () Roman Empire whole (source: Ancient World Mapping Centre 2012), (b) highly-detailed representation Roman road network Iberian Peninsula (de Soto Carreras 2021).","code":"\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"sfsheath/cawd\")"},{"path":"DataWorkspaceSetup.html","id":"SWSN","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.3 Southwest Social Networks Project Ceramic Similarity Networks","text":"Southwest Social Networks (SWSN) Project (subsequent cyberSW project) large collaborative effort focused exploring methods models network analysis archaeological data better understand patterns interaction, population movement, demographic change across U.S. Southwest Mexican Northwest time (ca. .D. 800-1800; Borck et al. 2015; Giomi et al. 2021; Mills et al. 2013a; 2013b; 2015; 2018; Peeples Haas 2013; Peeples et al. 2016; Peeples Roberts 2013). interval considered project region inhabited largely sedentary agricultural populations (though mobile populations also present throughout period) communities large several thousand people peak. region blessed excellent archaeological preservation, fine grained chronology anchored dendrochronological dates, nearly 150 years focused archaeological research.SWSN/cyberSW project team gathered massive database information location size tens thousands archaeological sites ceramic material cultural typological frequency data consisting millions objects explore patterns material similarity, exchange, technology change across time space study area. data well tools needed analyze available online platform called cyberSW (cyberSW.org). online platform even allows explore data directly internet browser. size complexity SWSN/cyberSW data make particularly good example discussing decision processes involved visualizing analyzing large networks.several sections book also use subsets larger data set: San Pedro Valley, Chaco World. San Pedro Valley southern Arizona well-studied portion SWSN study area (see Clark Lyons 2012; Gerald 2019) early focus network methodological exploration team (Mills et al. 2013b). data subset includes detailed ceramic typological frequency known major settlements across region late pre-Hispanic period (ca. .D. 1200-1450). Chaco World large-scale social political system spanned much Colorado Plateau ca. .D. 800-1150. settlement system marked construction massive public architectural features known great houses great kivas. subset database includes information architecture ceramic typological data large portion known Chacoan architectural complexes throughout U.S. Southwest. Chaco World major focus SWSN/cyberSW project (Giomi et al. 2021; Giomi Peeples 2019; Mills et al. 2018).networks, individual settlements treated nodes edges defined weighted based similarities ceramic wares recovered settlements. Ceramic data used generate networks apportioned sequence 50-year chronological intervals using methods described detail Roberts colleagues (2012) Ortman (2016; see discussion Mills et al. 2018) able explore change time. Site locations site attribute data also considered examples. R implementations chronological apportioning methods available GitHub well (R implementation Roberts et al. 2012, R implementation Ortman 2016).SWSN Attribute Data AD 1300-1350 - Attribute data SWSN sites dating AD 1300 1350 including site name, site sub-region (Macro), jittered easting northing UTM coordinates.SWSN Similarity Data AD 1300-1350 - Symmetric similarity matrix based Brainerd-Robinson similarities SWSN sites dating AD 1300 1350.Chaco World Attribute Data AD 1050-1100 - Attribute data sites Chacoan architectural features dating AD 1050 1100 including site IDs, site names, site sub-regions, counts different kinds public architectural features, jittered easting northing site locations.Chaco World Ceramic Data AD 1050-1100 - Ceramic count data ware sites Chacoan architectural features dating AD 1050 1100.Chaco World Network AD 1050-1100 - Adjacency matrix binarized network ceramic similarity sites Chacoan architectural features dating AD 1050 1100.San Pedro Networks throgh Time - .RData file contains igraph network objects San Pedro region ceramic similarity networks AD1250-1300, AD1300-1350, AD1350-1400.Map cyberSW project study area showing sites database San Pedro Chaco World subsets database shaded.","code":""},{"path":"DataWorkspaceSetup.html","id":"Cibola","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.4 Cibola Region Technological Similarity Networs","text":"Cibola region along Arizona New Mexico border U.S. Southwest large diverse physiographic region spanning southern edge Colorado Plateau ancestral homeland contemporary Zuni (:shiwi) people. Peeples colleagues (Peeples 2011, 2018; Peeples et al. 2021) explored patterns technological similarity communities practice region series sites dating ca. .D. 1100-1350 explorations corrugated ceramic cooking pots. Corrugated pots, produced across much U.S. Southwest least 9th 14th centuries, coiled ceramic vessels coils used make vessel never fully smoothed. Thus, ceramics retain substantial amounts evidence specific techniques used produce .book use data ceramic technological production techniques generate similarity networks originally published Peeples (2011; 2018). networks settlement treated node similarity metrics defining weights edges pairs sites based analysis number metric coded attributes individual ceramic vessels. addition material cultural data, also additional site attributes location types frequency public architectural features.Ceramic technological data Peeples (2018): Additional data documentation project available tDAR collection. Nodes defined individual settlements edges defined based similarities technological attributes cooking pots recovered settlements. details methods assumptions used define networks see Peeples (2018, pg. 100-104).Cibola Ceramic Technological Clusters - Counts ceramic technological clusters sites Cibola region sample.Cibola Site Attributes - Site location, public architectural feature types, sub-region designations sites Cibola region sample.Cibola Binary Network Edge List - Binary edge list Cibola technological similarity network.Cibola Binary Network Adjacency Matrix - Binary adjacency matrix Cibola technological similarity network.Peeples2018.Rdata - file contains number objects R format including site attributes (site_info), symmetric Brainerd-Robinson similarity matrix (ceramicBR), binary network object statnet/network format (BRnet), weighted network object network format (BRnet_w)Network graph showing connections among Cibola region settlements based strong similarities technological attributes corrugated cooking pots recovered site. Sites colour coded region sites northern half study area shown black sites southern half shown white.","code":""},{"path":"DataWorkspaceSetup.html","id":"Himalaya","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.5 Himalayan Visibility Networks","text":"Hundreds forts small fortified structures located mountain tops ridges central Himalayan region Garhwal Uttarakhand (India). Despite prominent feature history region interwoven local folklore (Garhwal derived ‘land forts’), fortification phenomenon received little research attention. might origins downfall Katyuri dynasty 11th century continued 15th century region consolidated Parmar dynasty possibly even later attested Mughal, Tibetan, British aggression.book use research context example spatial networks specifically visibility networks.made possible thanks survey forts region performed context PhD project Dr Nagendra Singh Rawat (2017). use catalog 193 sites (Rawat et al. 2020, Appendix S1), use case Chaundkot fort surroundings particular case study. Chaundkot fort theorized one key strongholds region also one partly excavated (Rawat Nautiyal 2020). case studies represent strongholds nodes, ability line--sight exist observers located pair strongholds represented directed edge. length line--sight represented edge attribute.Himalayan Node data - Node attribute data Himalayan sites including locations lat/long, elevation, site name/type, descriptions landscape features.Himalayan Edge List - Edge list data information connections among nodes within 25kms information distance whether target site visible source. Note edges Visible = TRUE included activated edges.193 strongholds (nodes) connected lines--sight 25km length (distance large fire smoke signals visible). Node colours represent communities nodes identified Louvain modularity method (see section 4.4.6) lines--sight 15km (see Rawat et al. 2021).","code":""},{"path":"DataWorkspaceSetup.html","id":"ArchPubs","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.6 Archaeological Publication Networks","text":"knowledge stories past human behavior much shaped material remains excavate, actions interactions archaeologists study . Aspects actions interactions formally represented publications. papers can co-authored, reflecting scientific collaboration networks communities practice. Authors cite authors’ works indicate explicitly influenced related paper’s subject matter.previous work, turned tools archaeological network science archaeological network researchers (Brughmans 2013; Brughmans Peeples 2017). studied co-authorship citation practices 250 publications applied formal network methods archaeological research topics 1968 present. list publications, undirected co-authorship network can made representing individual authors nodes, connecting pair authors edge co-authors one papers, edge values representing number papers co-authored. Moreover, directed citation network can made bibliographies list publications. citation network, node represents individual publication connected publications bibliography directed edge. edge goes citing publication cited publication, represents source direction academic influence explicitly expressed publication. use networks archaeological network research publications throughout volume illustrate concepts like acyclic structure citation networks.Publication Networks Attribute Data - Attribute data table including information publications including unique key identifier, publication type, publication title, publication date, author list separated semi-colons.Publication Networks Co-Authorship Incidence Matrix - incidence matrix unique publications rows authors columns.Two-mode archaeological publication network, representing set individual authors nodes connected nodes set publication venues (journals, books, proceedings) published (see Brughmans Peeples 2017:Fig. 10).","code":""},{"path":"DataWorkspaceSetup.html","id":"Guadalquivir","chapter":"Section 1 Data and Workspace Setup","heading":"1.1.7 Iron Age Sites in Southern Spain","text":"Guadalquivir river valley south Spain present-day Seville Córdoba densely urbanized late Iron Age (early 5th c. BC late 3rd c. BC). Many settlements dotted along rivers southern part valley (Fig. 2.6), settlement pattern focused nuclear settlements sometimes referred oppida. reveal defensive architecture many located elevations. Previous studies Iron Age settlements region explored possible explanations locations (Keay Earl 2011; Brughmans et al. 2014, 2015). Given elevated locations, one theory received considerable attention intervisibility. small settlements surrounding oppida seen , oppida located partly allow visual control surrounding settlements? groups Iron Age settlements tend intervisible, forming communities visible daily basis? chains intervisibility allowed passing information one site another via visual smoke fire signals, chains follow key communication medium area: navigable rivers?questions explored previous research using GIS network methods, using data set 86 sites lines--sight connecting pairs Iron Age settlements distances 20km large fire smoke signals visible (data set research topic: Keay Earl 2011; Brughmans et al. 2014, 2015). account errors Digital Elevation Model (DEM), probabilistic line--sight analysis performed introduces random errors DEM can blocking enhancing effect lines--sight. locations 86 sites network displayed figure 2.9 also available Appendix Brughmans et al. 2014. locations used Chapter 7 book illustrate spatial network models explore different geographical structures might underlie settlement pattern.Guadalquivir settlement data - Site number locations decimal degrees sites Guadalquivir survey area.lower Guadalquivir river valley 86 Iberian (Iron Age II) sites used case study. Note clustering sites around rivers. Lines--sight >50% probability shown. (Source: Brughmans et al. 2014:Fig. 6b.)","code":""},{"path":"DataWorkspaceSetup.html","id":"Importing","chapter":"Section 1 Data and Workspace Setup","heading":"1.2 Importing Data in R","text":"section briefly describes data provided (data) can imported R analyses (see Working Files info). running code , however, need ensure R session set correct working directory (location placed .csv files just downloaded). , go menu bar top click Session > Set Working Directory > Choose Directory navigate place hard drive files reside.example read Cibola_edgelist.csv file define object called EL1 includes data file using read.csv() command. Note case file want read sub-folder working directory called “data” need use data/ prefix file name correctly call file. chose use sub-folder call folder something else, need modify data/ section code.addition .csv files, several examples book several data sets provide .RData files can read directly R can contain multiple R objects. can read directly R environment using load() function. See example . note must specify specific directory within working directory file located.","code":"\n# read in data with first row representing column names (header=TRUE)\nEL1 <- read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n# look at the first few rows\nhead(EL1)\n#>           FROM                   TO\n#> 1 Apache Creek         Casa Malpais\n#> 2 Apache Creek         Coyote Creek\n#> 3 Apache Creek         Hooper Ranch\n#> 4 Apache Creek      Horse Camp Mill\n#> 5 Apache Creek        Hubble Corner\n#> 6 Apache Creek Mineral Creek Pueblo\nload(\"data/map.RData\")"},{"path":"DataWorkspaceSetup.html","id":"PrimaryPackages","chapter":"Section 1 Data and Workspace Setup","heading":"1.3 Required/Suggested R Packages","text":"\nappendix rely number pre-existing R packages. \norder use packages new installation R R-studio, \nfirst need install . Note need \nnew installation R. install packages, can click \n“Packages” tab window bottom right R studio, click\n“Install” button top type names packages\nseparated commas. Alternatively can install packages \nconsole simply typing\ninstall.packages(“nameofpackagehere”).\ninstall.packages(c(\"statnet\", \"igraph\"))use number R packages modules book manipulating analyzing network data general analyses procedures. frequently used network packages include:igraph (Csardi Nepusz 2006) - analytical routines simple graphs graph analysisstatnet (Krivitsky et al. 2020) - suite packages designed management statistical analysis networks including network, sna, ergm, others.intergraph (Bojanowski 2015) - set routines coercing objects common network formats Rggraph (Pederson 2021) - powerful graph visualization package based ggplot2 plotting formatThroughout Online Companion, consistently rely igraph statnet (statnet actually suite packages includes sna, network, ergm, others). part two packages many things. can use calculate centrality metrics, define groups, evaluate network structures. general igraph bit centered complex networks mathematical models statnet affiliated packages focused social network analysis though considerable overlap.Although igraph statnet suite packages many features, directly compatible use different network formats store data R. Adding potential confusion, function call names often two packages. example degree centrality calculated using degree() function . simply use degree() call R use function whichever package initialized recently. wrong package data format, get error. order avoid errors clear ambiguity use package name followed :: function call (.e., igraph::function_name sna::function_name) R knows package intend use. can R function want specify package (package::function_name).general Online Companion use igraph package wherever possible find data format especially functions converting network data types useful intuitive kinds analyses. use statnet affiliated packages specific cases igraph lacks specific functionality important features. Luckily package called intergraph lets us convert network objects one format another see examples ahead.Finally, recommend installing ggraph useful intuitive package allows diverse network visualizations customization. four packages account bulk examples book.","code":""},{"path":"DataWorkspaceSetup.html","id":"ShouldIInstall","chapter":"Section 1 Data and Workspace Setup","heading":"1.3.1 Should I Just Install Everything?","text":"matter plan working documents, install packages following chunk minimum running code . packages get everything Sections 1 4 much Sections 5 6.plenty disk space time don’t wont worry installing packages piecemeal, can install everything time using code . Note large number packages dependencies many used one two places Online Companion. packages used Network Visualization Section. generally recommend install packages need work document .choose install everything, however, can simply run chunk code . Note code reinstall packages already installed current version R. Note familiar Git R Environments, much faster just use renv::restore() function build environment repository. See Reproducibility section introduction information.\naddition R packages listed , one procedure\nused Online Companion requires installation\nPython 3.7 particular packages associated . order \nimplement sections code, need also run \nfollowing lines code. Note large install takes\n1.4 GB hard drive space \nspace REALLY want explore edge bundling (see Edge Bundling Visualizations). \nable reproduce everything document except two chunks \ncode without feel free sit one .\ninstall Python required libraries, run following chunk code:","code":"\npackages <- c(\"igraph\", \"statnet\", \"intergraph\", \"ggraph\", \n              \"reshape2\", \"ggmap\", \"vegan\", \"sf\", \"tidyverse\")\n\ninstall.packages(setdiff(packages, rownames(installed.packages())))  \npackages <- c( \"ape\", \"devtools\", \"igraph\", \"statnet\", \"intergraph\",\n  \"tnet\", \"ggplot2\", \"rjson\", \"d3r\",\"cccd\", \"networkD3\",\"visNetwork\",\n  \"GISTools\", \"rgeos\",\"maptools\", \"sf\", \"igraphdata\", \"ggrepel\",\n  \"ggsn\", \"tidyverse\",\"superheat\",\"ggplotify\",\"ggforce\", \"colorspace\",\n  \"ggmap\", \"dplyr\", \"ggpubr\", \"ggraph\", \"reshape2\", \"multinet\",\n  \"RColorBrewer\", \"Rcpp\", \"deldir\", \"vegan\", \"geosphere\", \"networkDynamic\",\n  \"scatterplot3d\", \"patchwork\", \"concaveman\")\n\ninstall.packages(setdiff(packages, rownames(installed.packages())))  \n\ndevtools::install_github(\"liamgilbey/ggwaffle\")\n\nif(!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"RBGL\")\ninstall.packages(\"edgebundle\", \"reticulate\")\nlibrary(edgebundle)\nlibrary(reticulate)\ninstall_bundle_py(method = \"auto\", conda = \"auto\")"},{"path":"DataWorkspaceSetup.html","id":"PackagesUsed","chapter":"Section 1 Data and Workspace Setup","heading":"1.3.2 R Packages Used","text":"version book built R version 4.2.0 (2022-04-22 ucrt) following packages:","code":""},{"path":"DataWorkspaceSetup.html","id":"WorkspaceSetup","chapter":"Section 1 Data and Workspace Setup","heading":"1.4 Suggested Workspace Setup","text":"order follow along examples Online Companion easiest set R working directory similar format used creating . Specifically, suggest create new working directory create R studio project tied specific directory.order , open R-Studio go “File > New Project” click “New Directory > New Project” dialog give appropriate name location disk. Next, navigate location disk create two sub-folders: one called “data” one called “scripts” (directory names case sensitive). Place data files downloaded section Online Companion “data” folder R script files download “scripts” folder.\nNote chose “Just Give Everything” download \n.zip file already contains sub-folder called “data”\nsure ’re double nesting folders (want\n“working_directory/data” “working_directory/data/data”).\nclose R see dialog asks want save workspace image. provide name, can reopen .RData file later time pick exactly previous session left .new R environment file structures, suggest review Getting Started R section information.","code":""},{"path":"NetworkData.html","id":"NetworkData","chapter":"Section 2 Network Data Formats","heading":"Section 2 Network Data Formats","text":"network simply set entities formally defined relationships among . , however, many different ways networks can encoded displayed. section provides examples many common network formats data types discussed Chapter 3 Brughmans Peeples 2022. examples use Cibola technological similarity network data set (described Chapter 2.8.3 ) relatively small easy display variety formats.Throughout document, refer unique bounded entities connected formal network nodes connections edges note many terms used literature documentation R packages used . Nodes often referred vertices actors edges often referred ties links. Note use network refer formal system interdependent pairwise relationships (edges) among set entities (nodes) term graph often used equivalently mathematics fields.","code":""},{"path":"NetworkData.html","id":"network-data-formats","chapter":"Section 2 Network Data Formats","heading":"2.1 Network Data Formats","text":"section follows Chapter 3.2 Brughmans Peeples (2022) provide examples network attribute data variety different data formats well code converting among formats R.network data formats discuss section include:Edge list - network data format consisting list connected node pairs. E=((n1,n2),(n1,n3),(n1,n4),…,(ni,nj)). can also represented matrix two columns source target nodes respectively one edge per row.Adjacency list - network data format consisting set rows, first node row connected subsequent nodes row.Adjacency matrix - network data format consisting matrix size n x n, set rows equal number nodes, set columns equal number nodes. pair nodes connected edge (.e., adjacent), corresponding cell entry.Incidence matrix - network data format consisting matrix size n x e, set rows equal number nodes, set columns equal number edges. entry made cell corresponding node edge connected. column incidence matrix two entries.Let’s first get started initializing packages use section.\nprimary packages used Section (igraph,\nstatnet, intergraph) already described\nlast section. also use \nvegan package includes many functions focused \ncommunity ecology. document, rely package \ncalculate several distance/similarity metrics useful \ngenerating similarity networks.\nFinally, provide brief example end section using\nmultinet package focused conducting multilayer network analyses.\n","code":"\n# initialize packages\nlibrary(igraph)\nlibrary(statnet)\n#>            Installed ReposVer Built  \n#> ergm.count \"4.0.2\"   \"4.1.1\"  \"4.2.0\"\n#> network    \"1.17.1\"  \"1.17.2\" \"4.2.0\"\nlibrary(intergraph)\nlibrary(vegan)\nlibrary(multinet)"},{"path":"NetworkData.html","id":"NetworkDataFunctions","chapter":"Section 2 Network Data Formats","heading":"2.1.1 Defining Network Objects in R","text":"general examples network data formats remainder Section converted R network objects two basic steps.First, read external data file contains network data, usually generated sort spreadsheet program, create R data frame matrix object.Next, call function expects given data format (edge list, adjacency matrix, incidence matrix, etc.) converts R network object.see , mostly rely igraph functions take following basic format:igraph::graph_from_**DataType****DataType** replaced appropriate format edgelist, adjacency_matrix, . examples plot network just confirm everything works, certainly optional.","code":""},{"path":"NetworkData.html","id":"Edgelist","chapter":"Section 2 Network Data Formats","heading":"2.1.2 Edge List","text":"edge list quick easy way capture network data. simply lists edges network one one node id: E=((n1,n2),(n1,n3),(n1,n4),…,(ni,nj)). purposes data management usually easiest create edge list data frame matrix row represents pair nodes connections going node one column node second column (additional columns can used edge weight edge attributes).example, import Cibola data set format data frame convert igraph network object analysis. can download edgelist file follow along . Since edges network undirected simple binary network, use directed = FALSE argument igraph::graph_from_edgelist function call. function simply takes edge list tabular format converts network object R recognizes can used analysis visualization.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Examine the first several rows\nhead(Cibola_edgelist)\n#>           FROM                   TO\n#> 1 Apache Creek         Casa Malpais\n#> 2 Apache Creek         Coyote Creek\n#> 3 Apache Creek         Hooper Ranch\n#> 4 Apache Creek      Horse Camp Mill\n#> 5 Apache Creek        Hubble Corner\n#> 6 Apache Creek Mineral Creek Pueblo\n\n# Create graph object. The dataframe is converted to a matrix as that\n#is required by this specific function. Since this is an undirected\n# network directed = FALSE.\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n# Display igraph network object and then plot a simple node-link diagram\nCibola_net\n#> IGRAPH 608e759 UN-- 30 167 -- \n#> + attr: name (v/c)\n#> + edges from 608e759 (vertex names):\n#>  [1] Apache Creek--Casa Malpais        \n#>  [2] Apache Creek--Coyote Creek        \n#>  [3] Apache Creek--Hooper Ranch        \n#>  [4] Apache Creek--Horse Camp Mill     \n#>  [5] Apache Creek--Hubble Corner       \n#>  [6] Apache Creek--Mineral Creek Pueblo\n#>  [7] Apache Creek--Rudd Creek Ruin     \n#>  [8] Apache Creek--Techado Springs     \n#> + ... omitted several edges\nset.seed(3523) # set random seed to ensure graph layout stays the same each time.\nplot(Cibola_net)"},{"path":"NetworkData.html","id":"adjacency-list","chapter":"Section 2 Network Data Formats","heading":"2.1.3 Adjacency List","text":"adjacency list consists set rows, first node row connected subsequent nodes row. therefore concise edge list (relationship row), unlike edge list result rows equal length (row edge list typically two values, representing pair nodes). Adjacency lists relatively rare practice can sometimes useful formats directly gathering network data small networks supported many network analysis software packages.following chunk code, convert network object created adjacency list using igraph::as_adj_edge_list() function examine couple rows.output particular node can called either referencing name using using $ followed site name [[k]] double brackets k row number node question. printed output essentially list edges incident node question identified name sending receiving node.","code":"\n# Convert edge list to adjacency list using igraph function\nadj_list <- igraph::as_adj_edge_list(Cibola_net)\n\n# examine adjacency list for the site Apache Creek\nadj_list$`Apache Creek`\n#> + 11/167 edges from 608e759 (vertex names):\n#>  [1] Apache Creek--Casa Malpais        \n#>  [2] Apache Creek--Coyote Creek        \n#>  [3] Apache Creek--Hooper Ranch        \n#>  [4] Apache Creek--Horse Camp Mill     \n#>  [5] Apache Creek--Hubble Corner       \n#>  [6] Apache Creek--Mineral Creek Pueblo\n#>  [7] Apache Creek--Rudd Creek Ruin     \n#>  [8] Apache Creek--Techado Springs     \n#>  [9] Apache Creek--Tri-R Pueblo        \n#> [10] Apache Creek--UG481               \n#> + ... omitted several edges\n\n# It is also possible to call specific nodes by number. In this case,\n# site 2 is Casa Malpais\nadj_list[[2]] \n#> + 11/167 edges from 608e759 (vertex names):\n#>  [1] Apache Creek--Casa Malpais   \n#>  [2] Casa Malpais--Coyote Creek   \n#>  [3] Casa Malpais--Hooper Ranch   \n#>  [4] Casa Malpais--Horse Camp Mill\n#>  [5] Casa Malpais--Hubble Corner  \n#>  [6] Casa Malpais--Rudd Creek Ruin\n#>  [7] Casa Malpais--Techado Springs\n#>  [8] Casa Malpais--Tri-R Pueblo   \n#>  [9] Casa Malpais--UG481          \n#> [10] Casa Malpais--Garcia Ranch   \n#> + ... omitted several edges"},{"path":"NetworkData.html","id":"adjacency-matrix","chapter":"Section 2 Network Data Formats","heading":"2.1.4 Adjacency Matrix","text":"adjacency matrix perhaps common versatile network data format data analysis network science (sociology sometimes referred sociomatrix). symmetric matrix size n x n, set rows columns denoting nodes network. node names identifiers typically used label rows columns. pair nodes connected edge (.e. adjacent), corresponding cell entry. diagonal matrix represents “self loops” can variously defined connected unconnected depending application.can obtain adjacency matrix object R converting network object created reading file directly rows columns denoting site 0 1 denoting presence absence relation. take data frame object adj_mat square matrix 1s 0s convert network object using igraph::graph_from_adjacency_matrix() function. can download csv file follow along .Note compare network graph one produced based edge list additional unconnected node (WS Ranch) shown previous network. one advantages adjacency matrix provides way easily including unconnected nodes without manually add include self-loops.","code":"\n# Convert to adjacency matrix then display first few rows/columns\nadj_mat <- igraph::as_adjacency_matrix(Cibola_net)\nadj_mat[1:5, 1:5]\n#> 5 x 5 sparse Matrix of class \"dgCMatrix\"\n#>                 Apache Creek Casa Malpais Coyote Creek\n#> Apache Creek               .            1            1\n#> Casa Malpais               1            .            1\n#> Coyote Creek               1            1            .\n#> Hooper Ranch               1            1            1\n#> Horse Camp Mill            1            1            1\n#>                 Hooper Ranch Horse Camp Mill\n#> Apache Creek               1               1\n#> Casa Malpais               1               1\n#> Coyote Creek               1               1\n#> Hooper Ranch               .               1\n#> Horse Camp Mill            1               .\n\n# Read in adjacency matrix and convert to network object for plotting\nadj_mat2 <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = T,\n           row.names = 1)\n\nadj_mat2[1:4,1:4]\n#>              Apache.Creek Atsinna Baca.Pueblo Casa.Malpais\n#> Apache Creek            0       0           0            1\n#> Atsinna                 0       0           0            0\n#> Baca Pueblo             0       0           0            0\n#> Casa Malpais            1       0           0            0\n\nCibola_net2 <-\n  igraph::graph_from_adjacency_matrix(as.matrix(adj_mat2),\n                                      mode = \"undirected\")\nset.seed(4352)\nplot(Cibola_net2)"},{"path":"NetworkData.html","id":"incidence-matrix","chapter":"Section 2 Network Data Formats","heading":"2.1.5 Incidence Matrix","text":"incidence matrix frequently used define connections among different sets nodes two-mode bipartite network rows columns represent two different classes nodes presence/absence value edge indicated corresponding cell.way example can read data used generate one-mode networks ceramic technological similarity examining far. corresponding data frame, row represents site column represents specific cluster technological attributes cooking pottery (see Peeples 2018, pg. 100-104 details) number cell representing count technological cluster site.reading rectangular data frame, can create network object using igraph::graph_from_incidence_matrix() function. plot simple two-mode network color representing node class. discuss plotting options greater detail visualization section document. can download csv file follow along .","code":"\n# Read in two-way table of sites and ceramic technological clusters\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\nhead(Cibola_clust)\n#>              Clust1 Clust2 Clust3 Clust4 Clust5 Clust6\n#> Apache Creek      7      3      6     16      6      1\n#> Atsinna           0     12     26      5      0      1\n#> Baca Pueblo       0      9      3     12      1      2\n#> Casa Malpais      2     15      7     28     17     16\n#> Cienega           2     28     34      2      0     10\n#> Coyote Creek     10     13      8     30     20      5\n#>              Clust7 Clust8 Clust9 Clust10\n#> Apache Creek      1      2      0       0\n#> Atsinna           6      0      7       0\n#> Baca Pueblo       5      0     16       1\n#> Casa Malpais      2      5      1       0\n#> Cienega          11      0      5       1\n#> Coyote Creek      1      8      0       5\n\n# Convert into a network object using the incidence matrix format. Note that\n# multiple=TRUE as we want this defined as a bipartite network.\nCibola_inc <-\n  igraph::graph_from_incidence_matrix(Cibola_clust, directed = FALSE, multiple =\n                                        TRUE)\nhead(Cibola_inc)\n#> 6 x 41 sparse Matrix of class \"dgCMatrix\"\n#>                                                           \n#> Apache Creek . . . . . . . . . . . . . . . . . . . . . . .\n#> Atsinna      . . . . . . . . . . . . . . . . . . . . . . .\n#> Baca Pueblo  . . . . . . . . . . . . . . . . . . . . . . .\n#> Casa Malpais . . . . . . . . . . . . . . . . . . . . . . .\n#> Cienega      . . . . . . . . . . . . . . . . . . . . . . .\n#> Coyote Creek . . . . . . . . . . . . . . . . . . . . . . .\n#>                                                         \n#> Apache Creek . . . . . . . .  7  3  6 16  6  1  1 2  . .\n#> Atsinna      . . . . . . . .  . 12 26  5  .  1  6 .  7 .\n#> Baca Pueblo  . . . . . . . .  .  9  3 12  1  2  5 . 16 1\n#> Casa Malpais . . . . . . . .  2 15  7 28 17 16  2 5  1 .\n#> Cienega      . . . . . . . .  2 28 34  2  . 10 11 .  5 1\n#> Coyote Creek . . . . . . . . 10 13  8 30 20  5  1 8  . 5\n\nset.seed(4543)\n# Plot as two-mode network\nplot(Cibola_inc, vertex.color = as.numeric(V(Cibola_inc)$type) + 1)"},{"path":"NetworkData.html","id":"node-and-edge-information","chapter":"Section 2 Network Data Formats","heading":"2.1.6 Node and Edge Information","text":"Frequently want use information nodes edges (node location, site type, edge weight, etc.) analyses need track data separate attribute object data column. One common way simply create data frame contains required attribute information call specific data data frame needed. following example shows, also possible directly assign attributes nodes edges igraph network object use subsequent analyses using V() nodes (V vertices) E() edges calls within igraph.following example use file includes basic attribute data site (node) sites network ’ve working . file includes x y coordinates sites, information presence/absence shape Great Kiva public architectural features sites, Region assigned. First read data.order assign attribute particular node edge can use V E (vertex edge) calls igraph. example, following example, assign region variable node network created using V function assign vertex attribute. simply type name network object parenthesis V use $ atomic variable symbol assign name attribute associated network object.can used plotting analyses calling variable factor (see resource Getting Started R learn factor data.","code":"\n# Read in attribute data and look at the first few rows.\nCibola_attr <- read.csv(file = \"data/Cibola_attr.csv\", header = TRUE)\nhead(Cibola_attr)\n#>           Site      x       y             Great.Kiva\n#> 1 Apache Creek 724125 3747310 Rectangular Great Kiva\n#> 2      Atsinna 726741 3895499                   none\n#> 3  Baca Pueblo 651431 3797143                   none\n#> 4 Casa Malpais 659021 3786211 Rectangular Great Kiva\n#> 5      Cienega 738699 3887985                   none\n#> 6 Coyote Creek 671154 3780509 Rectangular Great Kiva\n#>                  Region\n#> 1    Mogollon Highlands\n#> 2       El Morro Valley\n#> 3 Upper Little Colorado\n#> 4 Upper Little Colorado\n#> 5       El Morro Valley\n#> 6 Upper Little Colorado\n# Assign a variable called \"region\" to the Cibola_net2 based on the\n# column in the Cibola_attr table called \"Region\"\nV(Cibola_net2)$region <- Cibola_attr$Region\n\n# If we now call that attribute we get a vector listing each assigned value\nV(Cibola_net2)$region\n#>  [1] \"Mogollon Highlands\"    \"El Morro Valley\"      \n#>  [3] \"Upper Little Colorado\" \"Upper Little Colorado\"\n#>  [5] \"El Morro Valley\"       \"Upper Little Colorado\"\n#>  [7] \"Mogollon Highlands\"    \"Carrizo Wash\"         \n#>  [9] \"Pescado Basin\"         \"West Zuni\"            \n#> [11] \"Upper Little Colorado\" \"Mariana Mesa\"         \n#> [13] \"Mariana Mesa\"          \"West Zuni\"            \n#> [15] \"El Morro Valley\"       \"Vernon Area\"          \n#> [17] \"El Morro Valley\"       \"West Zuni\"            \n#> [19] \"Pescado Basin\"         \"Carrizo Wash\"         \n#> [21] \"El Morro Valley\"       \"Upper Little Colorado\"\n#> [23] \"El Morro Valley\"       \"West Zuni\"            \n#> [25] \"Mariana Mesa\"          \"El Morro Valley\"      \n#> [27] \"Mariana Mesa\"          \"Mariana Mesa\"         \n#> [29] \"Mariana Mesa\"          \"Mogollon Highlands\"   \n#> [31] \"Pescado Basin\"\n\n# Note that \"region\" is now listed as an attribute when we view \n# the network object\nCibola_net2\n#> IGRAPH 60c0af1 UN-- 31 167 -- \n#> + attr: name (v/c), region (v/c)\n#> + edges from 60c0af1 (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n\nset.seed(43534)\nplot(Cibola_net2, vertex.color = as.factor(V(Cibola_net2)$region))"},{"path":"NetworkData.html","id":"TypesOfNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2 Types of Networks","text":"section roughly follows Brughmans Peeples (2022) Chapter 3.3 describe provide examples R format many common types networks. examples use igraph R package also show use statnet network packages applicable.section, cover:Simple Networks - set nodes set edges additional information .Directed Networks - network consisting set nodes edges connecting orientation direction specified. words connected B, B necessarily connected .Signed, Categorized, Weighted Networks - category refers networks edges (relationships) additional nominal, ordinal, metric information encoded . signed network network edges carry positive negative sign indicating opposed property relations network. categorized network network edges classified according nominal category necessarily represent opposition. weighted network one edges carry non-binary value indicates strength given relationship.Two-Mode Networks - network two separate categories nodes defined edges defined categories.Similarity Networks - Networks edges defined weighted based quantitative metric similarity distance based node attributes artifact assemblages.Ego Networks - network including focal node, set nodes ego connected edge edges nodes set.Multilayer Networks - network single set nodes connected two sets edges represent different kind relationship among nodes.","code":""},{"path":"NetworkData.html","id":"SimpleNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2.1 Simple Networks","text":"call network simple network (simple graph) set nodes set edges connecting , additional information edges specific rules need follow. Simple networks , words, unweighted undirected one-mode networks. way example use Cibola region adjacency matrix file convert simple network using igraph network. Notice examples specify undirected network (mode = \"undirected\" directed = FALSE).Notice two formats differ way internally store network data R way print output screen show total 31 nodes (vertices) 167 edges (igraph object first row specifies node edge numbers – marks).","code":"\n# Read in raw adjacency matrix file\nadj_mat2 <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = T,\n           row.names = 1)\n\n# Convert to a network object using igraph\nsimple_net_i <-\n  igraph::graph_from_adjacency_matrix(as.matrix(adj_mat2),\n                                      mode = \"undirected\")\nsimple_net_i\n#> IGRAPH 61b5cf4 UN-- 31 167 -- \n#> + attr: name (v/c)\n#> + edges from 61b5cf4 (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n\n# Covert to a network object using statnet/network\nsimple_net_s <-\n  network::network(as.matrix(adj_mat2), directed = FALSE)\nsimple_net_s\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes"},{"path":"NetworkData.html","id":"DirectedNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2.2 Directed Networks","text":"Sometimes relationships directional, meaning orientation. example, flow river directed downstream. cases can incorporate information network data distinguishing source target edge.way example modify Cibola network edge list remove number edges random simulate directed network data. convert data various network matrix formats illustrate directed networks stored used R. first use sample function define sub-sample network nodes create network object random sub-sample. randomly removing edges edge list left directed network edges reciprocated.Notice look igraph network plot arrows indicating direction connection edge list. making directed edge list, sending node default left column receiving node right column. adjacency matrix upper lower triangles longer identical. , generating adjacency matrix, can simply mark edges sent nodes denoted rows edges received nodes columns. Finally, plot, since R recognizes directed igraph object plot network, automatically shows arrows indicating direction edge.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Create a random sub-sample of 125 edges out of the total 167 using\n# the \"sample\" function\nset.seed(45325)\nEL2 <- Cibola_edgelist[sample(seq(1, nrow(Cibola_edgelist)), 125,\n                              replace = FALSE), ]\n\n# Create graph object from the edge list using the directed=TRUE argument\n# to ensure this is treated as a directed network object.\ndirected_net <-\n  igraph::graph_from_edgelist(as.matrix(EL2), directed = TRUE)\ndirected_net\n#> IGRAPH 61be14e DN-- 30 125 -- \n#> + attr: name (v/c)\n#> + edges from 61be14e (vertex names):\n#>  [1] Coyote Creek   ->Techado Springs      \n#>  [2] Hubble Corner  ->Tri-R Pueblo         \n#>  [3] Hubble Corner  ->Techado Springs      \n#>  [4] Heshotauthla   ->Pueblo de los Muertos\n#>  [5] Rudd Creek Ruin->Techado Springs      \n#>  [6] Heshotauthla   ->Hinkson              \n#>  [7] Los Gigantes   ->Yellowhouse          \n#>  [8] Los Gigantes   ->Pueblo de los Muertos\n#> + ... omitted several edges\n\n# View as adjacency matrix of direted network object\n(as_adjacency_matrix(directed_net))[1:5, 1:5]\n#> 5 x 5 sparse Matrix of class \"dgCMatrix\"\n#>                 Coyote Creek Techado Springs Hubble Corner\n#> Coyote Creek               .               1             1\n#> Techado Springs            .               .             .\n#> Hubble Corner              .               1             .\n#> Tri-R Pueblo               .               .             .\n#> Heshotauthla               .               .             .\n#>                 Tri-R Pueblo Heshotauthla\n#> Coyote Creek               .            .\n#> Techado Springs            1            .\n#> Hubble Corner              1            .\n#> Tri-R Pueblo               .            .\n#> Heshotauthla               .            .\n\n# Plot network\nset.seed(4353)\nplot(directed_net)"},{"path":"NetworkData.html","id":"WeightedNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2.3 Signed, Categorized, and Weighted Networks","text":"many situations want add values specific edges signs (sometimes called valences), nominal categories, weights defining strength nature relationships. variety ways can record assign weights values edges R. simplest way directly include information one formats described edge list adjacency matrix. example, can add third column edge list denotes weight, category, sign edge can fill cells adjacency matrix specific values rather simply 1s 0s.example, randomly generate edge weights Cibola network edge list adjacency matrix illustrate R handles formats. use sample function create random vector values 1 4 every edge network add edgelist new variable called $Weight. convert data frame network object.Notice final plot line thickness used indicate edges various weights. explore options visualizations network visualizations section document.","code":"\n# Read in edge list file as data frame\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n# Add additional column of weights as random integers between 1 and 4\n# for each edge\nCibola_edgelist$Weight <-\n  sample(seq(1, 4), nrow(Cibola_edgelist), replace = TRUE)\n\n# Create weighted network object calling only the first two columns\nweighted_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist[, 1:2]),\n                              directed = FALSE)\n# add edge attribute to indicate weight\nE(weighted_net)$weight <- Cibola_edgelist$Weight\n\n# Explore the first few rows and columns of network object\nhead(get.data.frame(weighted_net))\n#>           from                   to weight\n#> 1 Apache Creek         Casa Malpais      4\n#> 2 Apache Creek         Coyote Creek      1\n#> 3 Apache Creek         Hooper Ranch      1\n#> 4 Apache Creek      Horse Camp Mill      3\n#> 5 Apache Creek        Hubble Corner      4\n#> 6 Apache Creek Mineral Creek Pueblo      4\n\n# View network as adjacency matrix. Notice the attr=\"weight\" command that\n# indicates which edge attribute to use for values in the matrix\nhead(as_adjacency_matrix(weighted_net, attr = \"weight\"))[1:5, 1:5]\n#> 5 x 5 sparse Matrix of class \"dgCMatrix\"\n#>                 Apache Creek Casa Malpais Coyote Creek\n#> Apache Creek               .            4            1\n#> Casa Malpais               4            .            1\n#> Coyote Creek               1            1            .\n#> Hooper Ranch               1            1            1\n#> Horse Camp Mill            3            2            4\n#>                 Hooper Ranch Horse Camp Mill\n#> Apache Creek               1               3\n#> Casa Malpais               1               2\n#> Coyote Creek               1               4\n#> Hooper Ranch               .               4\n#> Horse Camp Mill            4               .\n\n# Plot the network\nset.seed(574)\nplot(weighted_net, edge.width = E(weighted_net)$weight)"},{"path":"NetworkData.html","id":"TwoMode","chapter":"Section 2 Network Data Formats","heading":"2.2.4 Two-mode Networks and Affiliation Networks","text":"Two-mode networks networks two separate categories nodes defined structural variable (edges) categories. sociology, two-mode networks often used studying affiliation individuals organizations, presence professionals boards companies attendance scholars conferences (referred affiliation networks).Two-mode network data typically recorded two-way table rows columns representing two different classes nodes individual cells representing presence/absence weight edges classes nodes. way example return table ceramic technological clusters sites Cibola region data. simplest way create unweighted two-mode network data create network object directly two-way table saw . example create edge site technological cluster present irrespective relative frequency using igraph::graph_from_incidence_matrix function.case since clusters present sites, creates pretty busy network may particularly useful. alternative define threshold (either terms raw count proportion) define edge node one class another. provide example build function modify data. function can set proportion threshold like used define edge two classes nodes. proportion cluster site greater equal threshold edge present. example threshold set 0.25 meaning define edges nodes share common type makes least quarter assemblage sites.Notice now far fewer ties familiar sites question might notice clear regional patterning.also possible create one-mode projections two-mode data using simple matrix algebra. need multiply matrix transpose matrix. results adjacency matrix whichever set nodes represented rows first matrix matrix multiplication. example using mod_clust incidence matrix threshold created . resulting incidence matrix individual cells represent number different edges common nodes question can treated like edge weight. diagonal matrix total number clusters present site assemblage. R operator %*% indicates matrix mulitplication function t() transpose given matrix.","code":"\n# Read in two-way table of sites and ceramic technological clusters\nCibola_clust <- read.csv(file = \"data/Cibola_clust.csv\",\n                         header = TRUE,\n                         row.names = 1)\n# Create network from incidence matrix based on presence/absence of\n# a cluster at a site\nCibola_inc <- igraph::graph_from_incidence_matrix(Cibola_clust,\n                                                  directed = FALSE,\n                                                  multiple = TRUE)\nCibola_inc\n#> IGRAPH 6207fed UN-B 41 2214 -- \n#> + attr: type (v/l), name (v/c)\n#> + edges from 6207fed (vertex names):\n#>  [1] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [3] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [5] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [7] Apache Creek--Clust1 Apache Creek--Clust2\n#>  [9] Apache Creek--Clust2 Apache Creek--Clust2\n#> [11] Apache Creek--Clust3 Apache Creek--Clust3\n#> [13] Apache Creek--Clust3 Apache Creek--Clust3\n#> [15] Apache Creek--Clust3 Apache Creek--Clust3\n#> + ... omitted several edges\nset.seed(4537643)\n# Plot as two-mode network\nplot(Cibola_inc, vertex.color = as.numeric(V(Cibola_inc)$type) + 1)\n# Define function for creating incidence matrix with threshold\ntwo_mode <- function (x, thresh = 0.25) {\n  # Create matrix of proportions from x input into function\n  temp <- prop.table(as.matrix(x), 1)\n  # Define anything with greater than or equal to threshold as\n  # present (1)\n  temp[temp >= thresh] <- 1\n  # Define all other cells as absent (0)\n  temp[temp < 1] <- 0\n  # Return the new binarized table as output of the function\n  return(temp)\n}\n\n# Run the function and create network object\n# thresh is set to 0.25 but could be any values from 0-1\nmod_clust <- two_mode(Cibola_clust, thresh = 0.25)\n# Examine the first few rows\nhead(mod_clust)\n#>              Clust1 Clust2 Clust3 Clust4 Clust5 Clust6\n#> Apache Creek      0      0      0      1      0      0\n#> Atsinna           0      0      1      0      0      0\n#> Baca Pueblo       0      0      0      0      0      0\n#> Casa Malpais      0      0      0      1      0      0\n#> Cienega           0      1      1      0      0      0\n#> Coyote Creek      0      0      0      1      0      0\n#>              Clust7 Clust8 Clust9 Clust10\n#> Apache Creek      0      0      0       0\n#> Atsinna           0      0      0       0\n#> Baca Pueblo       0      0      1       0\n#> Casa Malpais      0      0      0       0\n#> Cienega           0      0      0       0\n#> Coyote Creek      0      0      0       0\n# Create a graph matrix from the new incidence matrix\ntwo_mode_net <- igraph::graph_from_incidence_matrix(\n                          mod_clust,\n                          directed = FALSE,\n                          multiple = TRUE)\n\n# Plot results\nset.seed(4537)\nplot(two_mode_net, \n     vertex.color = as.numeric(V(Cibola_inc)$type) + 1)\n# In R the command \"%*%\" indicates matrix multiplication and \"t()\"\n# gives the transpose of the matrix within the parentheses.\n# Lets first create a one-mode projection focused on sites\nsite_mode <- mod_clust %*% t(mod_clust)\nsite_net <- igraph::graph_from_adjacency_matrix(site_mode,\n                                                mode = \"undirected\",\n                                                diag = FALSE)\nplot(site_net)\n\n# Now lets create a one-mode projection focused on ceramic\n# technological clusters.\n# Notice that the only change is we switch which side of the\n# matrix multiplication we transpose.\nclust_mode <- t(mod_clust) %*% mod_clust\nhead(clust_mode)\n#>        Clust1 Clust2 Clust3 Clust4 Clust5 Clust6 Clust7\n#> Clust1      1      0      0      0      0      0      0\n#> Clust2      0     16      9      1      0      2      0\n#> Clust3      0      9     10      0      0      1      0\n#> Clust4      0      1      0     11      1      0      0\n#> Clust5      0      0      0      1      1      0      0\n#> Clust6      0      2      1      0      0      2      0\n#>        Clust8 Clust9 Clust10\n#> Clust1      0      0       0\n#> Clust2      0      0       0\n#> Clust3      0      0       0\n#> Clust4      0      0       0\n#> Clust5      0      0       0\n#> Clust6      0      0       0\n\nclust_net <- igraph::graph_from_adjacency_matrix(clust_mode,\n                                                 mode = \"undirected\",\n                                                 diag = FALSE)\nplot(clust_net)"},{"path":"NetworkData.html","id":"SimilarityNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2.5 Similarity Networks","text":"Similarity networks simply refer one-mode networks nodes defined entities interest edges defined /weighted based metric similarity (distance) defined based features, attributes, assemblage associated node. approach frequently used archaeology explore material cultural networks nodes contexts interests (e.g., sites, excavation units, houses, etc.) edges defined weighted based similarities relative frequencies artifacts particular classes artifacts recovered contexts.many different ways define track similarity network data use R. example, show several methods using affiliation data used previous example. Specifically, define weight edges based similarities frequencies ceramic technological clusters sites Cibola region sample.examples use statnet package network package object format within rather igraph statnet additional functions useful working similarity data. following examples, first demonstrate several different similarity/distance metrics discuss approaches binarization similarity networks options working weighted data.","code":""},{"path":"NetworkData.html","id":"brainerd-robinson-similarity","chapter":"Section 2 Network Data Formats","heading":"Brainerd-Robinson Similarity","text":"first metric explore rescaled version Brainerd-Robinson (BR) similarity metric. BR measure commonly used archaeology including number recent (recent) network studies. measure represents total similarity proportional representation categories defined :\\[S = {\\frac{2-\\sum_{k} \\left|x_{k} - y_{k}\\right|} {2}}\\], categories \\(k\\), \\(x\\) proportion \\(k\\) first assemblage \\(y\\) proportion \\(k\\) second. subtract sum 2 2 maximum proportional difference possible two samples. divide result 2. provides scale similarity 0-1 1 perfect similarity 0 indicates similarity. chunk defines code calculating modified BR similarity measure. Note use distance metric called “Manhattan Distance” built vegan package R. metric identical Brainerd-Robinson metric. rescale results range 0 1 calculation.point simply define weighted network object weights equal similarity scores, define threshold defining edges present absent. discuss options detail presenting similarity/distance metrics.","code":"\n# Read in raw data\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\n\n# First we need to convert the ceramic technological clusters into proportions\nclust_p <- prop.table(as.matrix(Cibola_clust), margin = 1)\n\n# The following line uses the vegdist function in the vegan package\n# to calculate the Brainard-Robinson similarity score. Since vegdist\n# by default defines an unscaled distance we must subtract the results\n# from 2 and then divide by 2 to get a similarity scaled from 0 to 1.\nCibola_BR <- (2 - as.matrix(vegan::vegdist(clust_p,\n                                           method = 'manhattan'))) / 2\n\n# Lets look at the first few rows.\nCibola_BR[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.3433584   0.4455782\n#> Atsinna         0.3433584 1.0000000   0.5750090\n#> Baca Pueblo     0.4455782 0.5750090   1.0000000\n#> Casa Malpais    0.7050691 0.3740804   0.5608953\n#>              Casa Malpais\n#> Apache Creek    0.7050691\n#> Atsinna         0.3740804\n#> Baca Pueblo     0.5608953\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"morisitas-overlap-index","chapter":"Section 2 Network Data Formats","heading":"Morisita’s Overlap Index","text":"Another measure used defining similarities among assemblages archaeological similarity networks Morisita’s overlap index. measure measure overlap individual assemblages within larger population takes size samples account. Specifically, approach assumes sample size increases diversity likely increase. measure produces results similar Brainerd-Robinson metric practice cases measure may preferred dramatic differences assemblage sizes among observations.Morisita’s index calculated :\\[C_D=\\frac{2 \\Sigma^Sx_iy_i}{(D_x + D_y)XY}\\]:\n\\(x_i\\) number rows category \\(\\) represented total \\(X\\) population.\n\\(y_i\\) number rows category \\(\\) presented total \\(Y\\) population.\n\\(D_x\\) \\(D_y\\) Simpson’s diversity index values \\(x\\) \\(y\\) respectively.\n\\(S\\) total number columns.metric ranges 0 (categories overlap ) 1 categories occur proportions samples. metric works absolute counts can run vegdist function directly “Cibola_clust” object. want similarity rather distance (default function R) subtract results 1.","code":"\n# Calculate matrix of Morisita similarities based on the\n# Cibola_clust two-way table.\nCibola_Mor <- 1 - as.matrix(vegan::vegdist(Cibola_clust,\n                                           method = 'morisita'))\nCibola_Mor[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.4885799   0.6014729\n#> Atsinna         0.4885799 1.0000000   0.5885682\n#> Baca Pueblo     0.6014729 0.5885682   1.0000000\n#> Casa Malpais    0.9060751 0.4459998   0.6529069\n#>              Casa Malpais\n#> Apache Creek    0.9060751\n#> Atsinna         0.4459998\n#> Baca Pueblo     0.6529069\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"chi2-distance","chapter":"Section 2 Network Data Formats","heading":"\\(\\chi^{2}\\) Distance","text":"next measure use \\(\\chi^{2}\\) distance metric basis correspondence analysis related methods commonly used frequency seriation archaeology (note probably really called \\(\\chi\\) distance since typical form use squared, name persists way literature ’s use ). measure defined :\\[\\chi_{jk} = \\sqrt{\\sum \\frac 1{c_{j}}\n({x_{j}-y_{j})^{2}}}\\]\\(c_j\\) denotes \\(j_{th}\\) element average row profile (proportional abundance \\(j\\) across rows) \\(x\\) \\(y\\) represent row profiles two sites comparison. metric therefore takes raw abundance (rather simply proportional representation) account defining distance sites. definition metric rare categories play greater role defining distances among sites common categories (correspondence analysis). measure minimum value 0 theoretical upper limit.code calculating \\(\\chi^{2}\\) distances defined chunk new object called “Cibola_X” created using measure. sometimes preferable rescale measure bounded 0 1. create second object called “Cibola_X01” represents rescaled distances simply dividing matrix maximum observed value (many ways fine demonstration purposes). , subtract results 1 convert distance similarity.","code":"\n# Define function for calculating chi-squared distance\nchi_dist <- function(x) {\n  # calculates the profile for every row\n  rowprof <- x / apply(x, 1, sum)\n  # calculates the average profile\n  avgprof <- apply(x, 2, sum) / sum(x)\n  # creates a distance object of chi-squared distances\n  chid <- dist(as.matrix(rowprof) %*% diag(1 / sqrt(avgprof)))\n  # return the results\n  return(as.matrix(chid))\n}\n\n# Run the script and then create the rescaled 0-1 version\nCibola_X <- chi_dist(Cibola_clust)\nCibola_X01 <- 1 - (Cibola_X / max(Cibola_X))\n\nCibola_X01[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.2904662   0.1010795\n#> Atsinna         0.2904662 1.0000000   0.3393173\n#> Baca Pueblo     0.1010795 0.3393173   1.0000000\n#> Casa Malpais    0.6166508 0.2999925   0.1469591\n#>              Casa Malpais\n#> Apache Creek    0.6166508\n#> Atsinna         0.2999925\n#> Baca Pueblo     0.1469591\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"creating-network-objects-from-similarity-matrices","chapter":"Section 2 Network Data Formats","heading":"Creating Network Objects from Similarity Matrices","text":"Now defined three measures similarity, next step convert network objects R packages able work . can either creating binary networks (ties either present absent) weighted networks (many cases simply raw similarity/distance matrices calculated ). provide examples approaches, starting simple binary networks. many ways define networks matrices like generated examples seen exhaustive set procedures.","code":""},{"path":"NetworkData.html","id":"creating-binary-network-objects","chapter":"Section 2 Network Data Formats","heading":"Creating binary network objects","text":"First, produce network object based BR similarity matrix created . example, define ties present pairs sites share 65% commonality (BR > 0.65) terms proportions ceramics recovered pairs sites.code , event2dichot function (statnet package) takes matrix divides 1s 0s based cut choose. ’re using absolute cut meaning ’re assigning specific value use cut (0.65). send output function network function just .next chunk code use \\(\\chi^2\\) distances create binary networks. time, use absolute value define ties present, instead define similarities greater 80 percent similarities present. plot just .","code":"\n# Define our binary network object from BR similarity\nBRnet <-\n  network(event2dichot(Cibola_BR, \n                       method = \"absolute\", \n                       thresh = 0.65),\n                       directed = FALSE)\n# Now let's add names for our nodes based on the row names\n# of our original matrix\nBRnet %v% \"vertex.names\" <- row.names(Cibola_clust)\n# look at the results.\nBRnet\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes\n\n# plot network using default layout\nset.seed(7564)\nplot(BRnet)\n# Note we use 1 minus chacoX01 here so to convert a distance\n# to a similarity\nXnet <-\n  network(event2dichot(Cibola_X01, \n                       method = \"quantile\", \n                       thresh = 0.80),\n                       directed = FALSE)\n# Once again add vertext names as row names of data frame\nXnet %v% \"vertex.names\" <- row.names(Cibola_clust)\n# look at the results\nXnet\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 80 \n#>     missing edges= 0 \n#>     non-missing edges= 80 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes\n\n# plot network using default layout\nset.seed(346)\nplot(Xnet)"},{"path":"NetworkData.html","id":"creating-weighted-network-objects","chapter":"Section 2 Network Data Formats","heading":"Creating Weighted Network Objects","text":"also possible use R create weighted networks individual edges valued. found works reasonably well networks co-presence something similar (counts mentions texts monuments example) perform well applied large similarity distance matrices (every possible link value, network gets unwieldy fast). latter case, found often better just work directly underlying similarity/distance matrix., however, chose create weighted network object similarity matrix requires slight modification procedure . chunk code , simply add arguments ignore.eval = F names.eval = \"weight\" let network function know like weights retained like attribute called ‘weight’. apply matrix Morisita similarities defined plot result.resulting network nearly complete bit unwieldy plotting calculating network statistics weighted network can often still useful see exploratory analysis section.","code":"\n# create weighted network object from co-occurrence matrix by\n# adding the ignore.eval=F argument\nMor_wt <- network(\n  Cibola_Mor,\n  directed = FALSE,\n  ignore.eval = FALSE,\n  names.eval = \"weight\"\n)\n\nMor_wt %v% \"vertex.names\" <- row.names(Cibola_Mor)\nMor_wt\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 465 \n#>     missing edges= 0 \n#>     non-missing edges= 465 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#>  Edge attribute names: \n#>     weight\n\n# plot weighted network using default layout\nset.seed(4634)\nplot(Mor_wt)"},{"path":"NetworkData.html","id":"EgoNetworks","chapter":"Section 2 Network Data Formats","heading":"2.2.6 Ego Networks","text":"aim understand relational environment within entity embedded, relevant research questions data collection challenges dictate focus, archaeological network research can make use -called ego-networks: type network includes focal node (-called ego), set nodes ego connected edge (-called alters) edges set nodes.Extracting ego-network existing igraph network object R easy. extract plot ego-network Apache Creek, first site network files created . First read data create network object apply igraph::make_ego_graph function network object created.ego-networks, nodes connected target nodes (Apache Creek first example Platt Ranch second) shown edges among included nodes shown.also possible determine size ego-networks entire one-mode network using ego_size function. output function vector can assigned network node attribute.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Create graph object. The dataframe is converted to a matrix as\n# that is required by this specific function. Since this is an\n# undirected network, directed = FALSE.\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n# Extract ego-networks\nego_nets <- make_ego_graph(Cibola_net)\n\n# Examine the first ego-network\nego_nets[[1]]\n#> IGRAPH 6376850 UN-- 12 59 -- \n#> + attr: name (v/c)\n#> + edges from 6376850 (vertex names):\n#>  [1] Apache Creek--Casa Malpais   \n#>  [2] Apache Creek--Coyote Creek   \n#>  [3] Casa Malpais--Coyote Creek   \n#>  [4] Apache Creek--Hooper Ranch   \n#>  [5] Casa Malpais--Hooper Ranch   \n#>  [6] Coyote Creek--Hooper Ranch   \n#>  [7] Apache Creek--Horse Camp Mill\n#>  [8] Casa Malpais--Horse Camp Mill\n#> + ... omitted several edges\n\n# Plot Apache Creek ego-network\nset.seed(754)\nplot(ego_nets[[1]])\n\n# Plot Platt Ranch ego-network for comparison\nset.seed(45367)\nplot(ego_nets[[30]])\nego_size(Cibola_net)\n#>  [1] 12 12 12 12 13 14 13 13 10 14 15  7  9 14 13 14 15 11\n#> [19] 14 14 15  2 14 19 15 12 12 11  7  6"},{"path":"NetworkData.html","id":"ConvertingNetworkFormats","chapter":"Section 2 Network Data Formats","heading":"2.2.7 Converting Among Network Object Formats","text":"\nexamples document using \nigraph package similarity networks chose \nuse statnet due convenience functions working\ndirectly similarity data. worry easy convert one\nformat another preserve attributes using package\ncalled intergraph. way example can covert\nweighted network object created previous step convert\nigraph object view attributes using \nasIgraph function. wanted go direction\ncovert igraph object network object\n(format statnet package require) \ninstead use asNetwrok.\nsimple example:","code":"\nMor_wt_i <- asIgraph(Mor_wt)\nMor_wt_i\n#> IGRAPH 63b051f U-W- 31 465 -- \n#> + attr: na (v/l), vertex.names (v/c), na (e/l),\n#> | weight (e/n)\n#> + edges from 63b051f:\n#>  [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--10\n#> [10] 1--11 1--12 1--13 1--14 1--15 1--16 1--17 1--18 1--19\n#> [19] 1--20 1--21 1--22 1--23 1--24 1--25 1--26 1--27 1--28\n#> [28] 1--29 1--30 1--31 2-- 3 2-- 4 2-- 5 2-- 6 2-- 7 2-- 8\n#> [37] 2-- 9 2--10 2--11 2--12 2--13 2--14 2--15 2--16 2--17\n#> [46] 2--18 2--19 2--20 2--21 2--22 2--23 2--24 2--25 2--26\n#> [55] 2--27 2--28 2--29 2--30 2--31 3-- 4 3-- 5 3-- 6 3-- 7\n#> + ... omitted several edges\n\n# view first 10 edge weights to show that they are retained\nE(Mor_wt_i)$weight[1:10]\n#>  [1] 0.4885799 0.6014729 0.9060751 0.4049019 1.0000000\n#>  [6] 0.7087214 0.7724938 0.4521581 0.7996468 1.0000000"},{"path":"NetworkData.html","id":"Multinet","chapter":"Section 2 Network Data Formats","heading":"2.2.8 Multilayer Network","text":"simplest terms, multilayer networks networks single set nodes connected two sets edges represent different kind relationship among nodes. relatively new area network science archaeological network research expect likely change coming years. now new R packages help manage analyze multilayer network data.multinet package (Rossi Vega 2021) designed facilitate analysis multilayer networks. order explore possibilities use example data analyses included package. Specifically, look famous network data Florentine families 14th century connections defined terms business marriage.multinet network objects compatible igraph individual layers can analyzed just like igraph network objects. multinet approach likely greater utility conducting comparisons among layers conducting analyses take several layers account simultaneously. detailed exploration approach beyond scope document (provide simple example ) suggest interested readers read package information tutorials associated package . example calculate degree across multiple layers using degree_ml function run Louvain cluster detection algorithm across graph layers using glouvain_ml. Multilayer networks considerable potential archaeological data hope see research area future.archaeological example multilevel network analysis GitHub project Andy Upton.","code":"\n# create object with Florentine multilayer network data\nflorentine <- ml_florentine()\n\n# Examine the data\nflorentine\n#> ml-net[15, 2, 26, 35 (35,0)]\nsummary(florentine)\n#>           n  m dir nc slc      dens        cc      apl dia\n#> _flat_   15 35   0  1  15 0.3333333 0.3409091 2.085714   4\n#> business 11 15   0  1  11 0.2727273 0.4166667 2.381818   5\n#> marriage 15 20   0  1  15 0.1904762 0.1914894 2.485714   5\n\n# plot the data\nplot(florentine)\n# If we want to calculate degree centrality across multiple layers of a\n# multilayer network, the multinet package can help us do that directly\n# and quite simply.\nmultinet::degree_ml(florentine)\n#>  [1]  6  3 11  7  4  4  3  3  2  6  3  6  5  6  1\n\n# Similarly, we could apply cluster detection algorithms to all layers\n# of a multilayer network simultaneously.\nmultinet::glouvain_ml(florentine)\n#>           actor    layer cid\n#> 1      Bischeri business   0\n#> 2      Bischeri marriage   0\n#> 3  Lamberteschi business   0\n#> 4  Lamberteschi marriage   0\n#> 5      Guadagni business   0\n#> 6      Guadagni marriage   0\n#> 7       Albizzi marriage   1\n#> 8        Medici business   1\n#> 9        Medici marriage   1\n#> 10   Tornabuoni business   1\n#> 11   Tornabuoni marriage   1\n#> 12      Ridolfi marriage   1\n#> 13     Salviati business   1\n#> 14     Salviati marriage   1\n#> 15        Pazzi business   1\n#> 16        Pazzi marriage   1\n#> 17       Ginori business   1\n#> 18       Ginori marriage   1\n#> 19   Acciaiuoli marriage   1\n#> 20    Barbadori business   2\n#> 21    Barbadori marriage   2\n#> 22      Peruzzi business   2\n#> 23      Peruzzi marriage   2\n#> 24      Strozzi marriage   2\n#> 25   Castellani business   2\n#> 26   Castellani marriage   2"},{"path":"Exploratory.html","id":"Exploratory","chapter":"Section 3 Exploratory Network Analysis","heading":"Section 3 Exploratory Network Analysis","text":"Exploratory network analysis simply exploratory data analysis applied network data. covers range statistical visual techniques designed explore structure networks well relative positions nodes edges. methods can used look particular structures patterning interest, central nodes, summarize describe structure network paint general picture analysis. section serves companion Chapter 4 Brughmans Peeples book (2022) provides basic examples exploratory network analysis methods outlined book well others.","code":""},{"path":"Exploratory.html","id":"example-network-objects","chapter":"Section 3 Exploratory Network Analysis","heading":"3.1 Example Network Objects","text":"order facilitate exploratory analysis examples section, want first create set igraph statnet network objects serve purposes across analyses . Specifically, generate define:simple_net - simple undirected binary network isolatessimple_net_noiso - simple undirected binary network without isolatesdirected_net - directed binary networkweighted_net - undirected weighted networksim_net_i - similarity network edges weighted similarity igraph formatsim_net - similarity network edges weighted similarity network formatsim_mat - data frame object containing weighted similarity matrixEach used appropriate illustrate particular methods.following chunk code initialize packages use section define network objects use (using object names ). examples use Cibola technological similarity data used Network Data Formats section previously.","code":"\n# initialize packages\nlibrary(igraph)\nlibrary(statnet)\n#>            Installed ReposVer Built  \n#> ergm.count \"4.0.2\"   \"4.1.1\"  \"4.2.0\"\n#> network    \"1.17.1\"  \"1.17.2\" \"4.2.0\"\nlibrary(intergraph)\nlibrary(vegan)\n\n# read in csv data\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\nCibola_adj_mat <- read.csv(file = \"data/Cibola_adj.csv\",\n                           header = T,\n                           row.names = 1)\n\n# Simple network with isolates\nsimple_net <-\n  igraph::graph_from_adjacency_matrix(as.matrix(Cibola_adj_mat),\n                                      mode = \"undirected\")\n\n# Simple network with no isolates\nsimple_net_noiso <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n#Create a directed network by subsampling edgelist\nset.seed(45325)\nEL2 <- Cibola_edgelist[sample(seq(1, nrow(Cibola_edgelist)), 125,\n                              replace = FALSE),]\n\ndirected_net <- igraph::graph_from_edgelist(as.matrix(EL2),\n                                            directed = TRUE)\n\n# Create a weighted undirected network by adding column of random\n# weights to edgelist\nCibola_edgelist$Weight <- sample(seq(1, 4), nrow(Cibola_edgelist),\n                                 replace = TRUE)\nweighted_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist[, 1:2]),\n                              directed = FALSE)\n\nE(weighted_net)$weight <- Cibola_edgelist$Weight\n\n# Create a similarity network using the Brainerd-Robinson metric\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\nclust_p <- prop.table(as.matrix(Cibola_clust), margin = 1)\nsim_mat <-\n  (2 - as.matrix(vegan::vegdist(clust_p, method = 'manhattan'))) / 2\nsim_net <- network(\n  sim_mat,\n  directed = FALSE,\n  ignore.eval = FALSE,\n  names.eval = 'weight'\n)\nsim_net_i <- asIgraph(sim_net)"},{"path":"Exploratory.html","id":"CalcMetric","chapter":"Section 3 Exploratory Network Analysis","heading":"3.2 Calculating Network Metrics in R","text":"Although calculations behind scenes centrality metrics, clustering algorithms, network measures may somewhat complicated, calculating measures R using network objects usually quite straight forward typically involves single function couple arguments within . , however, things need kept mind applying methods network data. document, provide examples common functions may use well caveats potential problems.Certain network metrics require networks specific properties may produce unexpected results wrong kind network used. example, closeness centrality well defined binary networks isolates. use igraph::closeness command calculate closeness centrality network isolates, get results also get warning telling “closeness centrality well-defined disconnected graphs.” functions provide data meet criteria required function instead get error results returned. cases, however, function may simply return results provide warning important careful selecting methods avoid providing data violates assumptions method provided. Remember, questions function works requires can type ?function_name console function question get help document provide information. can also include package names help call ensure get correct function (.e., ?igraph::degree)","code":""},{"path":"Exploratory.html","id":"Centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3 Centrality","text":"One common kinds exploratory network analysis involves calculating basic network centrality centralization statistics. wide array methods available R igraph statnet packages. section highlight examples well caveats keep mind.","code":""},{"path":"Exploratory.html","id":"Degree","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.1 Degree Centrality","text":"Degree centrality can calculated using igraph::degree function simple networks without isolates well simple directed networks. method , however, appropriate weighted networks similarity networks (expects binary values). apply igraph::degree function weighted network object simply get binary network degree centrality values. alternative calculating weighted degree weighted similarity networks simply calculate row sums underlying similarity matrix (minus 1 account self loops) adjacency matrix. degree function returned output vector values representing degree centrality can assigned R object, plotted, otherwise used. provide examples illustrate. Note directed graphs can also specify mode indegree outdegree sum .Graph level degree centralization equally simple call using centr_degree function. function returns object multiple parts including vector degree centrality scores, graph level centralization metric, theoretical maximum number edges (n * [n-1]). metric can normalized maximum centralization value 1 using normalize = TRUE argument demonstrate . See comments code chunk follow along type network object used call. cases display first 5 values prevent long lists output (using [1:5] command).interested calculating graph level density can using edge_density function. Note just like degree function , works binary networks submit weighted network object simply get binary edge density value.","code":"\n# simple network with isolates\nigraph::degree(simple_net)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>           11            8            1           11 \n#>      Cienega \n#>           13\n# simple network no isolates\nigraph::degree(simple_net_noiso)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>              11              11              11 \n#>    Hooper Ranch Horse Camp Mill \n#>              11              12\n\n# directed network\nigraph::degree(directed_net, mode = \"in\")[1:5] # indegree\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>               1               6               5 \n#>    Tri-R Pueblo    Heshotauthla \n#>               6               2\nigraph::degree(directed_net, mode = \"out\")[1:5] # outdegree\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>               6               2               5 \n#>    Tri-R Pueblo    Heshotauthla \n#>               2              11\n\n# weighted network - rowSums of adjacency matrix\n(rowSums(as.matrix(\n  as_adjacency_matrix(weighted_net,\n                      attr = \"weight\")\n)) - 1)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>              25              29              21 \n#>    Hooper Ranch Horse Camp Mill \n#>              18              27\n\n# similarity network. Note we use the similarity matrix here and\n# not the network object\n(rowSums(sim_mat) - 1)[1:5]\n#> Apache Creek      Atsinna  Baca Pueblo Casa Malpais \n#>     16.00848     15.87024     14.77997     17.30358 \n#>      Cienega \n#>     17.09394\n\n# If you want to normalize your degree centrality metric by the\n# number of nodes present you can do that by adding the normalize=TRUE\n# command to the function calls above. For weighted and similarity\n# networks you can simply divide by the number of nodes minus 1.\nigraph::degree(simple_net, normalize = T)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>   0.36666667   0.26666667   0.03333333   0.36666667 \n#>      Cienega \n#>   0.43333333\n\n# it is also possible to directly plot the degree distribution for\n# a given network using the degree.distribution function.\n# Here we embed that call directly in a call for a histogram plot\n# using the \"hist\" function\nhist(igraph::degree.distribution(simple_net))\n\n# graph level centralization\nigraph::centr_degree(simple_net)\n#> $res\n#>  [1] 11  8  1 11 13 11  6 13 14 18 11 12 13 11 12 12 13 14\n#> [19] 11  5 10 12 13 13  9 14 13 14  6  0 10\n#> \n#> $centralization\n#> [1] 0.2408602\n#> \n#> $theoretical_max\n#> [1] 930\n\n# To calculate centralization score for a similarity matrix, use the\n# sna::centralization function\nsna::centralization(sim_mat, normalize = TRUE, sna::degree)\n#> [1] 0.1082207\nedge_density(simple_net_noiso)\n#> [1] 0.383908\n\nedge_density(weighted_net)\n#> [1] 0.383908"},{"path":"Exploratory.html","id":"Betweenness","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.2 Betweenness Centrality","text":"betweenness functions work much like degree function calls . Betweenness centrality igraph can calculated simple networks without isolates, directed networks, weighted networks. case weighted networks similarity networks, shortest paths sets nodes calculated path greatest weight taken juncture. can normalize results using normalize = TRUE just like degree. igraph::betweenness function automatically detect graph directed weighted use appropriate method can also specify particular edge attribute use weight perhaps one weighting scheme.","code":"\n# calculate betweenness for simple network\nigraph::betweenness(simple_net)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>     1.125000     0.000000     0.000000     8.825306 \n#>      Cienega \n#>     8.032865\n# calculate betweenness for weighted network\nigraph::betweenness(weighted_net, directed = FALSE)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>        20.94423        18.96259        17.67829 \n#>    Hooper Ranch Horse Camp Mill \n#>        15.66853         2.78036\n# calculate betweenness for weighted network specifying weight attribute\nigraph::betweenness(weighted_net, weights = E(weighted_net)$weight)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>        20.94423        18.96259        17.67829 \n#>    Hooper Ranch Horse Camp Mill \n#>        15.66853         2.78036\n\n# calculate graph level centralization\ncentr_betw(simple_net)\n#> $res\n#>  [1]   1.1250000   0.0000000   0.0000000   8.8253059\n#>  [5]   8.0328650   3.2862641   0.2500000  58.7048084\n#>  [9]  15.6031093 142.3305364   1.1250000   9.0503059\n#> [13]  11.9501530   6.2604913   1.2590038  12.8566507\n#> [17]   8.0328650  41.0052110   0.5722222   2.7950980\n#> [21]   0.2844828   9.0503059  15.3558646   8.0328650\n#> [25]   0.0000000  16.0653473  11.9501530  17.0225282\n#> [29]   0.0000000   0.0000000   2.1735632\n#> \n#> $centralization\n#> [1] 0.3064557\n#> \n#> $theoretical_max\n#> [1] 13050"},{"path":"Exploratory.html","id":"Eigenvector","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.3 Eigenvector Centrality","text":"igraph::eigen_centrality function can calculated simple networks without isolates, directed networks, weighted networks. default scores scaled maximum score 1. can turn scaling using scale = FALSE argument. function automatically detects whether network object directed weighted can also call edge attributes specify particular weight attribute. default function outputs many features analysis number steps toward convergence number iterations just want centrality results can use atomic vector call $vector.","code":"\neigen_centrality(simple_net, \n   scale = TRUE)$vector[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>   0.46230981   0.54637071   0.07114132   0.53026366 \n#>      Cienega \n#>   0.85007181\n\neigen_centrality(\n  weighted_net,\n  weights = E(weighted_net)$weight,\n  directed = FALSE,\n  scale = FALSE\n)$vector[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.08116512      0.10608344      0.07254989 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.05355994      0.10123595"},{"path":"Exploratory.html","id":"PageRank","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.4 Page Rank Centrality","text":"igraph::page_rank function can calculated simple networks without isolates, directed networks, weighted networks. default scores scaled maximum score 1. can turn scaling using scale = FALSE argument. function automatically detects whether network object directed weighted can also call edge attributes specify particular weight attribute. can change algorithm used implement page rank algorithm (see help details) can also change damping factor desired.","code":"\npage_rank(directed_net, \n  directed = TRUE)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.01375364      0.03433734      0.02521968 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.04722743      0.01549665\n\npage_rank(\n  weighted_net,\n  weights = E(weighted_net)$weight,\n  directed = FALSE,\n  algo = \"prpack\"\n)$vector[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.03340837      0.03761940      0.02901255 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.02610001      0.03551477"},{"path":"Exploratory.html","id":"Closeness","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.5 Closeness Centrality","text":"igraph::closeness function calculates closeness centrality can calculated directed undirected simple weighted networks isolates. function can also used networks isolates, may receive additional message suggesting closeness undefined networks fully connected. large networks can use igraph::estimate_closeness function cutoff setting consider paths length cutoff calculate closeness scores. directed networks can also specify whether connections , , directions used.\nNote function igraph::closeness() \nnormally used networks multiple components. Depending \nsettings, however, function call may return error \ncareful.\nLet’s take look examples:","code":"\nigraph::closeness(simple_net)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>   0.01470588   0.01470588   0.01315789   0.01886792 \n#>      Cienega \n#>   0.02000000\n\nigraph::closeness(simple_net_noiso)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.01470588      0.01886792      0.01754386 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.01470588      0.01923077\n\nigraph::closeness(weighted_net, weights = E(weighted_net)$weight)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.01010101      0.01298701      0.01219512 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.01111111      0.01063830\n\nigraph::closeness(directed_net, mode = \"in\")[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      1.00000000      0.04166667      0.04761905 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.04347826      0.09090909"},{"path":"Exploratory.html","id":"HubsAndAuthorities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.6 Hubs and Authorities","text":"directed networks possible calculate hub authority scores identify nodes characterized high indegree high outdegree particular. measure depends direction appropriate directed network objects. run function undirected network hub scores authority scores identical. functions can also applied networks directed weighted. want options printed can use atomic vector $vector call well.","code":"\nigraph::hub_score(directed_net)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.31998744      0.12265832      0.30740409 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.08450797      1.00000000\n\nigraph::authority_score(directed_net)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.05372558      0.32708203      0.28835263 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.35970234      0.25265287"},{"path":"Exploratory.html","id":"Triads","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4 Triads and clustering","text":"Another important topic network science concerns considerations overall structure clustering connections across network whole. variety methods developed characterize overall degree clustering closure networks, many based counting triads various configurations. section, briefly outline approaches toward evaluating triads, transitivity, clustering R.","code":""},{"path":"Exploratory.html","id":"triads","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4.1 Triads","text":"triad simply set three nodes description configuration edges among . undirected graphs, four possibilities describing connections among nodes (empty graph, 1 connection, 2 connections, 3 connections). directed graphs situation considerably complicated ties can considered directions edge one direction isn’t necessarily reciprocated. Thus 16 different configurations can exist (see Brughmans Peeples 2022: Figure 4.4).One common method outlining overall structural properties network conduct “triad census” counts 4 16 possible triads given network. Although triad census can conducted undirected network using igraph::triad_census function, warning returned along 0 results impossible triad configurations aware. results returned vector counts possible node configuration order outlined help document associated function (see ?triad_census ).Often can useful visualize motifs defined entry triad census can done using graph_from_isomorphism_class() function outputs every possible combination nodes given size specify (3 case). can plot configurations single plot using ggraph ggpubr packages. packages described detail visualization section document.","code":"\nigraph::triad_census(directed_net)\n#>  [1] 1404 2007    0  134  146  174    0    0  195    0    0\n#> [12]    0    0    0    0    0\n\nigraph::triad_census(simple_net)\n#> Warning in igraph::triad_census(simple_net): At core/misc/\n#> motifs.c:1165 : Triad census called on an undirected graph.\n#>  [1] 1033    0 2551    0    0    0    0    0    0    0  441\n#> [12]    0    0    0    0  470\nlibrary(ggraph)\nlibrary(ggpubr)\n\ng <- list()\nxy <-\n  as.data.frame(matrix(\n    c(0.1, 0.1, 0.9, 0.1, 0.45, 0.45),\n    nrow = 3,\n    ncol = 2,\n    byrow = T\n  ))\n\n\nfor (i in 0:15) {\n  g_temp <- graph_from_isomorphism_class(size = 3,\n                                         number = i,\n                                         directed = T)\n  g[[i + 1]] <- ggraph(g_temp,\n                       layout = \"manual\",\n                       x = xy[, 1],\n                       y = xy[, 2]) +\n    xlim(0, 1) +\n    ylim(0, 0.5) +\n    geom_node_point(size = 6, col = \"purple\") +\n    geom_edge_fan(\n      arrow = arrow(length = unit(4, 'mm'),\n                    type = \"closed\"),\n      end_cap = circle(6, 'mm'),\n      start_cap = circle(6, 'mm'),\n      edge_colour = \"black\"\n    ) +\n    theme_graph(\n      plot_margin =\n        margin(0, 0, 0, 0),\n      border = T,\n      foreground = \"black\"\n    )\n}\n\n# motifs ordered by order in triad_census function\nggarrange(\n  g[[1]], g[[2]], g[[4]], g[[7]],\n  g[[3]], g[[5]], g[[6]], g[[10]],\n  g[[8]], g[[12]], g[[11]], g[[9]],\n  g[[13]], g[[14]], g[[15]], g[[16]],\n  nrow = 4,\n  ncol = 4\n)"},{"path":"Exploratory.html","id":"Transitivity","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4.2 Transitivity and Clustering","text":"network’s global average transitivity (clustering coefficient) three times number closed triads total number triads network. measure can calculated using igraph::transitivity simple networks without isolates, directed networks, weighted networks. options within function determine specific type transitivity (global transitivity default) treat isolates. See help document (?igraph::transitivity) details. want calculate local transitivity particular node can use type = \"local\" argument. return NA value nodes part triads (isolates nodes single connection).","code":"\nigraph::transitivity(simple_net, type = \"global\")\n#> [1] 0.7617504\n\nigraph::transitivity(simple_net, type = \"local\")\n#>  [1] 0.8727273 1.0000000       NaN 0.8363636 0.8333333\n#>  [6] 0.8727273 0.8666667 0.4358974 0.7252747 0.4183007\n#> [11] 0.8727273 0.8333333 0.7435897 0.8000000 0.8787879\n#> [16] 0.7272727 0.8333333 0.6703297 0.9272727 0.7000000\n#> [21] 0.9555556 0.8333333 0.7692308 0.8333333 1.0000000\n#> [26] 0.7582418 0.7435897 0.7142857 1.0000000       NaN\n#> [31] 0.8222222"},{"path":"Exploratory.html","id":"WalksPathsDistance","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5 Walks, Paths, and Distance","text":"variety network metrics rely distance paths across networks can calculated R. great many functions available highlight just .","code":""},{"path":"Exploratory.html","id":"Distance","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.1 Distance","text":"cases, may simply want information graph distance nodes general perhaps average distance. variety functions can help including igraph::distances igraph::mean_distance. work simple networks, directed networks, weighted networks.","code":"\n# Create matrix of all distances among nodes and view the first\n# few rows and columns\nigraph::distances(simple_net)[1:4, 1:4]\n#>              Apache.Creek Atsinna Baca.Pueblo Casa.Malpais\n#> Apache.Creek            0       4           4            1\n#> Atsinna                 4       0           2            3\n#> Baca.Pueblo             4       2           0            3\n#> Casa.Malpais            1       3           3            0\n\n# Calculate the mean distance for a network\nigraph::mean_distance(simple_net)\n#> [1] 1.949425"},{"path":"Exploratory.html","id":"ShortestPaths","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.2 Shortest Paths","text":"want identify particular shortest paths nodes network can use igraph::shortest_paths function alternatively igraph::all_shortest_paths want shortest paths originating particular node. call function simply need provide network object id origin destination path. simplest solution just call node number. function works directed undirected networks without weights. Although can applied networks isolates, isolates produce NA results.output provides ids nodes crossed path origin destination.","code":"\n# track shortest path from Apache Creek to Pueblo de los Muertos\nigraph::shortest_paths(simple_net, from = 1, to = 21)\n#> $vpath\n#> $vpath[[1]]\n#> + 5/31 vertices, named, from 67ab3b5:\n#> [1] Apache.Creek          Casa.Malpais         \n#> [3] Garcia.Ranch          Heshotauthla         \n#> [5] Pueblo.de.los.Muertos\n#> \n#> \n#> $epath\n#> NULL\n#> \n#> $predecessors\n#> NULL\n#> \n#> $inbound_edges\n#> NULL"},{"path":"Exploratory.html","id":"Diameter","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.3 Diameter","text":"igraph::diameter function calculates diameter network (longest shortest path) can also use farthest_vertices function get ids nodes form ends longest shortest path. metric can calculated directed undirected, weighted unweighted networks, without isolates.","code":"\nigraph::diameter(directed_net, directed = TRUE)\n#> [1] 4\n\nigraph::farthest_vertices(directed_net, directed = TRUE)\n#> $vertices\n#> + 2/30 vertices, named, from 67ac2a9:\n#> [1] Apache Creek          Pueblo de los Muertos\n#> \n#> $distance\n#> [1] 4"},{"path":"Exploratory.html","id":"Components","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6 Components and Bridges","text":"Identifying fully connected subgraphs within large network common analytical procedure quite straight forward R using igraph package. first want know whether given network fully connected can use igraph::is_connected function check.can also count components using count_components function.","code":"\nigraph::is_connected(simple_net)\n#> [1] FALSE\n\nigraph::is_connected(simple_net_noiso)\n#> [1] TRUE\nigraph::count_components(simple_net)\n#> [1] 2"},{"path":"Exploratory.html","id":"identifying-components","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.1 Identifying Components","text":"want decompose network object distinct components can use igraph::decompose function outputs list object entry representing distinct component. object list can called using [[k]] k number item list.example network fully connected exception 1 node (WS Ranch). run decompose function separates WS ranch component isolate edges.","code":"\ncomponents <- igraph::decompose(simple_net, min.vertices = 1)\n\ncomponents\n#> [[1]]\n#> IGRAPH 69f90da UN-- 30 167 -- \n#> + attr: name (v/c)\n#> + edges from 69f90da (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n#> \n#> [[2]]\n#> IGRAPH 69f9105 UN-- 1 0 -- \n#> + attr: name (v/c)\n#> + edges from 69f9105 (vertex names):\n\nV(components[[2]])$name\n#> [1] \"WS.Ranch\""},{"path":"Exploratory.html","id":"Cutpoints","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.2 Cutpoints","text":"cutpoint node, removal creates network higher number components. convenient igraph function identifying cutpoints function sna package within statnet suite. Using intergraph package can easily convert igraph object network object (using asNetwork function) within call use function.sna::cutpoint function returns node id cutpoints detected. can use numbers returned find name node question.example reveals Ojo Bonito cutpoint look figure can see sole connection Baca Pueblo otherwise become isolate distinct component Ojo Bonito removed.","code":"\ncut_p <- cutpoints(asNetwork(simple_net))\ncut_p\n#> [1] 18\n\nV(simple_net)$name[cut_p]\n#> [1] \"Ojo.Bonito\"\n\nset.seed(4536)\nplot(simple_net)"},{"path":"Exploratory.html","id":"Bridges","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.3 Bridges","text":"bridge edge, removal results network higher number components. function igraph::min_cut finds bridges network objects sets nodes graph whole. output function includes vector called $cut provides edges representing bridges. default function outputs cut value can use argument value.= FALSE get full output.example illustrates edge Ojo Bonito Baca Pueblo bridge (perhaps surprising Ojo Bonito cut point).","code":"\nmin_cut(simple_net_noiso, value.only = FALSE)\n#> $value\n#> [1] 1\n#> \n#> $cut\n#> + 1/167 edge from 67ab95e (vertex names):\n#> [1] Ojo Bonito--Baca Pueblo\n#> \n#> $partition1\n#> + 1/30 vertex, named, from 67ab95e:\n#> [1] Baca Pueblo\n#> \n#> $partition2\n#> + 29/30 vertices, named, from 67ab95e:\n#>  [1] Apache Creek          Casa Malpais         \n#>  [3] Coyote Creek          Hooper Ranch         \n#>  [5] Horse Camp Mill       Hubble Corner        \n#>  [7] Mineral Creek Pueblo  Rudd Creek Ruin      \n#>  [9] Techado Springs       Tri-R Pueblo         \n#> [11] UG481                 UG494                \n#> [13] Atsinna               Cienega              \n#> [15] Los Gigantes          Mirabal              \n#> [17] Ojo Bonito            Pueblo de los Muertos\n#> [19] Scribe S              Spier 170            \n#> + ... omitted several vertices"},{"path":"Exploratory.html","id":"CliquesAndCommunities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7 Cliques and Communities","text":"Another common task network analysis involves creating cohesive sub-groups nodes larger network. wide variety methods available defining groups highlight common .","code":""},{"path":"Exploratory.html","id":"Cliques","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.1 Cliques","text":"clique network science concept arguably strictest method defining cohesive subgroup. set three nodes node directly connected nodes. can alternatively defined completely connected subnetwork, subnetwork maximum density. function igraph::max_cliques finds maximal cliques network outputs list object nodes set indicated. sake space output one clique 24 defined function call.Note list node can appear one maximal clique.","code":"\nmax_cliques(simple_net, min = 1)[[24]]\n#> + 9/31 vertices, named, from 67ab3b5:\n#> [1] Los.Gigantes    Cienega         Tinaja         \n#> [4] Spier.170       Scribe.S        Pescado.Cluster\n#> [7] Mirabal         Heshotauthla    Yellowhouse"},{"path":"Exploratory.html","id":"KCores","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.2 K-cores","text":"k-core maximal subnetwork vertex least degree k within subnetwork. R can obtained using igraph::coreness function filtering value appropriate. function creates vector k values can used remove nodes appropriate symbolize plots.plot shown darker read colors represent higher maximal k-core values.","code":"\n# Define coreness of each node\nkcore <- coreness(simple_net)\nkcore[1:6]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>            9            8            1            9 \n#>      Cienega Coyote.Creek \n#>            9            9\n\n# set up colorscale\ncol_set <- heat.colors(max(kcore), rev = TRUE)\nset.seed(2509)\nplot(simple_net, vertex.color = col_set[kcore])"},{"path":"Exploratory.html","id":"ClusterDetection","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3 Cluster Detection Algorithms","text":"R allows use variety common cluster detection algorithms define groups nodes network using variety different assumptions. highlight common .","code":""},{"path":"Exploratory.html","id":"GirvanNewman","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.1 Girvan-Newman Clustering","text":"Girvan-Newman clustering divisive algorithm based betweenness defines partition network maximizes modularity removing nodes high betweenness iteratively (see discussion Brughmans Peeples 2022 Chapter 4.6). R referred igraph::edge.betweenness.community function. function can used directed undirected networks without edge weights. function outputs variety information including individual edge betweenness scores, modularity information, partition membership. See help documents information","code":"\nGN <- igraph::edge.betweenness.community(simple_net)\nset.seed(4353)\nplot(simple_net, vertex.color = GN$membership)"},{"path":"Exploratory.html","id":"Walktrap","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.2 Walktrap Algorithm","text":"walktrap algorithm designed work either binary weighted networks defines communities generating large number short random walks determining sets nodes consistently fall along short random walks. can called using igraph::cluster_walktrap function. “steps” argument determines length short walks set 4 default.","code":"\nWT <- igraph::cluster_walktrap(simple_net, steps = 4)\nset.seed(4353)\nplot(simple_net, vertex.color = WT$membership)"},{"path":"Exploratory.html","id":"Louvain","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.3 Louvain Modularity","text":"Louvain modularity cluster detection algorithm based modularity. algorithm iteratively moves nodes among community definitions way optimizes modularity. measure can calculated simple networks, directed networks, weighted networks implemented R igraph::cluster_louvain function.","code":"\nLV <- igraph::cluster_louvain(simple_net)\nset.seed(4353)\nplot(simple_net, vertex.color = LV$membership)"},{"path":"Exploratory.html","id":"Modularity","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.4 Calculating Modularity for Partitions","text":"like compare modularity scores among partitions graph, can achieved using igraph::modularity function. modularity call simply supply argument indicating partition membership node. Note can also used attribute data regional designations. following chunk code compare modularity clustering methods described well using subregion designations original Cibola region attribute dataNote although modularity can useful comparing among partitions like approach shown poor detecting small communities within network always appropriate.","code":"\n# Modularity for Girvan-Newman\nmodularity(simple_net, membership = membership(GN))\n#> [1] 0.4103589\n\n# Modularity for walktrap\nmodularity(simple_net, membership = membership(WT))\n#> [1] 0.4157195\n\n# Modularity for Louvain clustering\nmodularity(simple_net, membership = membership(LV))\n#> [1] 0.4157195\n\n# Modularity for subregion\nCibola_attr <- read.csv(\"data/Cibola_attr.csv\")\nmodularity(simple_net, membership = as.factor(Cibola_attr$Region))\n#> [1] 0.1325612"},{"path":"Exploratory.html","id":"finding-edges-within-and-between-communities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.5 Finding Edges Within and Between Communities","text":"many cases may interested identifying edges remain within extend network partition. can done using igraph::crossing function. function expects igraph cluster definition object igraph network return list TRUE FALSE values edge true indicates edge extends beyond cluster assigned nodes. Let’s take look first 10 edges simple_net object based Louvain cluster definition.Beyond , plot igraph object add cluster definition call produce network graph clusters outlined nodes extend clusters shown red.","code":"\nigraph::crossing(LV, simple_net)[1:6]\n#>         Apache.Creek|Casa.Malpais \n#>                             FALSE \n#>         Apache.Creek|Coyote.Creek \n#>                             FALSE \n#>         Apache.Creek|Hooper.Ranch \n#>                             FALSE \n#>      Apache.Creek|Horse.Camp.Mill \n#>                             FALSE \n#>        Apache.Creek|Hubble.Corner \n#>                             FALSE \n#> Apache.Creek|Mineral.Creek.Pueblo \n#>                             FALSE\nset.seed(54)\nplot(LV, simple_net)"},{"path":"Exploratory.html","id":"case-study-roman-roads","chapter":"Section 3 Exploratory Network Analysis","heading":"3.8 Case Study: Roman Roads","text":"case study provided end Chapter 4 Brughmans Peeples (2022) take simple network based Roman era roads spatial proximity settlements Iberian Peninsula calculate basic exploratory network statistics. described book, can create different definitions criteria network edges can impacts network node level properties. case, define three different networks follows:road_net - basic network every road connecting two settlements edgeroad_net2 - network retains ties network also connects isolated nodes within 50 Kms one road network settlementsroad_net3 - network retains ties first road network connects isolate nearest neighbor among road network settlementsFirst let’s read data file contains three networks start plotting turn map. using custom network map function save file called map_net.R takes locations decimal degrees locations plots network directly map. go specifics function detail Network Visualization Spatial Networks sections simply call script directly .R file. Make sure libraries initialized replicate map.Now ’ve replicated visuals, want replicate network statistics. Since ’re going calculate several network statistics networks question, can wrap function save bit time. following function expects igraph network object calculates 10 variables show example book returns matrix.Although function somewhat long, simple. defines function single argument net igraph network object. creates output matrix called appropriate number rows columns populates first column name measure. Next network measure evaluated turn assigned appropriate row column 2 matrix. Finally, full matrix returned: return().Now let’s run three networks turn reproduce results book. combine results single table nicely formatted using kable function. ’d prefer can simply view results net_stats() right console.","code":"\n\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(dplyr)\n\n# Read in required data\nload(\"data/road_networks.RData\")\n\nsource(\"scripts/map_net.R\")\n\n# Create Basic network map\nmap_net(\n  nodes = nodes,\n  net = road_net,\n  bounds = c(-9.5, 36, 3, 43.8),\n  gg_maptype = \"watercolor\",\n  zoom_lev = 6,\n  map_title = \"Basic Network\"\n)\n\n# Create Basic network map\nmap_net(\n  nodes = nodes,\n  net = road_net2,\n  bounds = c(-9.5, 36, 3, 43.8),\n  gg_maptype = \"watercolor\",\n  zoom_lev = 6,\n  map_title = \"Basic Network+ 50Km Buffer\"\n)\n\n# Create Basic network map\nmap_net(\n  nodes = nodes,\n  net = road_net3,\n  bounds = c(-9.5, 36, 3, 43.8),\n  gg_maptype = \"watercolor\",\n  zoom_lev = 6,\n  map_title = \"Basic Network + Nearest Neighbor Isolates\"\n)\nlibrary(igraph)\n\nnet_stats <- function(net) {\n  out <- matrix(NA, 10, 2)\n  out[,1] <- c(\"Nodes\", \"Edges\", \"Isolates\", \"Density\", \"Average Degree\",\n               \"Average Shortest Path\", \"Diamater\", \n               \"Clustering Coefficient\", \"Closed Triad Count\",\n               \"Open Triad Count\")\n  # number of nodes\n  out[1, 2] <- vcount(net)\n  # number of edges\n  out[2, 2] <- ecount(net)\n  # number of isolates\n  out[3, 2] <- sum(igraph::degree(net)==0)\n  # network density rounding to the third digit\n  out[4, 2] <- round(edge_density(net), 3)\n  # mean degree rounding to the third digit\n  out[5, 2] <- round(mean(igraph::degree(net)), 3)\n  # mean shortest path length rounding to the third digit\n  out[6, 2] <- round(igraph::mean_distance(net), 3)\n  # network diameter\n  out[7, 2] <- igraph::diameter(net)\n  # average global transitivity rounding to the third digit\n  out[8, 2] <- round(igraph::transitivity(net, type = 'average'), 3)\n  # closed triads in triad_census\n  out[9, 2] <- igraph::triad_census(net)[16]\n  # open triads in triad_census\n  out[10, 2] <- igraph::triad_census(net)[11] \nreturn(out)\n}\n\nns1 <- net_stats(road_net)\n\nns2 <- net_stats(road_net2)\n\nns3 <- net_stats(road_net3)\n\nns_res <- cbind(ns1, ns2[, 2], ns3[, 2])\ncolnames(ns_res) <- c(\"Measure\", \"Basic Network\", \"50 Km Buffer\",\n                      \"Nearest Neighbors\")\n\nknitr::kable(ns_res, format = \"html\")"},{"path":"Uncertainty.html","id":"Uncertainty","chapter":"Section 4 Quantifying Uncertainty","heading":"Section 4 Quantifying Uncertainty","text":"almost archaeological network study, networks create incomplete (.e., know missing nodes edges various reasons: site destruction, lack survey coverage, looting, etc.). might fact networks samples larger typically unobtainable “total network” influence interpretations network structure node position? section, take inspiration recent research areas network research (Borgatti et al. 2006; Costenbader Valente 2003; Smith Moody 2013; Smith et al. 2017; Smith et al. 2022) develop means assessing impact missing poor quality information networks. accompanies Chapter 5 Brughmans Peeples (2022) recommend read Chapter 5 work examples .analyses presented book possible use number different network software packages conduct similar analyses. analyses presented Chapter 5, however, require creation custom scripts procedures possible programming language environment like R. attempt provide information replicate examples book also provide guidance might modify functions code provided purposes.","code":""},{"path":"Uncertainty.html","id":"Scripts","chapter":"Section 4 Quantifying Uncertainty","heading":"4.1 R Scripts and Custom Functions","text":"chapter, created number relatively complex custom functions conduct assessments network uncertainty outlined Chapter 5. provide step step overviews functions work useful bundle functions .R script files call directly file working data.scripts described detail include:sim_missing_nodes.R - Assessments stability centrality metrics networks nodes missing random due biased sampling process.sim_missing_edges.R -Assessments stability centrality metrics networks edges missing random due biased sampling process.sim_missing_inc.R - Assessments stability centrality metrics networks nodes missing random based biased sampling incidence matrix data.sim_target_node.R - Assessments stability rank order position target node networks nodes missing random due biased sampling process.sim_samp_error.R - Assessments stability centrality metrics due sampling error frequency data underlying similarity networks.edge_prob.R - Functions conducting edge probability modeling plotting candidate networks centrality distributions.described greater detail along example. run scripts R, need put working directory use source() function. source function run code within .R file initialize functions contain. example:Note must include correct absolute relative file path script run properly.","code":"\nsource(\"scripts/sim_missing_nodes.R\")"},{"path":"Uncertainty.html","id":"a-general-approach-to-uncertainty","chapter":"Section 4 Quantifying Uncertainty","heading":"4.2 A General Approach to Uncertainty","text":"outlined book, basic approach quantifying dealing uncertainty use sample means understanding robustness vulnerability population sample drawn kinds variability perturbations might expect. procedures outline primarily take following basic form:Define network based available sample, calculate metrics characterize properties interest network.Derive large number modified samples network created step 1 (underlying data) simulate potential data problem sampling issue trying address. example, interested impact nodes missing random, randomly delete proportion nodes sample derived network created step 1.Calculate metrics characterize properties features interest every one random samples created step 2 assess central tendency (mean, median) distributional properties (range, standard deviation, distribution shape, etc.) features output appropriate.Compare distributions metrics properties (graph, node, edge level) random samples “original” network created step 1 assess potential impacts perturbation data treatment. comparison properties network created step 1 distribution properties created step 3 provide information directly relevant assessing impact kind perturbation created step 2 original network sample , extension, complete network drawn.underlying assumption approach outlined robustness vulnerability particular perturbation observed network data, drawn total network unattainable, provides information robustness vulnerability unattainable complete network kinds perturbations. example, interested exploring degree distribution network sampling experiments show massive fluctuations degree sub-samples small numbers nodes removed random, suggest particular properties network robust nodes missing random degree calculations. , place much confidence results obtained original sample indicative total network drawn. hand, say instead find resampling experiments degree distributions sub-samples substantially similar original network sample even moderate large numbers nodes removed. case, might conclude network structure assessments degree distribution robust node missigness within range might expect original sample. important note, however, finding transferred metrics given network likely robust certain kinds perturbations certain network metrics, others.","code":""},{"path":"Uncertainty.html","id":"NodesAtRandom","chapter":"Section 4 Quantifying Uncertainty","heading":"4.3 Nodes Missing at Random","text":"sub-section accompanies discussion nodes edges missing random Brughmans Peeples (2022) Chapter 5.3.1. take one interval Chaco World ceramic similarity network (ca. .D. 1050-1100) simulate impact nodes missing random network centrality statistics. Download ceramic similarity adjacency matrix follow along.first thing need initialize required libraries, import network adjacency matrix, convert igraph network object. several examples Section using simple undirected network though code also work weighted directed networks well.First, following Chapter 5.3.1, assess robustness data nodes missing random betweenness eigenvector centrality. order need define function removes specified proportion nodes random, assesses specified metric interest, compares sub-sample original sample terms rank order correlation (Spearman’s \\(\\rho\\)) among nodes metric question.help understand works, first walk example line line single centrality measure can see process designed. Following , initialize complex script can conduct analysis multiple measures even accommodate biased sampling processes see .Let’s start simple version. commented code chunk can follow along process. define two variables along way:nsim number simulations conduct sampling fractionprops vector sampling proportions test (0 > value < 1).code worked reasonably well bit laborious modify code every time wanted use different data set different network metric consider biased sampling processes. order address issue, created general function called sim_missing_nodes can replicate analysis shown previous section centrality measures (betweenness, degree, eigenvector) , see , can also used assess biased sampling processes. function essentially structured just like saw last chunk additions assess measure plan using, catch errors.function requires following arguments:net - igraph network object can undirected, directed, weighted must one-mode network.nsim - number random simulated networks created sampling fraction. default 1000.props - vector containing sampling fractions consider. Numbers must decimal form greater 0 less 1. default props = c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1). Note small networks inadvisable use small values props.met - argument used define metric interest must one : \"betweenness\", \"degree\", \"eigenvector\". specify argument receive error.missing_probs - argument expects vector many values nodes network. value probability value 0 1 (inclusive) node retained sub-sample network. default argument NA. argument isn’t specified function assumes testing nodes missing random.Let’s take look code. can also download script use data.script long, largely consists series ...else statements select appropriate analyses based user supplied arguments.Let’s give new function try calculate eigenvector centrality chaco_net network object. Note function melt function built data returned format required create plot.","code":"\nlibrary(igraph)\nlibrary(reshape2)\nlibrary(ggraph)\nlibrary(ggpubr)\nlibrary(dplyr)\nlibrary(statnet)\n#>            Installed ReposVer Built  \n#> ergm.count \"4.0.2\"   \"4.1.1\"  \"4.2.0\"\n#> network    \"1.17.1\"  \"1.17.2\" \"4.2.0\"\n\n# Import adjacency matrix and covert to network\nchaco <- read.csv(file = 'data/AD1050net.csv', row.names = 1)\n\nchaco_net <- igraph::graph_from_adjacency_matrix(as.matrix(chaco),\n                                                 mode = \"undirected\")\n# Calculate node level metric of interest (betweenness in this case)\n# in the original network object\nmet_orig <- igraph::betweenness(chaco_net)\n\n# Define variables\nnsim <- 1000 # How many random simulations to create at each sampling level\nprops <- c(0.9, 0.8, 0.7, 0.6, 0.5, # set sub-sample proportions to test\n           0.4, 0.3, 0.2, 0.1)\n\n# Create an output matrix that will receive the results\noutput <- matrix(NA, nsim, length(props))\ncolnames(output) <- as.character(props)\n\n# Using for loops iterate over every value of props defined above nsim times\nfor (j in 1:length(props)) {\n  for (i in 1:nsim) {\n    # define a sub-sample at props[j] by retaining nodes from network\n    sub_samp <- sample(seq(1, vcount(chaco_net)), size =\n                       round(vcount(chaco_net) * props[j], 0))\n    # Create a network sub-set based on the sample defined above\n    sub_net <- igraph::induced_subgraph(chaco_net, sort(sub_samp))\n    # Calculate betweenness (or any measure of interest) in the sub-set\n    temp_stats <- igraph::betweenness(sub_net)\n    # Assess Spearman's rho correlation between met_orig and temp_stats\n    # and record in the output object at row i and column j.\n    output[i, j] <- suppressWarnings(cor(temp_stats,\n                                         met_orig[sort(sub_samp)],\n                                         method = 'spearman'))\n  }\n} # repeat for all values of props, nsim times each\n\n\n# Visuzlize the results as a boxplot using ggplot.\n# Melt wide data format into long data format first.\ndf <- melt(as.data.frame(output))\n\n# Plot visuals\nggplot(data = df) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  # The lines inside this theme() call are simply\n  # there to change the font size of the figure\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )\nsim_missing_nodes <- function(net,\n                              nsim = 1000,\n                              props = c(0.9, 0.8, 0.7, 0.6, 0.5,\n                                        0.4, 0.3, 0.2, 0.1),\n                              met = NA,\n                              missing_probs = NA) {\n  # Initialize required library\n  require(reshape2)\n  \n  props <- as.vector(props)\n  \n  if (FALSE %in% (is.numeric(props) & (props > 0) & (props <= 1))) {\n    stop(\"Variable props must be numeric and be between 0 and 1\",\n         call. = F)\n  }\n  \n  # Select measure of interest based on variable met and calculate\n  if (!(met %in% c(\"degree\", \"betweenness\", \"eigenvector\"))) {\n    stop(\n      \"Argument met must be either degree, betweenness, or eigenvector. \n      Check function call.\",\n      call. = F\n    )\n  }\n  else {\n    if (met == \"degree\") {\n      met_orig <- igraph::degree(net)\n    }\n    else\n    {\n      if (met == \"betweenness\") {\n        met_orig <- igraph::betweenness(net)\n      }\n      else {\n        if (met == \"eigenvector\") {\n          met_orig <- igraph::eigen_centrality(net)$vector\n        }\n      }\n    }\n  }\n  \n  # Create data frame for out put and name columns\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  \n  # Iterate over each value of props and then each value from 1 to nsim\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      # Run code in brackets if missing_probs == NA\n      if (is.na(missing_probs)[1]) {\n        sub_samp <- sample(seq(1, vcount(net)),\n                           size = round(vcount(net) * props[j], 0))\n        sub_net <- igraph::induced_subgraph(net, sort(sub_samp))\n      }\n      # Run code in brackets if missing_probs contains values\n      else {\n        sub_samp <- sample(seq(1, vcount(net), prob = missing_probs),\n                           size = round(vcount(net) * props[j], 0))\n        sub_net <- igraph::induced_subgraph(net, sort(sub_samp))\n      }\n      # Select measure of interest based on met and calculate(same as above)\n      if (met == \"degree\") {\n        temp_stats <- igraph::degree(sub_net)\n      }\n      else\n      {\n        if (met == \"betweenness\") {\n          temp_stats <- igraph::betweenness(sub_net)\n        }\n        else {\n          if (met == \"eigenvector\") {\n            temp_stats <- igraph::eigen_centrality(sub_net)$vector\n          }\n        }\n      }\n      # Record output for row and column by calculating spearman's rho between\n      # met_orig and each temp_stats iteration.\n      output[i, j] <- suppressWarnings(cor(temp_stats,\n                                           met_orig[sort(sub_samp)],\n                                           method = 'spearman'))\n    }\n  }\n  # Return output as data.frame \n  df_output <- suppressWarnings(melt(as.data.frame(output)))\n  return(df_output)\n}\n# Run the function\nset.seed(5609)\nev_test <- sim_missing_nodes(net = chaco_net, met = \"eigenvector\")\n\nggplot(data = ev_test) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )"},{"path":"Uncertainty.html","id":"EdgesAtRandom","chapter":"Section 4 Quantifying Uncertainty","heading":"4.4 Edges Missing at Random","text":"cases, interested potential impact missing edges rather missing nodes. example, created network co-presence (based shared ceramic types, site mentions monuments, similar data) robust network omission certain edges? different centrality metrics influenced edge omission?section, conduct analysis similar described assessing missing nodes. Specifically, sub-sample networks removing fraction edges test stability centrality measures node position across range sampling fractions.function defined previous needs modified slightly help assess edges well. created new function associated script file accomplishes goal. give peak beneath hood, primary lines needed change. replaced first chunk code creates sub sample based vcount vertex count new line uses ecount edge count. switched induced_subgraph instead used delete_edges function.\nNote try evaluate chunk code \ncontains portions larger functions described \nreturn error.\nLet’s call new function assess impact edges missing random degree centrality give try. use default arguments nsim props . Since saved function .R file, can initialize using source function lets run code specified .R file.","code":"\n# Code from sim_missing_nodes\nsub_samp <- sample(seq(1, vcount(net), prob = missing_probs),\n                   size = round(vcount(net) * props[j], 0))\nsub_net <- igraph::induced_subgraph(net, sort(sub_samp))\n\n# Replaced code in sim_missing_edges\nsub_samp <- sample(seq(1, ecount(net), prob = missing_probs),\n                           size = round(ecount(net) * props[j], 0))\nsub_net <- igraph::delete_edges(net, which(!(seq(1, ecount(net)) \n                                             %in% sub_samp)))\n# First initilze the function using the .R script\nsource(\"scripts/sim_missing_edges.R\")\n\n# Run the function\nset.seed(5609)\ndg_edge_test <- sim_missing_edges(net = chaco_net, met = \"degree\")\n\n# Visualize the results\nggplot(data = dg_edge_test) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )"},{"path":"Uncertainty.html","id":"IndNodesAtRandom","chapter":"Section 4 Quantifying Uncertainty","heading":"4.5 Assessing Indivdiual Nodes/Edges","text":"sub-section follows along Chapter 5.3.2 Brughmans Peeples (2022). cases may interested simply robustness particular network metric specific kind perturbation across nodes edges, instead potential variability position characteristics single node (group nodes) due perturbations. order explore individual nodes, can employ similar procedures outlined additional modifications function. example use Cibola technological similarity network. describe book, want assess stability position Garcia Ranch site. Specifically, want know whether high betweenness centrality value Garcia Ranch robust nodes missing random network.define new function conduct analyses . function similar used instead providing Spearman’s \\(/rho\\) values outputs specific rank order node question across simulation.function requires six pieces information user:net - igraph network object. currently set simple networks easily modified.target - name target node wish assess (exactly written network object).prop - proportion nodes wish retain test. single number > 0 < 1.nsim - number simulations. default 1000.met - argument used define metric interest must one : \"betweenness\", \"degree\", \"eigenvector\". specify argument receive error.missing_probs - argument expects vector many values nodes network. value probability value 0 1 (inclusive) node retained sub-sample network. must include probability value target node though node always retained matter value use. default argument NA. argument isn’t specified function assumes testing nodes missing random.Briefly function works first determines node number corresponds target wish assess creates nsim subgraphs retain target. metric interest calculated network rank order position target node every network returned. function can calculated either “missing random” process leaving missing_probs set default NA.Let’s take look example. Use data follow along. can download sim_target_node.R script hereFirst read data:Now lets initialize function script using source() function, run function, create bar plot visualize results. Following example book, assessing robustness rank order position Garcia Ranch terms betweenness centrality nodes missing random. Note Garcia Ranch second highest centrality score original network:describe book, position Garcia Ranch highly central node appears stable nodes missing random. Indeed, far common position node 2 position original network.","code":"\n# Read in edgelist file as dataframe and create network object\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\nsource(\"scripts/sim_target_node.R\")\n\n# Run the function\nset.seed(52793)\nGR <- sim_target_node(\n  net = Cibola_net,\n  target = \"Garcia Ranch\",\n  prop = 0.8,\n  nsim = 1000,\n  met = \"betweenness\"\n)\n\n# Visualize the results\ndf <- as.data.frame(GR)\ncolnames(df) <- \"RankOrder\"\n\nggplot(df, aes(x = RankOrder)) +\n  geom_bar() +\n  theme_bw() +\n  labs(title = \" \", x = \"Rank Order\", y = \"Count\") +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2))\n  )"},{"path":"Uncertainty.html","id":"MissingBiased","chapter":"Section 4 Quantifying Uncertainty","heading":"4.6 Nodes/Edges Missing Due to Biased Sampling","text":"sub-section follows along Brughmans Peeples (2022) Chapter 5.3.3. many contexts interested modeling data missing random instead influenced biased sampling process. example, say study area lots general reconnaissance surveys recorded large sites full coverage surveys captured smaller sites. case, may wish model missingness small sites likely missing large sites.sim_missing_nodes sime_missing_edges functions created can help us test impacts biased sampling processes. order simply use additional argument missing_probs. argument requires vector length number nodes edges, depending function using. vector contain numeric values 0 1 denote probabilities node edge retained sub-sampling effort (must order nodes edges recorded network object).Let’s look hood see change implemented code. need modify one line code include biased sampling processes. chunk code two lines use sample function. function takes vector numbers selects sample (without replacement default) specified size. add argument prob use vector probabilities provided weight sample. ’s .\ncode chunk just purposes demonstration \nrepresents part function don’t try evaluate chunk\n’ll get error.\nNow, let’s try real example using chaco_net data creating random variable stand missing_probs . test impact missing nodes. simply create vector 223 random uniform numbers using runif function simulate probabilties associated 223 nodes. practice, probabilities based site size, visibility, feature choose.","code":"\n# Random sampling process\nsub_samp <- sample(seq(1, vcount(net)), \n                   size = round(vcount(net) * props[j], 0))\n\n# Biased sampling process\nsub_samp <- sample(seq(1, vcount(net)), prob = missing_probs,\n                   size = round(vcount(net) * props[j], 0))\n# Create 233 random numbers between 0 and 1 to stand in for \n# node probabilities\nset.seed(4463)\nmis <- runif(223, 0, 1)\nmis[1:10]\n#>  [1] 0.6903157 0.9895447 0.3810867 0.2849476 0.2689112\n#>  [6] 0.9784197 0.8042309 0.5805580 0.8660900 0.6179489\n\n# Run the function\ndg_test <- sim_missing_nodes(chaco_net, met = \"degree\", missing_probs = mis)\n\n# Visualize the results\nggplot(data = dg_test) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )"},{"path":"Uncertainty.html","id":"SimIncidence","chapter":"Section 4 Quantifying Uncertainty","heading":"4.6.1 Resampling with Incidence Matrices","text":"book, illustrate approach biased sampling using co-authorship network data. case start incidence matrix publications authors want assess potential impact missing publications network authors. Since gathered data digital repositories citations, likely missing publications reasonable assume likely miss older publications newer ones given inclusion newer publications searchable digital indexes. Thus, example want assess missingness newer publications likely retained older ones sample. compare missing random assess results relate one another.First need provide two data files. first bibliographic attribute data includes date, publication type, information publication designated unique identifier. second incidence matrix publications denoted unique identifier (rows) authors (columns). read R create adjacency matrix author author connections using matrix algebra (multiply incidence matrix transpose incidence matrix), convert igraph network object calculate betweenness centrality nodes. plot simple network node link diagram visualize data.Although may first seem like use function used previously assess missing nodes, key differences organization data network won’t permit . Specifically, interested nodes (authors) missing random, want model probabilities associated publications. slightly complicated procedure function needs network object incidence matrix generated sub-networks can defined inside function. created sim_missing_inc function (simulating missing data using incidence matrix) conducts task.function requires five specific pieces information user:net - must include network object igraph format. use simple network code modified directed valued networks.inc - must also include incidence matrix (R matrix object) describes relationships . incidence matrix needs unique row names column names. mode interested assessing columns (words interested authors missing random authors represented columns publications rows).nsim - must specify number simulations perform. default 1000.props - must specify proportion nodes retained set nsim runs. provided vector proportions ranging > 0 1. default, script calculate 0.9 sub-sample way 0.1 sub-sample 0.1 intervals using props=c(0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1).lookup_dat - Finally, need provide data frame matrix contains two columns. first column unique name row incidence matrix (publication key case). second column include numeric value 0 1 indicates probability row retained resampling process. include nothing missing_probs function remove columns random equal probability .example , must first calculate data need provide missing_probs argument . simply take vector publication years bib object read rescale maximum value (recent publication) equals 1 older publications less 1. mean older publications often removed random sub-samples newer ones outlined example book.\nNote script provided focused assessing whichever\ncategory nodes represented columns original incidence\nmatrix. need modify code use incidence\nmatrix rows target simply use t()\ntranspose function place columns target position.\nprobabilities retention missing_probs place, can call source code sim_missing_inc.R script run function. Following example book run function nsim = 1000 3 sampling fractions (0.9, 0.8, 0.7) metric interest betweenness. Let’s first run function “probability date” biased sampling process.Next want run function simulate nodes missing random. need change missing_probs argument NA (exclude argument altogether). Let’s run :Now can combine results single data frame plot paired box plots comparison. order create paired box plots easiest create single data frame contains results runs . combine add new column called “Treatment” specifies row data frame whether part Random Biased sample.","code":"\n\n# Read in publication and author attribute data\nbib <- read.csv('data/biblio_attr.csv')\nbib[1:3,]\n#>        Key      Item.Type\n#> 1 FUV8A7JK journalArticle\n#> 2 C7MRVHWA    bookSection\n#> 3 3EG6T4P6 journalArticle\n#>                                                         Publication.Title\n#> 1                                    Archaeological Review from Cambridge\n#> 2 Network analysis in archaeology. New approaches to regional interaction\n#> 3                                                      American Antiquity\n#>   Publication.Year          Authors\n#> 1             2014       Stoner, Jo\n#> 2             2013    Isaksen, Leif\n#> 3             1991 Peregrine, Peter\n# Read in incidence matrix of publication and author data\nbib_dat <-\n  as.matrix(read.table(\n    'data/biblio_dat2.csv',\n    header = T,\n    row.names = 1,\n    sep = \",\"\n  ))\n\n# Create adjacency matrix from incidence matrix using matrix algebra\nbib_adj <- t(bib_dat) %*% bib_dat\n# Convert to igraph network object removing self loops (diag=FALSE)\nbib_net <- igraph::graph_from_adjacency_matrix(bib_adj,\n                                               mode = \"undirected\",\n                                               diag = FALSE)\n# Calculate Betweenness Centrality\nbw_all <- igraph::betweenness(bib_net)\n\n# Plot network with nodes scaled based on betweenness\nset.seed(346)\nggraph(bib_net, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(shape = 21,\n                  aes(size = bw_all * 5),\n                  fill = 'gray',\n                  alpha = 0.75) +\n  theme_graph() +\n  theme(legend.position = \"none\")\n# Create a dataframe of all unique combinations of publication code\n# and year from attributes data\nlookup <- unique(bib[, c(1, 4)])\n# Assign a probability for a publication to be retained inverse to\n# the year it was published\nlookup_prob <-\n  (lookup$Publication.Year - min(lookup$Publication.Year)) /\n  (max(lookup$Publication.Year) - min(lookup$Publication.Year))\n\n# Create data frame with required output. We have added a sort function\n# here to ensure that the order of probabilities in lookup_dat is the \n# same as the order of rows in the incidence matrix. You will get \n# spurious results if you do not ensure these are the same.\nlookup_dat <- sort(data.frame(Key = lookup$Key, prob = lookup_prob))\nhead(lookup_dat)\n#>          Key      prob\n#> 117 24QNVV37 0.9583333\n#> 86  29GVMCNZ 0.0625000\n#> 81  2QC8N5RN 1.0000000\n#> 112 2QU9ZNUG 0.8125000\n#> 126 2T8HPW5E 0.9583333\n#> 18  37TC37D2 1.0000000\n\nsource(\"scripts/sim_missing_inc.R\")\n\n# Run function\nset.seed(4634)\nbib_bias <- sim_missing_inc(\n  net = bib_net,\n  inc = bib_dat,\n  missing_probs = lookup_dat$prob,\n  props = c(0.9, 0.8, 0.7),\n  met = \"betweenness\",\n)\nhead(bib_bias)\n#>   variable     value\n#> 1      0.9 0.9747220\n#> 2      0.9 0.9608842\n#> 3      0.9 0.9999614\n#> 4      0.9 0.9999803\n#> 5      0.9 0.9760737\n#> 6      0.9 0.9999803\n\n# Run the function\nset.seed(4363)\nbib_rand <- sim_missing_inc(\n  net = bib_net,\n  inc = bib_dat,\n  missing_probs = NA,\n  props = c(0.9, 0.8, 0.7),\n  met = \"betweenness\"\n)\nhead(bib_rand)\n#>   variable     value\n#> 1      0.9 0.9817859\n#> 2      0.9 0.9804552\n#> 3      0.9 0.9818085\n#> 4      0.9 0.8911948\n#> 5      0.9 0.8733779\n#> 6      0.9 1.0000000\n# Add a variable denoting which sample design it came from\nbib_rand$Treatment <- rep(\"Random\", nrow(bib_rand))\nbib_bias$Treatment <- rep(\"Biased\", nrow(bib_bias))\n\n# Bind into a single dataframe, convert sampling faction to factor\n# and change order of levels for plotting\ndf <- rbind(bib_rand, bib_bias)\ndf$variable <- as.factor(df$variable)\ndf$variiable <- factor(df$variable, levels = c(\"0.9\", \"0.8\", \"0.7\"))\n\n# Plot the results\nggplot(data = df) +\n  geom_boxplot(aes(x = variable, y = value, fill = Treatment)) +\n  scale_fill_manual(values = c(\"white\", \"gray\")) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(2))\n  )"},{"path":"Uncertainty.html","id":"EdgeProbability","chapter":"Section 4 Quantifying Uncertainty","heading":"4.7 Edge Probability Modeling","text":"section take inspiration recent work area “Dark Networks” (see Everton 2012) investigation illicit networks. field, number methods recently developed allow researchers directly incorporate assessments reliability specific edges analyses. can done number different ways. Perhaps common approach networks based data gathered intelligence sources (studies terrorist networks) qualitatively assign different levels confidence ties pairs actors using ordinal scale determined based source information (reliable, usually reliable,… unreliable). ordinal scale confidence can converted probability (0 1) probability value used inform creation range “possible” networks given underlying data.aware archaeological examples edges formally qualitatively assigned “confidence levels” exactly way, think potential applications method. example, define network assign low probability tie two archaeological sites share import third site/region higher probability tie two sites share imports others’ region. Importantly, methods can used combine information different sources single assessment probability connection.Since data structured exactly way, use small simulated data set consists edge list weights. Use file follow along. simple edge list probability values assigned edge values 0.2, 0.4, 0.6, 0.8, 1.0.Let’s read data plot :next chunk code define function iterates every edge simulated network just created defines edge either present absent using simple random binomial probability set edge weight described . output function (edge_prob) list object contains nsim igraph network objects candidate networks original.order extract values interest candidate networks, created another function called compile_stat. function iterates nsim networks net_list list object calculates centrality metric interest case returning results simple matrix. possible compare things like average degree distribution degree particular nodes across candidate networks. placed two functions additional script file called edge_prob.R can download use modify .Now run edge_prob function nsim = 1000 display candidate networks.use compile_stat function assess degree centrality one particular node, displaying histogram values mean indicated.","code":"\n# Read in edge_list\nsim_edge <- as.matrix(read.csv(\"data/sim_edge.csv\",\n                     header = T, row.names = 1))\n\n# Create network object and assign edge weights and node names\nsim_net <- igraph::graph_from_edgelist(sim_edge[, 1:2])\nE(sim_net)$weight <- sim_edge[order(sim_edge[, 3]), 3]\nV(sim_net)$name <- seq(1:20)\n\n# Create color ramp palette\nedge_cols <- colorRampPalette(c('gray', 'darkblue'))(5)\n\n# Plot the resulting network\nset.seed(4364672)\nggraph(sim_net, layout = \"fr\") +\n  geom_edge_link0(aes(width = E(sim_net)$weight * 5),\n                  edge_colour = edge_cols[E(sim_net)$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_net) + 3,\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 3.5,\n    repel = F\n  ) +\n  theme_graph()\n# Define function for assessing and retaining edges based on edge\n# weight probabilities\nedge_prob <- function(net, nsim = 1000, probs) {\n  net_list <- list()\n  for (i in 1:nsim) {\n    sub_set <- NULL\n    for (j in 1:ecount(net)) {\n      temp <- rbinom(1, 1, prob = probs[j])\n      if (temp == 1) {\n        sub_set <- c(sub_set, j)\n      }\n    }\n    net_list[[i]] <-\n      igraph::delete_edges(net, which(!(seq(1, ecount(\n        net\n      ))\n      %in% sub_set)))\n  }\n  return(net_list)\n}\n\n# Define function for assessing statistic of interest\ncompile_stat <- function(net_list, met) {\n  out <- matrix(NA, vcount(net_list[[1]]), length(net_list))\n  for (i in 1:length(net_list)) {\n    # Select measure of interest based on met and calculate(same as above)\n    if (met == \"degree\") {\n      out[, i] <- igraph::degree(net_list[[i]])\n    }\n    else\n    {\n      if (met == \"betweenness\") {\n        out[, i] <- igraph::betweenness(net_list[[i]])\n      }\n      else {\n        if (met == \"eigenvector\") {\n          out[, i] <- igraph::eigen_centrality(net_list[[i]])$vector\n        }\n      }\n    }\n  }\n  return(out)\n}\nEL_test <- edge_prob(sim_net, nsim = 1000, probs = sim_edge[,3])\n\nset.seed(9651)\ncomp1 <- ggraph(EL_test[[1]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[1]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[1]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(EL_test[[1]]),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\ncomp2 <- ggraph(EL_test[[2]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[2]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[2]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(EL_test[[2]]),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\ncomp3 <- ggraph(EL_test[[3]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[3]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[3]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(EL_test[[3]]),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\nggarrange(comp1, comp2, comp3)\ndg_stat <- compile_stat(EL_test, met = \"degree\")\n\ndg_20 <- data.frame(val = dg_stat[20, ])\n\nggplot(dg_20, aes(val)) +\n  geom_histogram(binwidth = 1) +\n  xlab(\"Degree Centrality of Node 20\") +\n  geom_vline(xintercept = mean(dg_20$val), col = 'red') +\n  theme_bw()"},{"path":"Uncertainty.html","id":"EdgeProbSim","chapter":"Section 4 Quantifying Uncertainty","heading":"4.7.1 Edge Probability and Similarity Networks","text":"One area archaeological network research edge probability modeling approach outlined may use relates similarity networks. Many similarity networks used archaeology built edge weights scaled 0 1. edge weights thought “probabilities” just saw simulated example . Indeed, conforms frequent interpretation similarity values relating probabilities interaction numerous network studies (e.g., Mills et al. 2013a, 2013b, 2015; Golitko Feinman 2015; Golitko et al. 2012, etc.).Let’s take look example using weighted similarity network generated using Cibola technological similarity data used . Download RData file follow along.Now let’s plot couple candidate networks:","code":"\nload(\"data/Cibola_wt.RData\")\n\n# View first few edge weights in network object\nE(Cibola_wt)$weight[1:10]\n#>  [1] 0.7050691 0.7757143 0.8348214 0.8656783 0.8028571\n#>  [6] 0.7329193 0.7509158 0.8441558 0.7857143 0.8102919\n\nset.seed(4446347)\nsim_nets <- edge_prob(Cibola_wt, nsim = 1000, probs = E(Cibola_wt)$weight)\n# Precompute layout\nset.seed(9631)\nxy <- layout_with_fr(Cibola_wt)\n\n# Example 1\ncomp1 <- ggraph(sim_nets[[1]],\n                layout = \"manual\",\n                x = xy[, 1],\n                y = xy[, 2]) +\n  geom_edge_link() +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_nets[[1]])/3,\n                  fill = 'red') +\n  theme_graph()\n\n# Example 2\ncomp2 <- ggraph(sim_nets[[2]],\n                layout = \"manual\",\n                x = xy[, 1],\n                y = xy[, 2]) +\n  geom_edge_link() +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_nets[[2]])/3,\n                  fill = 'red') +\n  theme_graph()\n\n# Example 3\ncomp3 <- ggraph(sim_nets[[3]],\n                layout = \"manual\",\n                x = xy[, 1],\n                y = xy[, 2]) +\n  geom_edge_link() +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_nets[[3]])/3,\n                  fill = 'red') +\n  theme_graph()\n\nggarrange(comp1, comp2, comp3)\nbw_test <- compile_stat(sim_nets, met = \"betweenness\")\n\nbw_10 <- data.frame(val = bw_test[10,])\n\nggplot(bw_10, aes(val)) +\n  geom_histogram() +\n  xlab(\"Betweenness Centrality of Node 10\") +\n  geom_vline(xintercept = mean(bw_10$val), col = 'red') +\n  theme_bw()\n#> `stat_bin()` using `bins = 30`. Pick better value with\n#> `binwidth`."},{"path":"Uncertainty.html","id":"SampleSize","chapter":"Section 4 Quantifying Uncertainty","heading":"4.8 Small or Variable Sample Size","text":"section follows Brughmans Peeples (2022) Chapter 5.3.5 provide example can use simulation approach outlined assess sampling variability frequency data underlying archaeological networks. example, use apportioned ceramic frequency data Chaco World portion Southwest Social Networks database. can download data follow along.goal sub-section illustrate can use bootstrappping approach assess variability network properties based sampling error raw data underlying archaeological networks. example based ceramic similarity networks involves creating large number random replicates row raw ceramic data sample size held constant (observed sample size site) probabilities given sherd given type determined underlying multinomial frequency distribution types site. words, pull bunch random samples site probability given sample given type determined relative frequency type actual data. procedure completed, can assess centrality metrics graph, node, edge level property determine degree absolute values relative ranks potentially influenced sampling error.many ways set resampling procedure many complications (example, deal limited diversity small samples?). purposes illustration , implement simple procedure simply generate new samples fixed size based observed data determine degree network measures robust perturbation. chunk code create 1000 replicates based original ceramic data.following chunk code first reads ceramic data, converts Brainerd-Robinson similarity matrix defines function called sim_samp_error creates nsim random replicates ceramic data, converts similarity matrices, outputs results list object. can download script fucnction .following chunk code runs sim_samp_error function defined Chaco ceramic data defines new function called sim_cor takes output sim_samp_error original ceramic similarity matrix (ceramic_BR) calculates weighted degree centrality Speraman’s \\(\\rho\\) correlations original similarity matrix random replicate. sim_cor script modified use network metric outputs vector. results returned visualize results histogram.Note take several seconds minutes depending computer.described Chapter 5.3.5, cases want observe patterns variation due sampling error individual sites sets sites. next chunk code illustrate produce figure 5.14 Brughmans Peeples (2022) book. Specifically, plot consists series line plots x axis represents node network ordered degree centrality original observed network. node vertical line represents 95% confidence interval around degree across nsim random replicates produced evaluate sampling error. blue line represents degree original network red line represents median degree resampled networks.create plot, first iterate every object sim_nets calculate weighted degree centrality add two-column matrix along node id. done simulations, use summarise function calculate Mean ","code":"\n# Read in raw ceramic data\nceramic <-\n  read.csv(file = \"data/AD1050cer.csv\",\n           header = TRUE,\n           row.names = 1)\n# Convert to proportion\nceramic_p <- prop.table(as.matrix(ceramic), margin = 1)\n# Convert to Brainerd-Robinson similarity matrix\nceramic_BR <- (2 - as.matrix(vegan::vegdist(ceramic_p,\n                                            method = 'manhattan'))) / 2\n\n# Create function for assessing impact of sampling error on\n# weighted degree for similarity network\nsim_samp_error <- function(cer, nsim = 1000) {\n  sim_list <- list()\n  for (i in 1:nsim) {\n    data_sim <-  NULL\n    # the for-loop below creates a random multinomial replicate\n    # of the ceramic data\n    for (j in 1:nrow(cer)) {\n      data_sim <-\n        rbind(data_sim, t(rmultinom(1, rowSums(cer)[j], prob = cer[j, ])))\n    }\n    # Convert simulated data to proportion, create similarity matrix,\n    # calculate degree, and assess correlation\n    temp_p <- prop.table(as.matrix(data_sim), margin = 1)\n    sim_list[[i]] <- (2 - as.matrix(vegan::vegdist(temp_p,\n                                                   method = 'manhattan'))) /\n      2\n  }\n  return(sim_list)\n}\nset.seed(4634)\nsim_nets <- sim_samp_error(cer = ceramic, nsim = 1000)\n\nsim_cor <- function(sim_nets, sim) {\n  # change this line to use a different metric\n  dg_orig <- rowSums(sim)\n  dg_cor <- NULL\n  for (i in 1:length(sim_nets)) {\n    # change this line to use a different metric\n    dg_temp <- rowSums(sim_nets[[i]])\n    dg_cor[i] <-\n      suppressWarnings(cor(dg_orig, dg_temp, method = \"spearman\"))\n  }\n  return(dg_cor)\n}\n\ndg_cor <- sim_cor(sim_nets, ceramic_BR)\n\ndf <- as.data.frame(dg_cor)\n\nggplot(df, aes(x = dg_cor)) +\n  geom_histogram(bins = 100, color = 'white', fill = 'black') +\n  theme_bw() +\n  scale_x_continuous(name = 'Correlation in Degree Centraility',\n                     limits = c(0.9, 1)) +\n  theme(\n    axis.text.x = element_text(size = rel(1.5)),\n    axis.text.y = element_text(size = rel(1.5)),\n    axis.title.x = element_text(size = rel(1.5)),\n    axis.title.y = element_text(size = rel(1.5)),\n    legend.text = element_text(size = rel(1.5))\n  )\n# Create data frame containing degree and site id for nsim random\n# similarity matrices\ndf <- matrix(NA, 1, 2) # define empty matrix\n# calculate degree centrality for each random run and bind in\n# matrix along with id\nfor (i in 1:length(sim_nets)) {\n  temp <- cbind(seq(1, nrow(sim_nets[[i]])), rowSums(sim_nets[[i]]))\n  df <- rbind(df, temp)\n}\ndf <- as.data.frame(df[-1, ]) # remove first row in initial matrix\ncolnames(df) <- c(\"site\", \"degree\") # add column names\n\n# Use summarise function to create median, confidence intervals,\n# and other statistics for degree by site.\nout <- df %>%\n  group_by(site) %>%\n  summarise(\n    Mean = mean(degree),\n    Median = median(degree),\n    Max = max(degree),\n    Min = min(degree),\n    Conf = sd(degree) * 1.96\n  )\nout$site <- as.numeric(out$site)\nout <- out[order(rowSums(ceramic_BR)), ]\n\n# Create dataframe of degree centrality for the original ceramic\n# similarity matrix\ndg_wt <- as.data.frame(rowSums(ceramic_BR))\ncolnames(dg_wt) <- \"dg.wt\"\n\n# Plot the results\nggplot() +\n  geom_line(\n    data = out,\n    aes(\n      x = reorder(site, Median),\n      y = Median,\n      group = 1\n    ),\n    col = 'red',\n    lwd = 1.5,\n    alpha = 0.5\n  ) +\n  geom_errorbar(data = out, aes(\n    x = reorder(site, Median),\n    ymin = Median - Conf,\n    ymax = Median + Conf\n  )) +\n  geom_path(\n    data = sort(dg_wt),\n    aes(x = order(dg.wt), y = dg.wt),\n    col = 'blue',\n    lwd = 1.5,\n    alpha = 0.5\n  ) +\n  theme_bw() +\n  ylab('Degree') +\n  scale_x_discrete(name = 'Sites in Rank Order of Degree') +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(2))\n  )"},{"path":"Visualization.html","id":"Visualization","chapter":"Section 5 Network Visualization","heading":"Section 5 Network Visualization","text":"section follows along Brughmans Peeples (2022) chapter 6 illustrate wide variety techniques can used network visualization. begin general examples network plotting demonstrate replicate specific examples appear book. examples rely R cases use software provide additional details data formats.already excellent resources online learning create beautiful informative network visuals. recommend excellent online materials produced Dr. Katherine Ognyanova available website Static dynamic network visualization R workshop materials particular. Many examples book take inspiration work. addition , R Graph Gallery website created Holtz Yan provides numerous excellent examples plots R using ggplot2 ggraph packages among many others. new R, probably helpful read bit basic graphic functions (including tutorials listed ) getting started.","code":""},{"path":"Visualization.html","id":"datasets-and-r-setup","chapter":"Section 5 Network Visualization","heading":"5.1 Datasets and R Setup","text":"order make easy possible users replicate specific visuals book examples tutorial tried make examples modular possible. means provide calls initialize required libraries plot within relevant chunk code (can easily tell package ) also provide links download data required replicate figure description figure . data sets use include .csv format files well .Rdata files contain sets specific R objects formatted required individual chunks code.plan working entire tutorial like download associated data can download zip file. Simply extract zip folder R working directory examples work. Note examples setup data contained sub-folder working directory called “data” (note directories file names case sensitive).","code":""},{"path":"Visualization.html","id":"visualizing-networks-in-r","chapter":"Section 5 Network Visualization","heading":"5.2 Visualizing Networks in R","text":"\nmany tools available creating network visualizations \nR including functions built directly igraph \nstatnet packages. get details, first\nbriefly illustrate primary network plotting options \nigraph, statnet visualization package\ncalled ggraph. start initializing required\nlibraries reading adjacency matrix creating network\nobjects igraph statnet format.\nbasis examples section.\nLet’s start reading example data describe package turn:","code":"\nlibrary(igraph)\nlibrary(statnet)\n#>            Installed ReposVer Built  \n#> ergm.count \"4.0.2\"   \"4.1.1\"  \"4.2.0\"\n#> network    \"1.17.1\"  \"1.17.2\" \"4.2.0\"\nlibrary(ggraph)\nlibrary(intergraph)\n\n\nCibola <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = TRUE,\n           row.names = 1)\n\nCibola_attr <- read.csv(file = \"data/Cibola_attr.csv\", header = TRUE)\n\n# Create network in igraph format\nCibola_i <- igraph::graph_from_adjacency_matrix(as.matrix(Cibola),\n                                                mode = \"undirected\")\nCibola_i\n#> IGRAPH e90c7b6 UN-- 31 167 -- \n#> + attr: name (v/c)\n#> + edges from e90c7b6 (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n\n# Create network object in statnet/network format\nCibola_n <- asNetwork(Cibola_i)\nCibola_n\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes"},{"path":"Visualization.html","id":"networkstatnet","chapter":"Section 5 Network Visualization","heading":"5.2.1 network/statnet","text":"need plot network/statnet network object simply type plot(nameofnetwork). default, creates network plot nodes edges shown color weight using Fruchterman-Reingold graph layout default. , however, many options can altered basic plot. order see details can type ?plot.network console associated document.order change color nodes, layout, symbols, features, can add arguments detailed help document. arguments can include calls functions, mathematical expressions, even additional data attribute files. example following plot, calculate degree centrality directly within plot call divide result 10 ensure nodes reasonable size plot. use vertex.cex argument set node size based results expression. change layout using “mode” argument produce network graph using Kamada-Kawai layout. change color nodes represent Region variable associated attribute file using vertex.col argument set change edge colors using edge.col argument. Finally, use displayisolates = FALSE indicate want single isolated node plotted. many options.","code":"\nset.seed(6332)\nplot(Cibola_n)\nset.seed(436)\nplot(\n  Cibola_n,\n  vertex.cex = sna::degree(Cibola_n) / 10,\n  mode = \"kamadakawai\",\n  vertex.col = as.factor(Cibola_attr$Region),\n  edge.col = \"darkgray\",\n  displayisolates = FALSE\n)"},{"path":"Visualization.html","id":"igraph","chapter":"Section 5 Network Visualization","heading":"5.2.2 igraph","text":"igraph package also built plotting function called plot.igraph. call just need type plot(yournetworkhere) provide igraph object (R can tell kind object simply type plot). default igraph plot uses Fruchterman-Reingold layout just like statnet/network default node labeled.Let’s take look options can alter change plot. many options explore help documents igraph.plotting describe detail (type ?igraph.plotting console ). want explore igraph , suggest check Network Visualization tutorial linked provides discussion wide variety options.","code":"\nset.seed(435)\nplot(Cibola_i)\nset.seed(3463)\nplot(\n  Cibola_i,\n  vertex.size = igraph::eigen_centrality(Cibola_i)$vector * 20,\n  layout = layout_with_kk,\n  vertex.color = as.factor(Cibola_attr$Great.Kiva),\n  edge.color = \"darkblue\",\n  vertex.frame.color = \"red\",\n  vertex.label = NA\n)"},{"path":"Visualization.html","id":"ggraph","chapter":"Section 5 Network Visualization","heading":"5.2.3 ggraph","text":"ggraph package provides powerful set tools plotting visualizing network data R. format used package bit different saw instead relies ggplot2 style plots plot type called modifications made sets lines additional arguments separated +. Although takes bit getting used found ggplot format often intuitive making complex graphics understand basics.Essentially, way ggraph call works start ggraph function call includes network object layout information. provide lines specifying edges geom_edge_link nodes geom_node_point features . Conveniently ggraph function call take either igraph network object need convert.example. first call igraph network object Cibola_i specify Fruchterman-Reingold layout using layout = \"fr\". Next, call geom_edge_link specify edge colors. geom_node_point call specifies many attributes nodes including fill color, outline color, transparency (alpha), shape, size using igraph::degree function. scale_size call tells plot scale node size specified previous line range 1 4. Finally theme_graph basic call ggraph theme tells plot make background white remove margins around edge plot. Let’s see looks.next section go common options ggraph detail.many options ggraph package recommend exploring help document (?ggraph) well Data Imaginist ggraph tutorial online . examples use ggraph format.","code":"\nset.seed(4368)\n# Specify network to use and layout\nggraph(Cibola_i, layout = \"fr\") +\n  # Specify edge features\n  geom_edge_link(color = \"darkgray\") +\n  # Specify node features\n  geom_node_point(\n    fill = \"blue\",\n    color = \"red\",\n    alpha = 0.5,\n    shape = 22,\n    size = igraph::degree(Cibola_i)\n  ) +\n  # Set the upper and lower limit of the \"size\" variable\n  scale_size(range = c(1, 4)) +\n  # Set the theme \"theme_graph\" is the default theme for networks\n  theme_graph() "},{"path":"Visualization.html","id":"network-visualization-options","chapter":"Section 5 Network Visualization","heading":"5.3 Network Visualization Options","text":"section illustrate useful graphical options visualizing networks, focusing particular ggraph format. cases similar options available plotting functions network igraph. relevant reference specific figures book tutorial code figures produced R presented next session. examples section use Cibola technological similarity data (click download). First call required packages import data.","code":"\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\n\nload(\"data/Peeples2018.Rdata\")\n\n# Create igraph object for plots below\nnet <- asIgraph(BRnet)"},{"path":"Visualization.html","id":"GraphLayouts","chapter":"Section 5 Network Visualization","heading":"5.3.1 Graph Layout","text":"Graph layout simply refers placement organization 2-dimensional 3-dimensional space nodes edges network.","code":""},{"path":"Visualization.html","id":"ManualLayouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.1 Manual or User Defined Layouts","text":"options manually defining node placement graph layout R easiest simply provide x y coordinates directly. example, plot Cibola technological similarity network set x y coordinates group sites region grid configuration. another example approach see Figure 6.1 . example can interactively define layout see Figure 6.5","code":"\n# site_info - site location and attribute data\n\n# Create xy coordinates grouped by region\nxy <-\n  matrix(\n    c(1, 1, 3, 3, 2, 1, 2, 1.2, 3, 3.2, 2, 1.4, 1, 1.2, 2, 2.2, 3, 2, 3, 1, 2.2, 1, \n      2, 3, 2, 3.2, 3, 1.2, 3, 3.4, 1, 2, 3.2, 3.2, 3, 1.4, 3, 2.2, 2, 2, 3.2, 3.4, \n      2.2, 1.2, 3.4, 3.2, 3.2, 1, 2, 3.4, 3.4, 3.4, 2.2, 3, 2.2, 3.2, 2.2, 3.4, \n      1, 1.4, 3, 2.4), \n    nrow = 31, \n    ncol = 2, \n    byrow = TRUE\n)\n\n# Plot using \"manual\" layout and specify xy coordinates\nggraph(net,\n       layout = \"manual\",\n       x = xy[, 1],\n       y = xy[, 2]) +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = FALSE) +\n  theme_graph()"},{"path":"Visualization.html","id":"GeographicLayouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.2 Geographic Layouts","text":"Plotting networks using geographic layout essentially plotting manual layout except specify geographic coordinates instead coordinates. See Figure 6.2 another example.working geographic data, also sometimes useful plot directly top sort base map. many options one convenient use sf ggmap packages directly download relevant base map layer plot directly top . first requires converting points latitude longitude decimal degrees already format. See details sf package ggmap package details.\ndescribe spcifics spatial data handling, geographic\ncoordinates, projection section Spatial Networks. See section \nfull description R deals geographic information.\n","code":"\nggraph(net,\n       layout = \"manual\",\n       x = site_info$x,\n       y = site_info$y) +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = F) +\n  theme_graph()\nlibrary(sf)\nlibrary(ggmap)\n\n# Convert attribute location data to sf coordinates and change\n# map projection\nlocations_sf <-\n  st_as_sf(site_info, coords = c(\"x\", \"y\"), crs = 26912)\nloc_trans <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(loc_trans)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Get basemap \"terrain-background\" data for map in black and white\n# the bbox argument is used to specify the corners of the box to be\n# used and zoom determines the detail.\nbase_cibola <- get_stamenmap(\n  bbox = c(-110.2, 33.4, -107.8, 35.3),\n  zoom = 10,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- data.frame(xy[edgelist[, 1], ], xy[edgelist[, 2], ])\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Plot original data on map\nggmap(base_cibola, darken = 0.35) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    alpha = 0.8,\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y, col = site_info$Region),\n    alpha = 0.8,\n    size = 5,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"Visualization.html","id":"AlgorithmicLayouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.3 Shape-Based and Algorithmic Layouts","text":"wide variety shape-based algorithmic layouts available use R. cases, takes change layouts simply modify single line ggraph call specify desired layout. ggraph package can use igraph layouts well many built directly package. See ?ggraph details see options. show examples. Note leave figures calls except argument layout = \"yourlayout\" ggraph call ggtitle name. layouts involve randomization, use set.seed() function make sure always plot . See discussion Figure 6.8 details. Beyond Figure 6.9 provides additional options can used hierarchical network data.\nspecify graph layout ggraph, \nplotting function automatically choose layout using \nlayout_nicely() function. Although sometimes produces\nuseful layout used specified call recommend\nsupplying layout argument directly.\n\ncode used ggarrange function within\nggpubr package combine figures single\noutput. function works ggplot2 \nggraph format output supply names \nfigure order want appear number rows\nnrow number columns ncol want \nresulting combined figure . want label figure\nusing ggarrange function can use \nlabels argument.\n","code":"\n# circular layout\ncirc_net <- ggraph(net, layout = \"circle\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region), show.legend = F) +\n  ggtitle(\"Circle\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Fruchcterman-Reingold layout\nset.seed(4366)\nfr_net <- ggraph(net, layout = \"fr\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region), show.legend = F) +\n  ggtitle(\"Fruchterman-Reingold\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Davidsons and Harels annealing algorithm layout\nset.seed(3467)\ndh_net <- ggraph(net, layout = \"dh\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = F) +\n  ggtitle(\"Davidson-Harel\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n\nlibrary(ggpubr)\nggarrange(circ_net, fr_net, dh_net, nrow = 1, ncol = 3)"},{"path":"Visualization.html","id":"NodeEdgeOptions","chapter":"Section 5 Network Visualization","heading":"5.3.2 Node and Edge Options","text":"many options altering color symbol nodes edges within R. section briefly discuss common options. details see discussion figures 6.10 6.16 .","code":""},{"path":"Visualization.html","id":"NodeOptions","chapter":"Section 5 Network Visualization","heading":"5.3.2.1 Nodes","text":"ggraph changing node options mostly consists changing options within geom_node_point call within ggraph figure call. already seen possible set color nodes variable, change size points, can also scale points metric like centrality. Indeed, even possible make call centrality function question directly within figure code.selecting point shapes can use shapes available base R using pch point codes. available options:many options selecting colors nodes edges. can assigned using standard color names can assigned using rgb hex codes. also possible use standard palettes packages like RColorBrewer scales specify categorical continuous color schemes. often done using either scale_fill_brewer scale_color_brewer calls RColorBrewer. couple examples. examples, colors grouped site region, node size scaled degree centrality, node edge color shape specified call. Note alpha command controls transparency relevant part plot. scale_size call specifies maximum minimum size points plot.R Graph Gallery good overview available color palettes RColorBrewer can used. “Set2” palette used good one people many kinds color vision deficencies.also number advanced methods displaying nodes including displaying figures data visualizations place nodes using images nodes. examples book code outlining create visuals discussions Figure 6.3 Figure 6.13 .","code":"\nlibrary(ggpubr)\nggpubr::show_point_shapes()\nlibrary(RColorBrewer)\n\nset.seed(347)\ng1 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"gray\", alpha = 0.7) +\n  geom_node_point(\n    aes(fill = site_info$Region),\n    shape = 21,\n    size = igraph::degree(net) / 2,\n    alpha = 0.5\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nset.seed(347)\ng2 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"blue\", alpha = 0.3) +\n  geom_node_point(\n    aes(col = site_info$Region),\n    shape = 15,\n    size = igraph::degree(net) / 2,\n    alpha = 1\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nggarrange(g1, g2, nrow = 1)"},{"path":"Visualization.html","id":"EdgeOptions","chapter":"Section 5 Network Visualization","heading":"5.3.2.2 Edges","text":"Edges can modified terms color, line type, thickness many features just like nodes typically done using geom_edge_link call within ggraph. Let’s take look couple additional examples. case ’re going use weighted network object original Peeples2018.Rdata file show can vary edges relation edge attributes like weight.example plot line thickness transparency using edge weights associated network object. also using scale_edge_color_viridis specify continuous edge color scheme. details see ?scale_edge_colorAnother feature edges often important visualizations presence absence type arrows. Arrows can modified ggraph using arrow argument within geom_edge_link call. relevant options length arrow (determines size), type argument specifies open closed arrow, spacing arrow can set end_cap start_cap respectively define gap arrow point node. values can set using absolute measurements shown example . Since undirected network use argument ends = \"first\" simulated directed network arrowheads drawn first time edge appears edge list. See ?arrow details options.Another common consideration edges shape edges . far used examples edges straight lines, also possible draw arcs fan nodes multiple connections visible. general, need change option use another command geom_edge_ family commands. example, following chunk code produce network arcs rather straight lines. case argument “strength” controls amount bend lines.also possible show edges instead just gradient scale representing density edges using geom_edge_density call. useful large complex networks.\nwant see possible options \ngeom_edge_ commands, simply use help command one\nfunctions (.e., ?geom_edge_arc) scroll \nhelp window section labeled “See Also.”\n","code":"\nlibrary(intergraph)\nnet2 <- asIgraph(BRnet_w)\n\nset.seed(436)\nggraph(net2, \"stress\") +\n  geom_edge_link(aes(width = weight, alpha = weight, col = weight)) +\n  scale_edge_color_viridis() +\n  scale_edge_width(range = c(1, 5)) +\n  geom_node_point(size = 4, col = \"blue\") +\n  labs(edge_color = \"Edge Weight Color Scale\") +\n  theme_graph()\nset.seed(436)\nggraph(net, \"stress\") +\n  geom_edge_link(\n    arrow = arrow(\n      length = unit(2, 'mm'),\n      ends = \"first\",\n      type = \"closed\"\n    ),\n    end_cap = circle(0, 'mm'),\n    start_cap = circle(3, 'mm'),\n    edge_colour = \"black\"\n  ) +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()\nset.seed(436)\nggraph(net, \"kk\") +\n  geom_edge_arc(edge_colour = \"black\", strength = 0.1) +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()\nset.seed(436)\nggraph(net2, \"kk\") +\n  geom_edge_density() +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()"},{"path":"Visualization.html","id":"LabelOptions","chapter":"Section 5 Network Visualization","heading":"5.3.3 Label Options","text":"many cases may want label either nodes, edges, features network. relatively easy ggraph geom_node_text() command. place labels specified node. use repel = TRUE argument repel names slightly node make readable. shown example Figure 6.4 also possible filter labels label certain nodes.also possible label edges adding argument directly geom_edge_ command. practice, really works small networks. next chunk code, create small network demonstrate function.","code":"\n# First set a node attribute called name based on site names\nV(net2)$name <- get.vertex.attribute(BRnet_w, attr = \"vertex.names\")\n\nset.seed(436)\nggraph(net2, \"fr\") +\n  geom_edge_link() +\n  geom_node_point(size = 4, col = \"blue\") +\n  geom_node_text(aes(label = name), size = 3, repel = TRUE) +\n  theme_graph()\ng <- graph(c(\"A\", \"B\",\n             \"B\", \"C\",\n             \"A\", \"C\",\n             \"A\", \"A\",\n             \"C\", \"B\",\n             \"D\", \"C\"))\n\nE(g)$weight <- c(3, 1, 6, 8, 4, 2)\n\nset.seed(4351)\nggraph(g, layout = 'stress') +\n  geom_edge_fan(aes(label = weight)) +\n  geom_node_point(size = 20, col = 'lightblue') +\n  geom_node_text(label = V(g)$name) +\n  theme_graph()"},{"path":"Visualization.html","id":"Colorbind","chapter":"Section 5 Network Visualization","heading":"5.3.4 Be Kind to the Color Blind","text":"selecting color schemes, important consider impact particular color scheme color blind readers. excellent set R scripts GitHub package called colorblindr Claus Wilke can help just . slightly modified code colorblindr package created script called colorblindr.R can download use test network. Simply run code script use cvd_grid2() function ggplot ggraph object see simulated colors.chunk code loads colorblindr.R script plots figure using RColorBrewer color Set2 original unmodified format might look readers common forms color vision issues. Download colorblindr.R script follow along.","code":"\nlibrary(colorspace)\nsource(\"scripts/colorblindr.R\")\ncvd_grid2(g1)"},{"path":"Visualization.html","id":"VizCommunities","chapter":"Section 5 Network Visualization","heading":"5.3.5 Communities and Groups","text":"Showing communities groups network visualizations can simple color coding nodes edges seen many examples . sometimes also useful highlight groups creating convex hull circle around relevant points. can done ggraph using geom_mark_hull command within ggforce package. also need package called concaveman allows set concavity hulls around points.following chunk code provides simple example using Louvain clustering algorithm.discussion Figure 6.4 provides another similar example. many complicated ways showing network groups provided examples covering figures book. example, Figure 6.18 provides example “group---box” technique using NodeXL software package. Figure 6.19 illustrates use matrices visualization tools Figure 6.20 provides links Nodetrix hybrid visualization software.","code":"\n\nlibrary(ggforce)\nlibrary(concaveman)\n\n# Define clusters\ngrp <- as.factor(cluster_louvain(net2)$membership)\n\nset.seed(4343)\nggraph(net2, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp),\n                  shape = 21,\n                  size = 5,\n                  alpha = 0.75) +\n  # Create hull around points within group and label\n  geom_mark_hull(\n    aes(\n      x,\n      y,\n      group = grp,\n      fill = grp,\n      label = grp\n    ),\n    concavity = 4,\n    expand = unit(2, \"mm\"),\n    alpha = 0.25,\n    label.fontsize = 10\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph()"},{"path":"Visualization.html","id":"ReplicatingBookFigures","chapter":"Section 5 Network Visualization","heading":"5.4 Replicating the Book Figures","text":"section go figure Chapter 6 Brughmans Peeples (2022) detail final graph created figures created using R. figures created R describe software data used provide additional resources available. hope examples serve inspiration network visualization experiments. figures relatively simple others quite complex. presented order appear book.","code":""},{"path":"Visualization.html","id":"Figure_6_1","chapter":"Section 5 Network Visualization","heading":"Figure 6.1: Manual Layout","text":"Figure 6.1. example early hand drawn network graph (sociogram) published Moreno (1932: 101). Moreno noted nodes top bottom sociogram connections therefore represent nodes greatest importance. specific “important” points emphasized size placement.Note hand drawn version figure presented book digital example presented illustrative purposes. shows can employ user defined layouts directly supplying coordinates nodes plot. Download Moreno data follow along.","code":"\nlibrary(igraph)\nlibrary(ggraph)\n\n# Read in adjacency matrix of Moreno data and covert to network\nMoreno <-\n  as.matrix(read.csv('data/Moreno.csv', header = T, row.names = 1))\ng.Moreno <- graph_from_adjacency_matrix(Moreno)\n\n# Create xy coordinates associated with each node\nxy <- matrix(\n  c(4, 7, 1, 5, 6, 5, 2, 4, 3, 4, 5, 4, 1, 2.5, 6, 2.5, 4, 1),\n  nrow = 9,\n  ncol = 2,\n  byrow = T\n)\n\n# Plot the network using layout = \"manual\" to place nodes using xy coordinates\nggraph(g.Moreno,\n       layout = \"manual\",\n       x = xy[, 1],\n       y = xy[, 2]) +\n  geom_edge_link() +\n  geom_node_point(fill = 'white',\n                  shape = 21,\n                  size = igraph::degree(g.Moreno)) +\n  scale_size(range = c(2, 3)) +\n  theme_graph() "},{"path":"Visualization.html","id":"Figure_6_2","chapter":"Section 5 Network Visualization","heading":"Figure 6.2: Examples of Common Network Plot Formats","text":"Figure. 6.2. plots different visual representations network data Peeples’s (2018) data edges defined based technological similarities cooking pots node represent archaeological settlements.code creates individual figures compiles single composite figure plotting.First read data (data combined single RData file ).Fig 6.2a - simple network graph nodes placed based Fruchterman-Reingold algorithmFig 6.2b - Network graph nodes placed based real geographic locations settlements color coded based sub-regions.Fig 6.2c - graph designed show many different kinds information can combined single network plot. network graph node placement defined stress majorization algorithm (see ), nodes color coded based region, different symbols different kinds public architectural features found sites, nodes scaled based betweenness centrality scores. line weight edge used indicate relative tie-strength.Fig. 6.2d - network graph laid using Kamada-Kawai force directed algorithm nodes color coded based communities detected using Louvain community detection algorithm. community also indicated circle highlighting relevant nodes. Edges within communities shown black edges communities shown red.plot use .ggplot function convert traditional igraph plot ggraph plot illustrate can done.Finally, use ggarrange function ggpubr package combine plots single composite plot.","code":"\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggplotify)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(file = \"data/Peeples2018.Rdata\")\n## contains objects\n# site_info - site locations and attributes\n# ceramicBR - raw Brainerd-Robinson similarity among sites\n# BRnet - binary network with similarity values > 0.65\n#     defined as edges in statnet/network format\n# BRnet_w - weighted network with edges (>0.65) given weight\n#     values based on BR similarity in statnet/network format\n##\n## create simple graph with Fruchterman - Reingold layout\nset.seed(423)\nF6.2a <- ggraph(BRnet, \"fr\") +\n  geom_edge_link(edge_colour = \"grey66\") +\n  geom_node_point(aes(size = 5), col = \"red\", show.legend = FALSE) +\n  theme_graph()\nF6.2a\n## create graph with layout determined by site location and nodes color coded by region\nF6.2b <- ggraph(BRnet, \"manual\",\n                x = site_info$x,\n                y = site_info$y) +\n  geom_edge_link(edge_colour = \"grey66\") +\n  geom_node_point(aes(size = 2, col = site_info$Region),\n                  show.legend = FALSE) +\n  theme_graph()\nF6.2b\n# create vectors of attributes and betweenness centrality and plot\n# network with nodes color coded by region, sized by betweenness,\n# with symbols representing public architectural features, and\n# with edges weighted by BR similarity\ncol1 <- as.factor((site_info$Great.Kiva))\ncol2 <- as.factor((site_info$Region))\nbw <- sna::betweenness(BRnet_w)\n\nF6.2c <- ggraph(BRnet_w, \"stress\") +\n  geom_edge_link(aes(width = weight, alpha = weight),\n                 edge_colour = \"black\",\n                 show.legend = F) +\n  scale_edge_width(range = c(1, 2)) +\n  geom_node_point(aes(\n    size = bw,\n    shape = col1,\n    fill = col1,\n    col = site_info$Region\n  ),\n  show.legend = F) +\n  scale_fill_discrete() +\n  scale_size(range = c(4, 12)) +\n  theme_graph()\nF6.2c\n# convert network object to igraph object and calculate Louvain\n# cluster membership plot and convert to grob to combine in ggplot\ng <- asIgraph(BRnet_w)\nclst <- cluster_louvain(g)\n\nF6.2d <- as.ggplot(\n  ~ plot(\n    clst,\n    g,\n    layout = layout_with_kk,\n    vertex.label = NA,\n    vertex.size = 10,\n    col = rainbow(4)[clst$membership]\n  )\n)\nF6.2d\n# Combine all plots into a single figure using ggarrange\nfigure_6_2 <- ggarrange(\n  F6.2a,\n  F6.2b,\n  F6.2c,\n  F6.2d,\n  nrow = 2,\n  ncol = 2,\n  labels = c('(a)', '(b)', '(c)', '(d)'),\n  font.label = list(size = 22)\n)\n\nfigure_6_2"},{"path":"Visualization.html","id":"Figure_6_3","chapter":"Section 5 Network Visualization","heading":"Figure 6.3: Examples of Rare Network Plot Formats","text":"Figure 6.3. Examples less common network visuals techniques Peeples’s (2018) ceramic technological similarity data.Fig 6.3a - weighted heat plot underlying similarity matrix hierarchical clusters shown axis. plot relies packages called superheat produces plots formatted see . required input symmetric similarity matrix object.\nchunk code use .ggplot function\nggplotify package. function converts non\nggplot2 style function ggplot2 format\ncan used packages like ggpubr\ncolorblindr.\nFig. 6.3b - arcplot within group ties shown plot group ties shown .plot, read adjacency matrix ordered order want show final plot. Download file follow along. Note object grp must produced order nodes appear original adjacency matrix file.Fig. 6.3c - Network plot sites geographic locations edges bundled using edge bundling hammer routine.\nfunction requires edgebundle package \ninstalled along reticulate Python 3.7 (see Packages) uses Cibola technological similarity data.\nCheck Data Workspace Setup section \ndetails getting edge bundling package Python \nrunning.\n\naware function may take long time computer\ndepending processing power RAM.\nFig. 6.3d - Network graph nodes replaced waffle plots show relative frequencies common ceramic technological clusters.somewhat complicated plot requires couple specialized libraries additional steps along way. provide comments code help follow along. Essentially routine creates series waffle plots uses annotations replace nodes final ggraph. plot requires install development package called ggwaffle. Run line code creating figure need add package.\nnumerous projects R CRAN archive \npackages peer reviewed evaluated. many \npackages compendiums designed use R yet \nCRAN archive. Frequently found packages development \nGitHub. order use packages development, can use \ninstall_github function wrapped inside \ndevtools package (though originates \nremotes package). order install package \nGitHub, type supply “username/packagename” inside \ninstall_github call.\nLet’s now look figure code:\ninspiration example came R\nblogpost schochastics (David Schoch). post shows, \nfigures can treated ggplot2 objects can used\nplace nodes defining “annotations.” See post\ndetails.\nNow let’s look figures together.","code":"\n\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(ggplotify)\nlibrary(superheat)\n\nceramicBRa <- ceramicBR\ndiag(ceramicBRa) <- NA\n\nF6.3a <- as.ggplot(\n  ~ superheat(\n    ceramicBRa,\n    row.dendrogram = T,\n    col.dendrogram = T,\n    grid.hline.col = \"white\",\n    grid.vline.col = \"white\",\n    legend = F,\n    left.label.size = 0,\n    bottom.label.size = 0\n  )\n)\nF6.3a\n\n\narc_dat <- read.csv('data/Peeples_arcplot.csv',\n                    header = T,\n                    row.names = 1)\ng <- graph_from_adjacency_matrix(as.matrix(t(arc_dat)))\n\n# set groups for color\ngrp <- as.factor(c(2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,1,1,1,1,1,\n                   1,1,1,1,1,1)) \n\n\n# Make the graph\nF6.3b <- ggraph(g, layout = \"linear\") +\n  geom_edge_arc(\n    edge_colour = \"black\",\n    edge_alpha = 0.2,\n    edge_width = 0.7,\n    fold = F,\n    strength = 1,\n    show.legend = F\n  ) +\n  geom_node_point(\n    aes(\n      size = igraph::degree(g),\n      color = grp,\n      fill = grp\n    ),\n    alpha = 0.5,\n    show.legend = F\n  ) +\n  scale_size_continuous(range = c(4, 8)) +\n  theme_graph()\nF6.3b\nlibrary(edgebundle)\nload(\"data/Peeples2018.Rdata\")\n\n# Create attribute file with rquired data\nxy<- as.data.frame(site_info[,1:2])\nxy <- cbind(xy,site_info$Region)\ncolnames(xy) <- c('x','y','Region')\n\n# Run hammer bundling routine\ng <- asIgraph(BRnet)\nhbundle <- edge_bundle_hammer(g, xy, bw = 5, decay = 0.3)\n\nF6.3c <-   ggplot()+\n  geom_path(data = hbundle,aes(x,y,group=group),\n            col=\"gray66\",size=0.5) +\n  geom_point(data = xy,aes(x,y,col=Region),\n             size=5, alpha=0.75, show.legend=F)+\n  theme_void()\nF6.3c\ndevtools::install_github(\"liamgilbey/ggwaffle\")\n# Initialize libraries\n# devtools::install_github(\"liamgilbey/ggwaffle\") # run this if ggwaffle not installed\nlibrary(ggwaffle)\nlibrary(tidyverse)\n\n# Create igraph object from data imported above\nCibola_adj <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = TRUE,\n           row.names = 1)\ng <- graph_from_adjacency_matrix(as.matrix(Cibola_adj),\n                                 mode = \"undirected\")\n\n# Import raw ceramic data and convert to proportions\nceramic_clust <- read.csv(file = \"data/Cibola_clust.csv\",\n                          header = T,\n                          row.names = 1)\nceramic.p <- prop.table(as.matrix(ceramic_clust), margin = 1)\n\n# Assign vertex attributes to the network object g which represent\n# columns in the ceramic.p table\nV(g)$C1 <- ceramic.p[, 1]\nV(g)$C2 <- ceramic.p[, 2]\nV(g)$C3 <- ceramic.p[, 3]\nV(g)$C4 <- ceramic.p[, 4]\nV(g)$C5 <- ceramic.p[, 5]\nV(g)$C6 <- ceramic.p[, 6]\nV(g)$C7 <- ceramic.p[, 7]\nV(g)$C8 <- ceramic.p[, 8]\nV(g)$C9 <- ceramic.p[, 9]\nV(g)$C10 <- ceramic.p[, 10]\n\n# Precompute the layout and assign coordinates as x and y in network g\nset.seed(345434534)\nxy <- layout_with_fr(g)\nV(g)$x <- xy[, 1]\nV(g)$y <- xy[, 2]\n\n# Create a data frame that contains the 4 most common\n# categories in the ceramic table, the node id, and the proportion\n# of that ceramic category at that node\nnodes_wide <- igraph::as_data_frame(g, \"vertices\")\nnodes_long <- nodes_wide %>% dplyr::select(C1:C4) %>%\n  mutate(id = 1:nrow(nodes_wide)) %>%\n  gather(\"attr\", \"value\", C1:C4)\nnodes_out <- NULL\nfor (j in 1:nrow(nodes_long)) {\n  temp <- do.call(\"rbind\", replicate(round(nodes_long[j, ]$value * 50, 0),\n                                     nodes_long[j, ], simplify = FALSE))\n  nodes_out <- rbind(nodes_out, temp)\n}\n\n# Create a list object for the call to each bar chart by node\nbar_list <- lapply(1:vcount(g), function(i) {\n  gt_plot <- ggplotGrob(\n    ggplot(waffle_iron(nodes_out[nodes_out$id == i,],\n                       aes_d(group = attr))) +\n      geom_waffle(aes(x, y, fill = group), size = 0.1) +\n      coord_equal() +\n      labs(x = NULL, y = NULL) +\n      theme(\n        legend.position = \"none\",\n        panel.background = element_rect(fill = \"white\", colour = NA),\n        line = element_blank(),\n        text = element_blank()\n      )\n  )\n  panel_coords <- gt_plot$layout[gt_plot$layout$name == \"panel\",]\n  gt_plot[panel_coords$t:panel_coords$b, panel_coords$l:panel_coords$r]\n})\n\n# Convert the results above into custom annotation\nannot_list <- lapply(1:vcount(g), function(i) {\n  xmin <- nodes_wide$x[i] - .2\n  xmax <- nodes_wide$x[i] + .2\n  ymin <- nodes_wide$y[i] - .2\n  ymax <- nodes_wide$y[i] + .2\n  annotation_custom(\n    bar_list[[i]],\n    xmin = xmin,\n    xmax = xmax,\n    ymin = ymin,\n    ymax = ymax\n  )\n})\n\n# create basic network\np <- ggraph(g, \"manual\", x = V(g)$x, y = V(g)$y) +\n  geom_edge_link0() +\n  theme_graph() +\n  coord_fixed()\n\n# put everything together by combining with the annotation (bar plots + network)\nF6.3d <- Reduce(\"+\", annot_list, p)\nF6.3d"},{"path":"Visualization.html","id":"Figure_6_4","chapter":"Section 5 Network Visualization","heading":"Figure 6.4: Simple Network with Clusters","text":"Figure 6.4. network among Clovis era sites Western U.S. connections based shared lithic raw material sources. Nodes scaled based betweenness centrality top seven sites labelled. Colour-coded clusters defined using Louvain algorithm.\nexample shows define indicate groups label points\nbased values. Note use ifelse call \ngeom_node_text portion plot. See information \nifelse statements work.\n","code":"\nlibrary(ggforce)\nlibrary(ggraph)\nlibrary(statnet)\nlibrary(igraph)\n\nClovis <- read.csv(\"data/Clovis.csv\", header = T, row.names = 1)\ncolnames(Clovis) <- row.names(Clovis)\ngraph <- graph_from_adjacency_matrix(as.matrix(Clovis),\n                                     mode = \"undirected\", diag = F)\n\nbw <- igraph::betweenness(graph)\n\ngrp <- as.factor(cluster_louvain(graph)$membership)\n\nset.seed(43643548)\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(edge_width = 1, color = 'gray') +\n  geom_node_point(aes(fill = grp, size = bw, color = grp),\n                  shape = 21,\n                  alpha = 0.75) +\n  scale_size(range = c(2, 20)) +\n  geom_mark_hull(\n    aes(\n      x,\n      y,\n      group = grp,\n      fill = grp,\n      label = grp,\n      color = NA\n    ),\n    concavity = 4,\n    expand = unit(2, \"mm\"),\n    alpha = 0.25,\n    label.fontsize = 12\n  ) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  # If else statement only labels points that meet the condition\n  geom_node_text(aes(label = ifelse(bw > 40,\n                                    as.character(name),\n                                    NA_character_)), size = 4) +\n  theme_graph() +\n  theme(legend.position = \"none\")"},{"path":"Visualization.html","id":"Figure_6_5","chapter":"Section 5 Network Visualization","heading":"Figure 6.5: Interactive Layout","text":"Figure 6.5. example network graph two simple user defined layouts created interactively.Figure 6.5 produced NetDraw creating simple network taking screen shots two configurations nodes. options creating similar figures R. simplest use igraph network object tkplot function. function brings window lets drag move nodes (without initial algorithmic layout) ’re done can assign new positions variable use plotting. Use data follow along.\nNote running package browser via binder,\nfunction work permission open\ntkplot virtual server. follow along plotting \nfigure can use pre-determined locatoins reading \nfile load(file=“data/Coords.Rdata”)\nbring window like example click “Close” automatically create variables node location information plotting.","code":"\nlibrary(igraph)\nlibrary(intergraph)\n\nload(\"data/Peeples2018.Rdata\")\n\nCibola_i <- asIgraph(BRnet)\n\nlocs <- tkplot(Cibola_i)\nCoords <- tkplot.getcoords(locs)\nplot(Cibola_i, layout=Coords)"},{"path":"Visualization.html","id":"Figure_6_6","chapter":"Section 5 Network Visualization","heading":"Figure 6.6: Absolute Geographic Layout","text":"Fig. 6.6. Map major Roman roads major settlements Iberian Peninsula, () roads mapped along actual geographic paths (b) roads shown simple line segments nodes.\nfigure appears book originally created using GIS software possible prepare quite similar figure R using tools outlined . reproduce results presented need download node information file road edge list. created script called map_net.R produce similar maps supplied network object file node locations lat/long coordinates. information R works geographic data see spatial networks section document.","code":"\n\n\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\n\nedges1 <- read.csv(\"data/Hispania_roads.csv\", header = T)\nedges1 <- edges1[which(edges1$Weight > 25), ]\nnodes <- read.csv(\"data/Hispania_nodes.csv\", header = T)\nnodes <- nodes[which(nodes$Id %in% c(edges1$Source, edges1$Target)), ]\n\nroad_net <-\n  graph_from_edgelist(as.matrix(edges1[, 1:2]), directed = FALSE)\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(road_net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\n\nmyMap <- get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                       maptype = \"watercolor\",\n                       zoom = 6)\n\nggmap(myMap) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 1.5,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"Visualization.html","id":"Figure_6_7","chapter":"Section 5 Network Visualization","heading":"Figure 6.7: Distorted Geographic Layout","text":"Figure 6.7. ceramic similarity network San Pedro River Valley Arizona shows challenges creating geographic network layouts. () Shows sites original locations whereas (b) shifts locations improve visibility network structure. Note distorted geographic layout retains basic relationships among nodes altering locations slightly.Unfortunately first map contains real site locations share data . second map can still reproduced given nothing code . difference required produce Figure 6.7a replace coord site coordinates actual site locations. coord object used created taking original site locations applying jitter function, jitters x y coordinates specified amount.\ncode use scalebar function within\nggsn package draw scale map. Note \nprovide coordinate locations decimal degrees minimum\nvalues x y axis want scale appear, \ngeographic transformation (see Spatial\nNetworks details), style scale. See\n?scalebar options. also north\nfunction package lets generate north arrows.\n","code":"\nlibrary(igraph)\nlibrary(sf)\nlibrary(ggmap)\nlibrary(ggsn)\nlibrary(ggrepel)\nlibrary(ggpubr)\n\nload(\"data/Figure6_7.Rdata\")\n# g.net - igraph network object of San Pedro sites based on\n# ceramic similarity\n\n# Define coordinates of \"jittered\" points\n# These points were originally created using the \"jitter\" function\n# until a reasonable set of points were found.\ncoord <- c(-110.7985, 32.97888,\n-110.7472, 32.89950,\n-110.6965, 32.83496,\n-110.6899, 32.91499,\n-110.5508, 32.72260,\n-110.4752, 32.60533,\n-110.3367, 32.33341,\n-110.5930, 32.43487,\n-110.8160, 32.86185,\n-110.6650, 32.64882,\n-110.4558, 32.56866,\n-110.6879, 32.60055,\n-110.7428, 32.93124,\n-110.4173, 32.34401,\n-110.7000, 32.73344)\n\nattr <- c(\"Swingle's Sample\",\"Ash Terrace\",\"Lost Mound\",\n          \"Dudleyville Mound\",\"Leaverton\",\"High Mesa\",\n          \"Elliott Site\",\"Bayless Ruin\",\"Flieger\",\n          \"Big Bell\",\"111 Ranch\",\"Twin Hawks\",\"Artifact Hill\",\n          \"Jose Solas Ruin\",\"Wright\")\n\n\n# Convert coordinates to data frame\nzz <- as.data.frame(matrix(coord, nrow = 15, byrow = TRUE))\ncolnames(zz) <- c('x', 'y')\n\n# Get basemap \"terrain-background\" data for map in black and white\nbase3 <- get_stamenmap(\n  bbox = c(-111, 32.2, -110, 33.1),\n  zoom = 10,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(g.net)\n\n# Create dataframe of beginning and ending points of edges\nedges2 <- data.frame(zz[edgelist[, 1], ], zz[edgelist[, 2], ])\ncolnames(edges2) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Plot jittered coordinates on map\nfigure_6_7 <- ggmap(base3, darken = 0.35) +\n  geom_segment(\n    data = edges2,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    size = 1\n  ) +\n  geom_point(\n    data = zz,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'red',\n    size = 5,\n    show.legend = F\n  ) +\n  geom_text_repel(aes(x = x, y = y, label = attr), data = zz, size = 3) +\n  scalebar(\n    x.min = -111,\n    x.max = -110.75,\n    y.min = 32.25,\n    y.max = 33,\n    dist = 10,\n    dist_unit = \"km\",\n    st.bottom = FALSE,\n    transform = TRUE,\n    model = \"WGS84\"\n  ) +\n  theme_void()\n\nfigure_6_7"},{"path":"Visualization.html","id":"Figure_6_8","chapter":"Section 5 Network Visualization","heading":"Figure 6.8: Graph Layout Algorithms","text":"Fig. 6.8. Several different graph layouts using Bronze Age Aegean geographic network (Evans et al. 2011). graph, nodes scaled based betweenness centrality colour-coded based clusters defined using modularity maximisation.code thing change plot layout argument ggraph. See CRAN project page ggraph information available layouts. plot clusters color make easier track differences layout options.","code":"\n\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\nlibrary(igraphdata)\nlibrary(graphlayouts)\nlibrary(sf)\nlibrary(ggmap)\n\n# Load igraph aegean_net data\n#data(aegean_net)\naegean <- read.csv(\"data/aegean.csv\", row.names = 1, header = T)\naegean_dist <- aegean\naegean_dist[aegean_dist > 124] <- 0\naegean_dist[aegean_dist > 0] <- 1\naegean_net <- graph_from_adjacency_matrix(as.matrix(aegean_dist))\n\n# Define cluster membership and betweenness centrality for plotting\ngrp <- as.factor(cluster_optimal(aegean_net)$membership)\nbw <- as.numeric(igraph::betweenness(aegean_net))\n\n# Create geographic network and plot\nnodes <- read.csv('data/aegean_locs.csv')\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes,\n           coords = c(\"Longitude\", \"Latitude\"),\n           crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\nmyMap <- get_stamenmap(bbox = c(22, 34.5, 29, 38.8),\n                       zoom = 8,\n                       maptype = \"terrain-background\")\n\n# Extract edgelist from network object for road_net\nedgelist1 <- get.edgelist(aegean_net)\n\n# Create dataframe of beginning and ending points of edges\nedges1 <- as.data.frame(matrix(NA, nrow(edgelist1), 4))\ncolnames(edges1) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist1)) {\n  edges1[i, ] <-\n    c(nodes[which(nodes$Name == edgelist1[i, 1]), ]$Longitude,\n      nodes[which(nodes$Name == edgelist1[i, 1]), ]$Latitude,\n      nodes[which(nodes$Name == edgelist1[i, 2]), ]$Longitude,\n      nodes[which(nodes$Name == edgelist1[i, 2]), ]$Latitude)\n}\n\ngeo_net <- ggmap(myMap) +\n  geom_segment(\n    data = edges1,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y, size = bw, fill = grp),\n    alpha = 0.8,\n    shape = 21,\n    show.legend = F\n  ) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  ggtitle(\"Geographic\") +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Multidimensional Scaling Layout with color by cluster and node\n# size by betweenness\nset.seed(435353)\ng.mds <- ggraph(aegean_net, layout = \"mds\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Multi-Dimensional Scaling\") +\n  theme(legend.position = \"none\")\n\n# Fruchterman-Reingold Layout with color by cluster and node size\n# by betweenness\nset.seed(435353)\ng.fr <- ggraph(aegean_net, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Fruchterman-Reingold\") +\n  theme(legend.position = \"none\")\n\n# Kamada-Kawai Layout with color by cluster and node size by betweenness\nset.seed(435353)\ng.kk <- ggraph(aegean_net, layout = \"kk\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21 ,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Kamada-Kawai\") +\n  theme(legend.position = \"none\")\n\n# Radial Centrality Layout with color by cluster and node size by\n# betweenness\nset.seed(435353)\ng.cent <- ggraph(aegean_net,\n                 layout = \"centrality\",\n                 centrality = igraph::betweenness(aegean_net)) +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Radial Centrality\") +\n  theme(legend.position = \"none\")\n\n# Spectral Layout with color by cluster and node size by betweenness\nu1 <- layout_with_eigen(aegean_net)\ng.spec <- ggraph(aegean_net,\n                 layout = \"manual\",\n                 x = u1[, 1],\n                 y = u1[, 2]) +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  \n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Spectral\") +\n  theme(legend.position = \"none\")\n\n\nfigure_6_8 <-\n  ggarrange(geo_net,\n            g.mds,\n            g.fr,\n            g.kk,\n            g.cent,\n            g.spec,\n            ncol = 2,\n            nrow = 3)\nfigure_6_8"},{"path":"Visualization.html","id":"Figure_6_9","chapter":"Section 5 Network Visualization","heading":"Figure 6.9: Heirarchical Graph Layouts","text":"Fig. 6.9. Examples visualisations based hierarchical graph data. () Graph nodes colour-coded hierarchical level. (b) Bubble plot nodes scaled proportional sub-group size. (c) Dendrogram hierarchical cluster data. (d) Radial graph edges bundled based similarity relations. Edges colour-coded red origin purple destination help visualise direction.graphs based hierarchical graph created assigning nodes leaves hierarchical cluster analysis performed Cibola ceramic technological cluster data. data 6.9d randomly generated following example R Graph Gallery. Use data follow along.","code":"\n# initialize libraries\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ape)\nlibrary(RColorBrewer)\nlibrary(ggpubr)\n\nload(file = \"data/Figure6_9.Rdata\")\n\nset.seed(4353543)\nh1 <- ggraph(h_graph, 'circlepack') +\n  geom_edge_link() +\n  geom_node_point(aes(colour = depth, size = (max(depth) - depth) / 2),\n                  show.legend = F) +\n  scale_color_viridis() +\n  theme_graph() +\n  coord_fixed()\n\nset.seed(643346463)\nh2 <- ggraph(h_graph, 'circlepack') +\n  geom_node_circle(aes(fill = depth),\n                   size = 0.25,\n                   n = 50,\n                   show.legend = F) +\n  scale_fill_viridis() +\n  theme_graph() +\n  coord_fixed()\n\nh3 <- ggraph(h_graph, 'dendrogram') +\n  geom_node_point(aes(filter = leaf),\n                  color = 'blue' ,\n                  alpha = 0.7,\n                  size = 3) +\n  theme_graph() +\n  geom_edge_link()\n\nh4 <-\n  ggraph(sub_grp_graph, layout = 'dendrogram', circular = TRUE) +\n  geom_conn_bundle(\n    data = get_con(from = from, to = to),\n    alpha = 0.2,\n    width = 0.9,\n    tension = 0.9,\n    aes(colour = ..index..)\n  ) +\n  scale_edge_colour_distiller(palette = \"RdPu\") +\n  geom_node_point(aes(\n    filter = leaf,\n    x = x * 1.05,\n    y = y * 1.05,\n    colour = group\n  ), size = 3) +\n  scale_colour_manual(values = rep(brewer.pal(9, \"Paired\") , 30)) +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nfigure_6_9 <- ggarrange(\n  h1,\n  h2,\n  h3,\n  h4,\n  ncol = 2,\n  nrow = 2,\n  labels = c('(a)', '(b)', '(c)', '(d)')\n)\nfigure_6_9"},{"path":"Visualization.html","id":"Figure_6_10","chapter":"Section 5 Network Visualization","heading":"Figure 6.10: Be kind to the color blind","text":"Fig. 6.10. Examples simple network graph colour-coded clusters. top left example shows unmodified figure remaining examples simulate figure might look like people various kinds colour vision deficiencies.function calls script modified colorblindr package Claus Wilke available . function cv2_grid take ggplot object outputs 2 x 2 grid original figure examples figure might look like people three common forms color vision deficiency. Use data script follow along.","code":"\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(colorspace)\nsource(\"scripts/colorblindr.R\")\n\nload(\"data/Peeples2018.Rdata\")\n\n# Create igraph object for plots below\nnet <- asIgraph(BRnet)\n\nset.seed(347)\ng1 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"gray\", alpha = 0.7) +\n  geom_node_point(\n    aes(fill = site_info$Region),\n    shape = 21,\n    size = igraph::degree(net) / 2,\n    alpha = 0.5\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\ncvd_grid2(g1)"},{"path":"Visualization.html","id":"Figure_6_11","chapter":"Section 5 Network Visualization","heading":"Figure 6.11: Node Symbol and Color Schemes","text":"Fig. 6.11. Examples different node colour symbol schemes. Note adding colour size eases identification particular values, particular closely spaced points. Using transparency can similarly aid showing multiple overlapping nodes.version appears book compiled labeled Adobe Illustrator using output created .","code":"\nlibrary(scales)\n\nplot(\n  x = 1:5,\n  y = rep(2, 5),\n  pch = 16,\n  cex = seq(5:10),\n  col = \"blue\",\n  ylim = c(0, 4),\n  bty = 'n',\n  xaxt = 'n',\n  yaxt = 'n',\n  xlab = '',\n  ylab = ''\n)\npoints(\n  x = 1:5,\n  y = rep(1.5, 5),\n  pch = 21,\n  cex = seq(5:10),\n  bg = heat.colors(5, rev = T)\n)\npoints(\n  x = 1:5,\n  y = rep(1, 5),\n  pch = c(1, 2, 3, 4, 5),\n  cex = seq(5:10),\n  bg = 'skyblue',\n  col = 'blue',\n  lwd = 2\n)\n\nset.seed(34456)\nx <- rnorm(15, 1, 0.5)\ny <- rnorm(15, 1, 0.5)\nxy <- cbind(x, y)\nxy2 <- cbind(x + 5, y)\nxy3 <- cbind(x + 10, y)\nxy4 <- cbind(x + 15, y)\nxy5 <- cbind(x + 20, y)\n\nsize <- sample(c(5, 6, 7, 8, 9), size = 15, replace = T)\nsize <- size - 4\n\nh.col <- heat.colors(5, rev = T)\n\nplot(\n  xy[order(size, decreasing = T), ],\n  pch = 16,\n  col = 'blue',\n  cex = size[order(size, decreasing = T)],\n  xlim = c(0, 22),\n  ylim = c(-1, 3),\n  bty = 'n',\n  xaxt = 'n',\n  yaxt = 'n',\n  xlab = '',\n  ylab = ''\n)\npoints(xy2[order(size, decreasing = T), ],\n       pch = 21,\n       bg = h.col[size[order(size, decreasing = T)]],\n       cex = size[order(size, decreasing = T)])\npoints(xy3[order(size, decreasing = T), ],\n       pch = size[order(size, decreasing = T)],\n       col = 'blue',\n       cex = size[order(size, decreasing = T)])\npoints(\n  xy4[order(size, decreasing = T), ],\n  pch = 21,\n  col = 'gray66',\n  bg = alpha('blue', 0.7),\n  cex = size[order(size, decreasing = T)]\n)\npoints(xy5[order(size, decreasing = T), ],\n       pch = 21,\n       bg = alpha(h.col[size[order(size, decreasing = T)]], 0.7),\n       cex = size[order(size, decreasing = T)])"},{"path":"Visualization.html","id":"Figure_6_12","chapter":"Section 5 Network Visualization","heading":"Figure 6.12: Image for Node","text":"Fig. 6.12. Network graph showing similarity among carved faces Banés, Holguín province, Cuba. Nodes depicted objects question edges represent shared attributes numbers indicating number shared attributes pair faces.Figure 6.12 used permission Angus Mol original produced 2014 book.","code":""},{"path":"Visualization.html","id":"Figure_6_13","chapter":"Section 5 Network Visualization","heading":"Figure 6.13: Images for Nodes","text":"Fig. 6.13. Two-mode network ceramics sites San Pedro Valley ceramic ware categories represented graphic example type.version Figure 6.13 Brughmans Peeples (2022) book originally created NetDraw modified add node pictures Adobe Photoshop. approach preferred produced higher resolution consistent images graphics produce directly R particular feature. , however, possible use images place nodes R networks example illustrates.found practice feature R works best simple icons. using high resolution images lots color detail images works better create initial image format something like R NetDraw modify network graphical editing software fact.place example book, demonstrate can use image files R create nodes pictures. can download data follow along. .RData file also includes images used R format code used read .png images shown commented .want use images one mode network can follow sample using data. Note line V(Cibola_i)$raster can either assign single image image node network.","code":"\nlibrary(png)\nlibrary(igraph)\n\nload(\"data/Figure6_13.Rdata\")\n# two_mode_net - igraph two mode network object\n# img.1 <- readPNG(\"images/sites.png\")\n#img.2 <- readPNG(\"images/ceramic.png\")\n\n# Set Vector property to images by mode\n# Note that if you want to set a different image\n# for each node you can simply create a long list\n# containing image names for node type 1 followed\n# by image names for node type 2.\nV(two_mode_net)$raster <- list(img.1, img.2)[V(two_mode_net)$type + 1]\n\nset.seed(34673)\nplot(\n  two_mode_net,\n  vertex.shape = \"raster\",\n  vertex.label = NA,\n  vertex.size = 16,\n  vertex.size2 = 16,\n  edge.color = \"gray\"\n)\nlibrary(png)\nlibrary(igraph)\n\nCibola <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = TRUE,\n           row.names = 1)\n\n# Create network in igraph format\nCibola_i <- igraph::graph_from_adjacency_matrix(as.matrix(Cibola),\n                                                mode = \"undirected\")\n# Set Vector property to images using a list with a length\n# determined by the number of nodes in the network.\n# Here we divide the northern and southern portions of the\n# study area.\nV(Cibola_i)$raster <- list(img.2, img.1, img.2, img.2,\n                           img.1, img.2, img.2, img.1,\n                           img.1, img.1, img.2, img.2,\n                           img.2, img.1, img.1, img.2,\n                           img.1, img.1, img.1, img.1,\n                           img.1, img.2, img.1, img.1,\n                           img.2, img.1, img.2, img.2,\n                           img.2, img.2, img.1)\n\nset.seed(34673)\nplot(\n  Cibola_i,\n  vertex.shape = \"raster\",\n  vertex.label = NA,\n  vertex.size = 16,\n  vertex.size2 = 16,\n  edge.color = \"gray\"\n)"},{"path":"Visualization.html","id":"Figure_6_14","chapter":"Section 5 Network Visualization","heading":"Figure 6.14: Edge Thickness and Color","text":"Fig. 6.14. random weighted graph edge line thickness color used indicate weight 5 categories.can download data follow along.","code":"\n\n\nlibrary(igraph)\nlibrary(ggraph)\n\nload(\"data/Figure6_14.Rdata\")\n\nedge.cols <- colorRampPalette(c('gray', 'darkblue'))(5)\n\nset.seed(43644)\nggraph(g.net, layout = \"fr\") +\n  geom_edge_link0(aes(width = E(g.net)$weight),\n                  edge_colour = edge.cols[E(g.net)$weight]) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(g.net) + 3,\n                  fill = 'red') +\n  theme_graph() +\n  theme(legend.title = element_blank()) "},{"path":"Visualization.html","id":"Figure_6_15","chapter":"Section 5 Network Visualization","heading":"Figure 6.15: Edge Direction","text":"Fig. 6.15. Two methods displaying directed ties using arrows (left) arcs (right). simple networks represent relationships shown adjacency matrix centre.See tutorial edges details using arrows ggraph. use grid.table function gridExtra package plot tabular data figure.","code":"\n\nlibrary(igraph)\nlibrary(grid)\nlibrary(gridExtra)\n\ng <- graph( c(\"A\", \"B\",\n              \"B\", \"C\",\n              \"A\", \"C\",\n              \"A\", \"A\",\n              \"C\",\"B\",\n              \"D\",\"C\"))\n\nlayout(matrix(c(1, 1, 2, 3, 3), 1, 5, byrow = TRUE))\n\nset.seed(4355467)\nplot(\n  g,\n  edge.arrow.size = 1,\n  vertex.color = \"black\",\n  vertex.size = 50,\n  vertex.frame.color = \"gray\",\n  vertex.label.color = \"white\",\n  edge.width = 2,\n  vertex.label.cex = 2.75,\n  vertex.label.dist = 0,\n  vertex.label.family = 'Helvetica'\n)\n\nplot.new()\nadj1 <- as.data.frame(as.matrix(as_adjacency_matrix(g)))\ntt2 <- ttheme_minimal(base_size = 25)\ngrid.table(adj1, theme = tt2)\n\nplot(\n  g,\n  edge.arrow.size = 1.25,\n  vertex.color = \"black\",\n  vertex.size = 50,\n  vertex.frame.color = \"gray\",\n  vertex.label.color = \"white\",\n  edge.width = 2,\n  edge.curved = 0.3,\n  vertex.label.cex = 2.75,\n  vertex.label.dist = 0,\n  vertex.label.family = 'Helvetica'\n) "},{"path":"Visualization.html","id":"Figure_6_16","chapter":"Section 5 Network Visualization","heading":"Figure 6.16: Edge Binarization","text":"Fig. 6.16. networks show data based similarity scores among sites U.S. Southwest (ca. AD 1350–1400) different cutoff binarization.following chunk code uses ceramic similarity data SWSN database defines three different cutoff thresholds defining edges. Note difference thresh argument event2dichot function.","code":"\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_16.Rdata\")\n# Contains similarity matrix AD1350sim\n\nAD1350sim_cut0_5 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.25),\n  directed = FALSE\n))\nAD1350sim_cut0_75 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.5),\n  directed = FALSE\n))\nAD1350sim_cut0_9 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.75),\n  directed = FALSE\n))\n\nset.seed(4637)\ng0.50 <- ggraph(AD1350sim_cut0_5, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.25\") +\n  theme_graph()\n\nset.seed(574578)\ng0.75 <- ggraph(AD1350sim_cut0_75, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.50\") +\n  theme_graph()\n\nset.seed(7343)\ng0.90 <- ggraph(AD1350sim_cut0_9, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.75\") +\n  theme_graph()\n\nggarrange(g0.50, g0.75, g0.90, nrow = 1, ncol = 3)"},{"path":"Visualization.html","id":"Figure_6_17","chapter":"Section 5 Network Visualization","heading":"Figure 6.17: Edge Bundling","text":"Fig. 6.17. Network map ceramic similarity U.S. Southwest/Mexican Northwest ca. AD 1350–1400 based hammer bundling algorithm. Note figure look somewhat different one book locations sites jittered data security\nfunction relies edgebundle package \ncombine sets nodes similar relations single paths. \npackage also requires install reticulate\npackage connects R Python 3.7 must also Python\ninstalled computer datashader Python\nlibraries.\n\nNote require 1.4 GB disk space several\nminutes make sure adequate space time \nbeginning.\ninstall instance Python required libraries can use following call:Use data follow along.","code":"\nedgebundle::install_bundle_py(method = \"auto\", conda = \"auto\")\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(edgebundle)\nlibrary(ggmap)\nlibrary(sf)\n\nload('data/Figure6_17.Rdata')\n# attr.dat - site attribute data\n# g.net - igraph network object\nload('data/map.RData')\n# map3 - state outlines\n# base2 - terrain basemap in black and white\n\nlocations_sf <- st_as_sf(attr.dat, coords = c(\"V3\", \"V4\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\nhbundle <- edge_bundle_hammer(g.net, xy, bw = 0.9, decay = 0.2)\n\nggmap(base2, darken = 0.15) +\n  geom_polygon(\n    data = map3,\n    aes(x, y,\n        group = Group.1),\n    col = \"black\",\n    size = 0.5,\n    fill = NA\n  ) +\n  geom_path(\n    data = hbundle,\n    aes(x, y, group = group),\n    color = \"white\",\n    show.legend = F\n  ) +\n  geom_path(\n    data = hbundle,\n    aes(x, y, group = group),\n    color = \"darkorchid4\",\n    show.legend = F\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.4,\n    size = 2.5,\n    show.legend = F\n  ) +\n  theme_graph()"},{"path":"Visualization.html","id":"Figure_6_18","chapter":"Section 5 Network Visualization","heading":"Figure 6.18: Group-in-a-box","text":"Fig. 6.18. Example group---box custom graph layout created NodeXL based ceramic similarity data U.S. Southwest/Mexican Northwest ca. AD 1350-1400.group---box network format , far aware, currently implemented NodeXL platform. software package add-Microsoft Excel allows creation analysis network graphs using wide variety useful visualization tools. produce “Group---box” layout simply need paste set edge list values NodeXL Excel Template, define groups (based algorithm vertex attribute), sure select “Layout graph’s groups box” layout options.details use NodeXL see extensive documentation online. commercial versions software available group---box example shown can produced free version.download Excel workbook set example provided book click . open Excel, ask can install necessary extensions. Say yes continue replicate results book.","code":""},{"path":"Visualization.html","id":"Figure_6_19","chapter":"Section 5 Network Visualization","heading":"Figure 6.19: Weighted Adjacency Matrix","text":"Fig. 6.19. Dual display network graph associated weighted adjacency matrix based Peeples (2018) ceramic technology data.plot uses sub-set Cibola technological similarity network data produce typical node-link diagram associated weighted adjacency matrix. Use data follow along.","code":"\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_19.Rdata\")\n# graph6.18 - graph object in igraph format\n# node_list - dataframe with node details\n# edge_list - edge_list which contains information on groups\n# and edge weight\n\nset.seed(343645)\ncoords <- layout_with_fr(graph6.18)\ng1 <- ggraph(graph6.18, \"manual\",\n             x = coords[, 1],\n             y = coords[, 2]) +\n  geom_edge_link(aes(),\n                 color = 'gray75',\n                 alpha = 0.5,\n                 show.legend = F) +\n  geom_node_point(aes(color = as.factor(V(graph6.18)$comm), size = 5),\n                  show.legend = F) +\n  scale_color_manual(values = c('#8da0cb', '#66c2a5', '#fc8d62'),\n                     guide = F) +\n  theme_graph()\n\n# Set order of nodes to order in which they appear in the y axis in\n# the network graph above\nname_order <- node_list[order(coords[, 2]), ]$name\n\n# Adjust the 'to' and 'from' factor levels so they are equal\n# to this complete list of node names\nplot_data <- edge_list %>% mutate(to = factor(to, levels = name_order),\n                                  from = factor(from, levels = rev(name_order)))\n\n# Now run the ggplot code again\n# Create the adjacency matrix plot\ng2 <- ggplot(plot_data, aes(\n  x = from,\n  y = to,\n  fill = group,\n  alpha = (weight * 1.5)\n)) +\n  geom_tile() +\n  theme_bw() +\n  scale_x_discrete(drop = FALSE) +\n  scale_y_discrete(drop = FALSE) +\n  theme(\n    axis.text.x = element_text(\n      angle = 270,\n      hjust = 0,\n      size = rel(0.5)\n    ),\n    axis.text.y = element_text(size = rel(0.5)),\n    aspect.ratio = 1,\n    legend.position = \"none\"\n  ) +\n  xlab('') +\n  ylab('') +\n  scale_fill_manual(values = c('#8da0cb', '#66c2a5', '#fc8d62', 'black'),\n                    guide = F)\n\n# Combine into a single figure\nfigure6_19 <- ggarrange(g1, g2, nrow = 1)\n\nfigure6_19"},{"path":"Visualization.html","id":"Figure_6_20","chapter":"Section 5 Network Visualization","heading":"Figure 6.20: Nodetrix Diagram","text":"Fig. 6.20. Nodetrix visualisation Peeples (2018) ceramic technological data showing one dense cluster adjacency matrix remainder graph node-link diagram.Nodetrix visualizationThis Nodetrix interactive visualization created using Javascript implementation available GitHub user jdfekete, Jean-Daniel Fekete one original authors method (Henry et al. 2007).details running Javascript program described GitHub page beyond scope tutorial. illustrate , however, can export R *.json format required program using d3r rjson packages. code expects igraph network object.see live version tool action check .","code":"\n\nlibrary(d3r)\nlibrary(rjson)\n\n# net <- igraph network object\n\ndata_json <- d3_igraph(net)\n\n\ndj <- jsonlite::fromJSON(data_json)\ndj$links[[1]] <- as.numeric(dj$links[[1]])\ndj$links[[2]] <- as.numeric(dj$links[[2]])\ndj <- jsonlite::toJSON(dj)\n\nwrite(dj, \"network.json\")"},{"path":"Visualization.html","id":"Figure_6_21","chapter":"Section 5 Network Visualization","heading":"Figure 6.21: The Filmstrip Approach","text":"Fig. 6.21. demonstration flimstrip approach plotting longitudinal network data. data represent networks ceramic similarity San Pedro Valley Arizona three consecutive 50-year intervals.Use data replicate figures shown .","code":"\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_21.Rdata\")\n\nset.seed(4543)\ng1 <- ggraph(AD1250net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1250-1300\") +\n  theme_graph()\n\nset.seed(4543)\ng2 <- ggraph(AD1300net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1300-1350\") +\n  theme_graph()\n\n\nset.seed(4543)\ng3 <- ggraph(AD1350net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1350-1400\") +\n  theme_graph()\n\nfigure6_21 <- ggarrange(g1, g2, g3, nrow = 1)\n\nfigure6_21"},{"path":"Visualization.html","id":"Figure_6_22","chapter":"Section 5 Network Visualization","heading":"Figure 6.22: Similtaneous Display","text":"Fig. 6.22. Examples simultaneous display two consecutive intervals San Pedro valley ceramic similarity network. () network using Kamada-Kawai algorithm edges colour-coded based time period. (b) arc plot showing ties consecutive intervals line.Use data follow along. Note first plot add colour argument aes() statement include period designation.","code":"\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\nlibrary(ggrepel)\n\nload(\"data/Figure6_22.Rdata\")\n\ngraph <- graph_from_data_frame(net.all)\n\nxy <- layout_with_kk(graph)\nxy <- cbind(sites,xy)\nxy <- as.data.frame(xy)\ncolnames(xy) <- c('site','x','y')\nxy$x <- as.numeric(xy$x)\nxy$y <- as.numeric(xy$y)\n\nset.seed(6436)\nsimilt.net <- ggraph(graph,layout=\"manual\",\n                     x=xy$x, y=xy$y) +\n  geom_edge_link(aes(colour = Period), alpha=0.3, width=1) +\n  geom_node_point(size=3) +\n  theme_graph() +\n  theme(legend.title = element_text(size=rel(1)),\n        legend.text = element_text(size=rel(1)),\n        legend.key.height= unit(1, 'cm'),\n        legend.key.width= unit(2, 'cm'))\n\n# Make the graph\nlin.net <- ggraph(SPgraph, layout=\"linear\") +\n  geom_edge_arc(edge_colour=\"black\", edge_alpha=0.4, edge_width=0.3,\n                fold=F, strength=1) +\n  geom_node_point(aes(size=igraph::degree(SPgraph)), col='red',\n                  alpha=0.5) +\n  scale_size_continuous(range=c(4,8)) +\n  theme_graph() +\n  theme(legend.title=element_blank(),\n        plot.margin=unit(c(0,0,0.4,0), \"null\"),\n        panel.spacing=unit(c(0,0,3.4,0), \"null\")) +\n  annotate(\"text\", x = 3, y = 3, label = \"AD 1250-1300\",\n           size=4) +\n  annotate(\"text\", x = 3, y = -3, label = \"AD 1300-1350\",\n           size=4)\n\nsimilt.net\n\nlin.net"},{"path":"Visualization.html","id":"Figure_6_23","chapter":"Section 5 Network Visualization","heading":"Figure 6:23: Timelines and Time Prisms","text":"Fig. 6.23. plot shows two displays ceramic similarity data Sonoran Desert U.S. Southwest time prism (top) timeline (bottom).examples drawn work outline workshop focused temporal networks Skye Bender-deMoll. Click see detailed workshop overview. functions animating plotting temporal networks used come ndtv networkDynamic packages.\nNote data required list object contains multiple\ntemporal slices network network format \nstatnet suite packages. network must \nnumber nodes node identifiers must used every\nnetwork list.\nUse data follow along.","code":"\n\nlibrary(networkDynamic)\nlibrary(ndtv)\nlibrary(GISTools)\nlibrary(statnet)\n\nload(\"data/Figure6_23.Rdata\")\n\n# create networkDynamic object from list containing multiple\n# sna network objects\nSanPedro <- networkDynamic(network.list = SP_nets)\n#> Neither start or onsets specified, assuming start=0\n#> Onsets and termini not specified, assuming each network in network.list should have a discrete spell of length 1\n#> Argument base.net not specified, using first element of network.list instead\n#> Created net.obs.period to describe network\n#>  Network observation period info:\n#>   Number of observation spells: 1 \n#>   Maximal time range observed: 0 until 5 \n#>   Temporal mode: discrete \n#>   Time unit: step \n#>   Suggested time increment: 1\n\n# Compute animation\ncompute.animation(SanPedro, default.dist = 7, animation.mode = 'MDSJ')\n#> slice parameters:\n#>   start:0\n#>   end:5\n#>   interval:1\n#>   aggregate.dur:1\n#>   rule:latest\n#> \n#> Do you want to automatically download and install the MDSJ Java library? (y/N): \n#> Do you want to automatically download and install the MDSJ Java library? (y/N): \n#> Do you want to automatically download and install the MDSJ Java library? (y/N): \n#> Do you want to automatically download and install the MDSJ Java library? (y/N): \n#> Do you want to automatically download and install the MDSJ Java library? (y/N):\n\n# Define colors for regions\nmycol <- c(\n  add.alpha('#1b9e77', 0.75),\n  add.alpha('#d95f02', 0.75),\n  add.alpha('#7570b3', 0.75),\n  add.alpha('#e7298a', 0.75),\n  add.alpha('#66a61e', 0.75),\n  add.alpha('#e6ab02', 0.75)\n)\n\n# Plot time prism\nset.seed(364467)\ntimePrism(\n  SanPedro,\n  at = c(1, 2, 3),\n  displaylabels = F,\n  planes = TRUE,\n  display.isolates = F,\n  label.cex = 0.5,\n  usearrows = F,\n  vertex.cex = 0.5,\n  edge.col = 'gray50',\n  vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)]\n)\n\n# Plot proximity timeline\nset.seed(235254)\nproximity.timeline(\n  SanPedro,\n  default.dist = 10,\n  mode = 'sammon',\n  labels.at = 17,\n  vertex.cex = 4,\n  render.edges = F,\n  vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)],\n  chain.direction = 'reverse',\n  xaxt = 'n'\n)"},{"path":"Visualization.html","id":"Figure_6_24","chapter":"Section 5 Network Visualization","heading":"Figure 6.24: Animation","text":"Fig. 6.24. example three frames network animation.Figure 6.24 created using ndtv package data produced figure 6.23. simply rendered animation output interactive html widget. figure book represents 3 screen shots interactive plot. See ndtv documentation details.","code":"\nrender.d3movie(SanPedro, vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)])\nrender.d3movie(SanPedro, vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)],\n               output.mode = \"inline\")"},{"path":"Visualization.html","id":"Figure_6_25","chapter":"Section 5 Network Visualization","heading":"Figure 6.25: Interactive Networks","text":"Fig. 6.25. example dynamic network visual created R. Notice nodes edges responding movement edge cursor drop menu allows selection nodes group.example closely follow example provided Static dynamic network visualization R workshop documents online using Cibola technological similarity data instead.","code":"\n\nlibrary(visNetwork)\nlibrary(networkD3)\nlibrary(igraph)\n\nload(\"data/Figure6_25.Rdata\") # Contains an igraph graph object\n\n# Use igraph to make the graph and find membership\nclust <- cluster_louvain(graph)\nmembers <- membership(clust)\n\n# Convert to object suitable for networkD3\ngraph_d3 <- igraph_to_networkD3(graph, group = members)\n\n# Modify interactive network to allow highlighting by groups, etc.\nlinks <- graph_d3$links\ncolnames(links) <- c('from', 'to')\nlinks[, 1] <- links[, 1] + 1\nlinks[, 2] <- links[, 2] + 1\nnodes <- graph_d3$nodes\ncolnames(nodes)[1] <- 'id'\n\n# Create node and link objects in d3 format\nvis.nodes <- nodes\nvis.links <- links\n\n# Set visualization options\nvis.nodes$shape  <- \"dot\"\nvis.nodes$shadow <- TRUE # Nodes will drop shadow\nvis.nodes$borderWidth <- 2 # Node border width\nvis.nodes$color.background <- c(\"slategrey\", \"tomato\", \"gold\",\n                                \"purple\")[nodes$group]\nvis.nodes$color.border <- \"black\"\nvis.nodes$color.highlight.background <- \"orange\"\nvis.nodes$color.highlight.border <- \"darkred\"\n\n# Create network in d3 format\nvisnet <- visNetwork(vis.nodes, vis.links)\n\n# View network with visualization options active\nvisOptions(visnet, highlightNearest = TRUE, selectedBy = \"group\")"},{"path":"Visualization.html","id":"Figure_6_26","chapter":"Section 5 Network Visualization","heading":"Figure 6.26: SWSN Example 1","text":"Fig. 6.26. Networks time SWSN project area (Mills et al. 2013).figure original plot Mills et al. 2013 produced R compiled modified using Adobe Illustrator. First regional color scheme defined time period plotted using color scheme. Illustrator components arranged rough geographic positions isolates placed margin. Click link info Southwest Social Networks ProjectThe following chunk code reproduces Figure 6.26 one time period (AD1300-1350). Download data follow along.","code":"\n\nlibrary(statnet)\nlibrary(ggraph)\n\nload(\"data/Figure6_26.Rdata\")\n\n# Create sna network object\nnet <-\n  network(event2dichot(sim, method = \"absolute\", thresh = 0.75), \n          directed = F)\n\n# define color scheme. colors listed in order based on the \n# factor attr$Macro\nmyCols <- c(\"#000738\", \"#ffa1a1\", \"#ad71d8\", \"#016d1b\", \"#00ff30\",\n            \"#92d8ff\", \"#ffffff\", \"#adadad\", \"#846b00\", \"#ff0000\",\n            \"#5273dd\", \"#946a43\", \"#a00000\", \"#f97c00\", \"#00ffec\",\n            \"#ffff3e\", \"#824444\", \"#00ba89\", \"#00ba89\", \"#0303ff\")\n\n# Plot network\nset.seed(235)\nggraph(net, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5) +\n  geom_node_point(aes(fill = as.factor(attr$Macro), size = evcent(net)),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(1.5, 3)) +\n  scale_fill_manual(values = myCols) +\n  theme_graph()"},{"path":"Visualization.html","id":"Figure_6_27","chapter":"Section 5 Network Visualization","heading":"Figure 6.27: SWSN Example 2","text":"Fig. 6.27. explicit geographic map network SWSN project area time (Mills et al. 2013).original version figure produced ArcGIS using data prepared R. show network maps edges color coded geographic length can produced R. provide code prepare map one time period (AD1300-1350). Use data follow along. Note figure differ slightly one book original Mills et al. 2013 publication site locations jittered. example use geographic coordinates calculate distance. See spatial networks section details.\nNote short edges visible top long edges must\nfirst sort order edges bu length original edge list \nconverting igraph network object. three lines beginning\n# Order edges shorest plot last, use \norder function set decreasing = T \nedges listed longest shortest. order edge\nlist order edges plotted.\n","code":"\nlibrary(statnet)\nlibrary(igraph)\nlibrary(intergraph)\nlibrary(geosphere)\nlibrary(ggmap)\nlibrary(sf)\nlibrary(tidyverse)\n\n# Load in network and map data\nload(\"data/Figure6_27.Rdata\")\n\n# prepare network object\nnet <- network(event2dichot(sim, method = 'absolute', thresh = 0.75),\n               directed = F)\nr.net <- asIgraph(net)\n\n# convert coordinates to lat/long and covert to sf object\nlocations_sf <- st_as_sf(attr,\n                         coords = c(\"EASTING\", \"NORTHING\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\n# output coordinates in dataframe\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Create edgelist with xy coordinates for each source and target\nedgelist2 <- get.edgelist(r.net)\nedges2 <- data.frame(xy[edgelist2[, 1], ], xy[edgelist2[, 2], ])\ncolnames(edges2) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Determine the geographic distances of edges using the distm\n# function in the geosphere package\ndist.meas <- NULL\nfor (i in 1:nrow(edges2)) {\n  temp <- as.matrix(edges2[i, ])\n  dist.meas[i] <- distm(temp[1, 1:2],temp[1, 3:4])\n}\n\n# Order edges so shorest will plot last\nnet.dat <- as.data.frame(cbind(edges2, dist.meas))\nnet.dat <- net.dat[order(net.dat$dist.meas, decreasing = T), ]\n\n# Create bins in distance measurement\nnet.dat <- net.dat %>% mutate(\n    DistBins = cut(dist.meas, breaks = c(-Inf, 25000, 100000, 250000, Inf)))\n\n# Plot network map\nggmap(base2, darken = 0.5) +\n  geom_segment(\n    data = net.dat,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2,\n      col = DistBins\n    ),\n    size = 0.15,\n    show.legend = F\n  ) +\n  scale_color_manual(values = c(\"white\", \"skyblue\", \"dodgerblue\",\n                                \"darkblue\")) +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"SpatialNetworks","chapter":"Section 6 Spatial Networks","heading":"Section 6 Spatial Networks","text":"section follows along Chapter 7 Brughmans Peeples (2022) provide information implement spatial network models analyses R. Spatial networks one common kinds networks used archaeological research. Many network studies rely GIS tools conduct spatial network research, R quite capable spatial analysis.Working geographic data R can bit complicated cover aspects brief tutorial. interested exploring geospatial networks , suggest take look excellent free Geocomputation R book Robin Lovelace, Jakob Nowosad, Jannes Muenchow. book bookdown document just like tutorial provides excellent date coverage spatial operations management spatial data R.","code":""},{"path":"SpatialNetworks.html","id":"GeoData","chapter":"Section 6 Spatial Networks","heading":"6.1 Working with Geographic Data","text":"\nnumber packages R designed explicitly \nworking spatial data. get spatial analyses \nuseful first briefly introduce packages aspects spatial\ndata analysis R.\nprimary packages include:sf - package designed plotting encoding simple spatial features vector data converting locations among different map projections. Check good brief overview package.ggmap - package visualization tool allows combine typical R figures ggplot2 format static maps available online services like Google Maps, Stamen Maps, OpenStreet Maps, others. package useful quickly generating maps background layer use .cccd - package designed explicitly working spatial data number functions defining networks based relative neighborhoods spatial network definitions.deldir - package package designed create spatial partitions including calculating Delaunay triangulation Voronoi tessellations spatial planes.geosphere - package focused spherical trigonometry functions allow us calculate distances points spherical geographic space across globe.RBGL - R implementation package called Boost Graph Library. package number functions use provides function test graph planarity.spatial data use document consists vector data. simply means mapping data re images pixels representing space instead spatial coordinates define locations distances. One key aspect spatial data R, especially large scales, often need define projection coordinate reference system produce accurate maps.coordinate reference system (CRS) formal definition spatial points relate surface globe. CRS typically fall two categories: geographic coordinate systems projected coordinate systems. common geographic coordinate system latitude/longitude system describes locations surface Earth terms angular coordinates Prime Meridian Equator. projected data set refers process map makers take spherical Earth create flat map. Projections distort move area, distance, shape varying degrees provide xy location coordinates linear units. advantages disadvantages systems beyond scope document important note R often requires us defined coordinate reference system working spatial data.code several sections book seen function calls include argument called crs. coordinate reference system object used R provides numeric code denoting CRS used given dataset. Just like take external .csv data covert network objects R understands, need import spatial data convert object R recognizes. sf package using st_as_sf function.use function take data frame includes location xy information, use coords argument specify fields x y coordinates, use crs code specify coordinate reference system used. example use code 4326 refers WGS84 World Geodetic System geographic coordinates. See website look many common crs code options.Another feature used throughout guide needs explanation ggmap funtion get_stamenmap. function automatically retrieves background map using arguments:bbox - bounding box represents decimal degrees longitude latitude coordinates lower left upper right area wish map.maptype - name indicates style map use ([check options]https://rdrr.io/cran/ggmap/man/get_stamenmap.html).zoom - variable denonting detail zoom level retrieved. Higher number give detail take longer detail.ggmap package, background maps can easily incorporated network graphics.","code":"\nlibrary(sf)\nnodes <- read.csv(\"data/Hispania_nodes.csv\", header = T)\nlocs <- st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\n\nlocs\n#> Simple feature collection with 122 features and 2 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: -9.1453 ymin: 36.0899 xmax: 3.1705 ymax: 43.5494\n#> Geodetic CRS:  WGS 84\n#> First 10 features:\n#>    Id                                    name\n#> 1  n0                               \"Bracara\"\n#> 2  n1                           \"Iria Flavia\"\n#> 3  n2                               \"Saltigi\"\n#> 4  n3                              \"Bilbilis\"\n#> 5  n4                             \"Scallabis\"\n#> 6  n5                  \"Mercablum/Merifabion\"\n#> 7  n6 \"Valentia (Hispania Tarraconensis) (1)\"\n#> 8  n7                               \"Italica\"\n#> 9  n8               \"Acci/Col. Iulia Gemella\"\n#> 10 n9                               \"Toletum\"\n#>                   geometry\n#> 1   POINT (-8.427 41.5501)\n#> 2  POINT (-8.5974 42.8101)\n#> 3  POINT (-1.7228 38.9186)\n#> 4  POINT (-1.6083 41.3766)\n#> 5  POINT (-8.6871 39.2362)\n#> 6  POINT (-6.0886 36.2765)\n#> 7  POINT (-0.3755 39.4758)\n#> 8  POINT (-6.0449 37.4411)\n#> 9  POINT (-3.1346 37.3003)\n#> 10 POINT (-4.0245 39.8567)\nlibrary(ggmap)\n#> Loading required package: ggplot2\n#> Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.\n#> Please cite ggmap if you use it! See citation(\"ggmap\") for details.\nmap <- get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                       maptype = \"terrain\",\n                       zoom = 6)\n#> Source : http://tile.stamen.com/terrain/6/30/23.png\n#> Source : http://tile.stamen.com/terrain/6/31/23.png\n#> Source : http://tile.stamen.com/terrain/6/32/23.png\n#> Source : http://tile.stamen.com/terrain/6/30/24.png\n#> Source : http://tile.stamen.com/terrain/6/31/24.png\n#> Source : http://tile.stamen.com/terrain/6/32/24.png\n#> Source : http://tile.stamen.com/terrain/6/30/25.png\n#> Source : http://tile.stamen.com/terrain/6/31/25.png\n#> Source : http://tile.stamen.com/terrain/6/32/25.png\nggmap(map)"},{"path":"SpatialNetworks.html","id":"data-and-datasets","chapter":"Section 6 Spatial Networks","heading":"6.2 Data and Datasets","text":"initial examples section use Roman Road data Iberian Peninsula. data set consists csv file set Roman settlements csv file edge list defining connections among settlements terms roads.First map basic road network. commented code explain happening stage.","code":"\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\n\n# Read in edgelist and node location data and covert to network object\nedges1 <- read.csv(\"data/Hispania_roads.csv\", header = T)\nnodes <- read.csv(\"data/Hispania_nodes.csv\", header = T)\nroad_net <-\n  graph_from_edgelist(as.matrix(edges1[, 1:2]), directed = FALSE)\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\n# We also create a simple set of xy coordinates as this is used\n# by the geom_point function\nxy <- data.frame(x = nodes$long, y = nodes$lat)\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(road_net)\n\n# Create data frame of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n# Iterate across each edge and assoign lat and long values to\n# X1, Y1, X2, and Y2\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\n\n# Download stamenmap background data.\nmyMap <- get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                       maptype = \"watercolor\",\n                       zoom = 6)\n\n# Produce map starting with background\nggmap(myMap) +\n  # geom_segment plots lines by the beginning and ending\n  # coordinates like the edges object we created above\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  # plot site node locations\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 2,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"SpatialNetworks.html","id":"planar-networks-and-trees","chapter":"Section 6 Spatial Networks","heading":"6.3 Planar Networks and Trees","text":"","code":""},{"path":"SpatialNetworks.html","id":"evaluating-planarity","chapter":"Section 6 Spatial Networks","heading":"6.3.1 Evaluating Planarity","text":"planar network network can drawn plane edges cross instead always end nodes. many small networks relatively easy determine whether network planar simply viewing network graph. larger graphs, can sometimes difficult.\npackage available R called RBGL \nR implementation something called Boost Graph Library. \nset routines includes many powerful tools characterizing network\ntopology including planarity. package , however, CRAN\narchive packages worked far reside needs\ninstalled another archive called Bioconductor.\norder install RBGL BiocManager libraries (required), run following lines code.place can now preform analysis called Boyer-Myrvold planarity test (Boyer Myrvold 2004). analysis performs set operations graph structure evaluate whether can defined planar graph (see publication details).Let’s take look Roman Road data.results suggests Roman Road data planar. can plot data evaluate see crossed edges re-positioned.Now, way example, can generate small random network planar see results test. Note network graph produced visual planar small number nodes moved. Unfortunately planar graph drawing currently implemented igraph packages automatically plot graph planar even meets criteria planar graph.another example graph layout algorithm happens produce planar graph.","code":"\nif(!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"RBGL\")\nlibrary(RBGL)\n# First convert to a graphNEL object for planarity test\ng <- as_graphnel(road_net)\n# Implement test\nboyerMyrvoldPlanarityTest(g)\n#> [1] FALSE\nlibrary(ggraph)\nset.seed(5364)\nggraph(road_net, layout = 'kk') +\n  geom_edge_link() +\n  geom_node_point(size = 3) +\n  ggtitle(\"Network of Roman Roads\") +\n  theme_graph()\nset.seed(49)\ng <- erdos.renyi.game(20, 1 / 8)\nset.seed(939)\nggraph(g, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng <- as_graphnel(g)\nboyerMyrvoldPlanarityTest(g)\n#> [1] TRUE\nset.seed(4957)\ng <- erdos.renyi.game(20, 1 / 8)\nset.seed(939)\nggraph(g, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng <- as_graphnel(g)\nboyerMyrvoldPlanarityTest(g)\n#> [1] TRUE"},{"path":"SpatialNetworks.html","id":"defining-trees","chapter":"Section 6 Spatial Networks","heading":"6.3.2 Defining Trees","text":"tree network connected acyclic. Trees contain minimum number edges set nodes connected, results acyclic network interesting properties:Every edge tree bridge, removal increase number components.number edges tree equal number nodes minus one.can one single path every pair nodes tree.R using igraph package possible generate trees also take existing network define called minimum spanning tree graph minimum acyclic component.Let’s create simple tree using make_tree function igraph.example can see branch leaf structure network central nodes hubs number nodes , cycles back previous nodes. Thus, tree inherently hierarchical.next sub-section, discuss use minimum spanning trees.also possible plot trees heirarchical network layout nodes arranged levels hierarchy. case need specify node nodes represent first layer using root call within ggraph call.","code":"\ntree1 <- make_tree(n = 50, children = 5, mode = \"undirected\")\ntree1\n#> IGRAPH 5c47874 U--- 50 49 -- Tree\n#> + attr: name (g/c), children (g/n), mode (g/c)\n#> + edges from 5c47874:\n#>  [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  2-- 7  2-- 8  2-- 9\n#>  [9]  2--10  2--11  3--12  3--13  3--14  3--15  3--16  4--17\n#> [17]  4--18  4--19  4--20  4--21  5--22  5--23  5--24  5--25\n#> [25]  5--26  6--27  6--28  6--29  6--30  6--31  7--32  7--33\n#> [33]  7--34  7--35  7--36  8--37  8--38  8--39  8--40  8--41\n#> [41]  9--42  9--43  9--44  9--45  9--46 10--47 10--48 10--49\n#> [49] 10--50\nplot(tree1)\nggraph(tree1,\n       layout = 'igraph',\n       algorithm = 'tree',\n       root = 1) +\n  geom_edge_diagonal(edge_width = 0.5, alpha = .4) +\n  geom_node_text(aes(label = V(tree1)), size = 3.5) +\n  theme_void() "},{"path":"SpatialNetworks.html","id":"spatial-network-models","chapter":"Section 6 Spatial Networks","heading":"6.4 Spatial Network Models","text":"Chapter 7.5 Brughmans Peeples (2022) go series spatial network models provide number different ways defining networks spatial data. sub-section demonstrate define analyze networks using approaches.","code":""},{"path":"SpatialNetworks.html","id":"relative-neighborhood-networks","chapter":"Section 6 Spatial Networks","heading":"6.4.1 Relative Neighborhood Networks","text":"Relative neighborhood graph: pair nodes connected nodes area marked overlap circle around node radius equal distance nodes.\nR package cccd contains functions define relative\nneighborhood networks distance data using rng\nfunction. function can either take distance matrix object \ncreated set coordinates calculate distance within\ncall. output function igraph object. large\ngraphs also possible limit search possible neighbors \n\\(k\\) neighbors.\nLet’s use previously created distance matrix plot results.can also plot results using geographic coordinates.","code":"\nlibrary(cccd)\nrng1 <- rng(nodes[, c(3, 2)])\nggraph(rng1, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\nggraph(rng1,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"gabriel-graphs","chapter":"Section 6 Spatial Networks","heading":"6.4.2 Gabriel Graphs","text":"Gabriel graph: pair nodes connected Gabriel graph nodes lie within circular region diameter equal distance pair nodes.can use function cccd package define Gabriel Graph igraph objects x y coordinates. Let’s take look using Roman Road data. See ?gg details options including different algorithms calculating Gabriel Graphs. define Gabriel graph plot using algorithmic layout geographic coordinates.","code":"\ngg1 <- gg(x = nodes[, c(3, 2)])\nggraph(gg1, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\nggraph(gg1,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"beta-skeletons","chapter":"Section 6 Spatial Networks","heading":"6.4.3 Beta Skeletons","text":"Beta skeleton: Gabriel graph diameter circle controlled parameter beta.R gg function producing Gabriel Graphs procedure beta skeletons built directly . argument r gg function controls beta parameter. r = 1 traditional Gabriel graph returned. parameter r > 1 stricter definition connection resulting fewer ties r < 1 link criteria loosened. See ?gg details.","code":"\nbeta_s <- gg(x = nodes[, c(3, 2)], r = 1.5)\nggraph(beta_s,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"minimum-spanning-trees","chapter":"Section 6 Spatial Networks","heading":"6.4.4 Minimum Spanning Trees","text":"Minimum spanning tree: set nodes Euclidean plane, edges created pairs nodes form tree node can reached node, sum Euclidean edge lengths less sum spanning tree.Perhaps common use-case trees archaeological networks define minimum spanning tree given graph minimum set nodes edges required fully connected graph. igraph package function called mst defines minimum spanning tree given graph. Let’s try Roman Road plot node-link diagram map.Note minimum spanning trees can also used weighted graphs weighted connections preferred defining tree structure. See ?mst details.","code":"\nmst_net <- igraph::mst(road_net)\nset.seed(4643)\nggraph(mst_net, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point(size = 4) +\n  theme_graph()\n# Extract edgelist from network object\nedgelist <- get.edgelist(mst_net)\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\nggmap(myMap) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = nodes[, c(3, 2)],\n    aes(long, lat),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 1.5,\n    show.legend = F\n  ) +\n  theme_void()\n#> Warning: Removed 2 rows containing missing values\n#> (geom_point)."},{"path":"SpatialNetworks.html","id":"delaunay-triangulation","chapter":"Section 6 Spatial Networks","heading":"6.4.5 Delaunay Triangulation","text":"Delaunay triangulation: pair nodes connected edge corresponding regions Voronoi diagram share side.Voronoi diagram Thiessen polygons: node set nodes Euclidean plane, region created covering area closer equidistant node node set.\npackage deldir R allows calculation \nDelaunay triangles x y coordinates input. default \ndeldir function define boundary extends\nslightly beyond xy coordinates points included \nanalysis. boundary can also specified within call using \nrw argument. See ?deldir details.\nresults deldir function can directly plotted output also contains coordinates necessary integrate results another type figure like ggmap. Let’s take look.","code":"\nlibrary(deldir)\ndt1 <- deldir(nodes[, 3], nodes[, 2])\nplot(dt1)\n# Extract Voronoi polygons for plotting\nmapdat <- as.data.frame(dt1$dirsgs)\n# Extract network for plotting\nmapdat2 <- as.data.frame(dt1$delsgs)\nggmap(myMap) +\n  geom_segment(\n    data = mapdat,\n    aes(\n      x = x1,\n      y = y1,\n      xend = x2,\n      yend = y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_segment(\n    data = mapdat2,\n    aes(\n      x = x1,\n      y = y1,\n      xend = x2,\n      yend = y2\n    ),\n    col = 'red',\n    size = 1\n  ) +\n  geom_point(\n    data = nodes,\n    aes(long, lat),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 3,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"SpatialNetworks.html","id":"k-nearest-neighbors","chapter":"Section 6 Spatial Networks","heading":"6.4.6 K-nearest Neighbors","text":"K-nearest neighbor network: node connected K nodes closest .cccd package routine allows calculation K-nearest neighbor graphs geographic coordinates precomputed distance matrix. example use Roman Road data calculate K=1 K=6 nearest neighbor networks plot simultaneously.","code":"\n# Calculate k=1 nearest neighbor graph\nnn1 <- nng(x = nodes[, c(3, 2)], k = 1)\n# Calculate k=6 nearest neighbor graph\nnn6 <- nng(x = nodes[, c(3, 2)], k = 6)\nEL1 <- as.data.frame(\n  rbind(cbind(get.edgelist(nn6),\n         rep(\"K=6\", nrow(get.edgelist(nn1))\n             )),\n        cbind(get.edgelist(nn1), \n          rep(\"K=1\", nrow(get.edgelist(nn1))\n             ))))\ncolnames(EL1) <- c(\"from\", \"to\", \"K\")\ng <- graph_from_data_frame(EL1)\n# Plot both graphs\nggraph(g, layout = \"manual\",\n       x = nodes[, 3], y = nodes[, 2]) +\n  geom_edge_link(aes(color = factor(K)), width = 1.5) +\n  geom_node_point(size = 2) +\n  labs(edge_color = \"K\") +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"maximum-distance-networks","chapter":"Section 6 Spatial Networks","heading":"6.4.7 Maximum Distance Networks","text":"Maximum distance network: node connected nodes distance closer equal threshold value. order define maximum distance network simply need define threshold distance define nodes greater distance unconnected nodes within distance connected. can done base R using dist function used .\nSince coordinates using decimal degrees \nneed calculate distances based “great circles” across globe\nrather Euclidean distances projected plane. \nfunction called distm geosphere package\nallows us . working projected data, \ncan simply use dist function place \ndistm like example .\nNext, order define minimum distance network simply binarize matrix. can using event2dichot function within statnet package easily create R network objects. Let’s try Roman Road data thresholds 100,000 250,000 meters.","code":"\nlibrary(statnet)\n#>            Installed ReposVer Built  \n#> ergm.count \"4.0.2\"   \"4.1.1\"  \"4.2.0\"\n#> network    \"1.17.1\"  \"1.17.2\" \"4.2.0\"\nlibrary(geosphere)\nd1 <- distm(nodes[, c(3, 2)])\n# Note we use the leq=TRUE argument here as we want nodes less than\n# the threshold to count.\nnet100 <- network(event2dichot(\n  d1,\n  method = 'absolute',\n  thresh = 100000,\n  leq = TRUE\n),\ndirected = F)\nnet250 <- network(event2dichot(\n  d1,\n  method = 'absolute',\n  thresh = 250000,\n  leq = TRUE\n),\ndirected = F)\n# Plot 100 Km network\nggraph(net100,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n# Plot 250 Km network\nggraph(net250,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"SpatialNetworks.html","id":"case-studies","chapter":"Section 6 Spatial Networks","heading":"6.5 Case Studies","text":"","code":""},{"path":"SpatialNetworks.html","id":"proximity-of-iron-age-sites-in-southern-spain","chapter":"Section 6 Spatial Networks","heading":"6.5.1 Proximity of Iron Age sites in Southern Spain","text":"first case study Chapter 7 Brughmans Peeples (2022) example several methods defining networks using spatial data outlined using locations 86 sites Guadalquivir river valley Southern Spain. code chunks , replicate analyses presented book.First read data represents site location information lat/long decimal degrees.Next create distance matrix based decimal degrees locations using “distm” function.can create maximum distance networks 10km 18km distance plot using geographic location nodes node placement.\nwant combine degree distribution plot network\nframe, can use inset_element function\npatchwork package. function lets us place one\nplot inside another ggplot2 format.\nNext, calculate relative neighborhood graph site locations plot nodes positioned geographic space.chunk code calculates plots Gabrial graph associated degree distribution plot.Next, ’ll plot K-nearest neighbors graphs k= 2, 3, 4, 6 associated degree distribution .","code":"\nguad <- read.csv(\"data/Guadalquivir.csv\", header=TRUE)\nlibrary(geosphere)\ng_dist1 <- as.matrix(distm(guad[, c(2, 3)]))\ng_dist1[1:4, 1:4]\n#>          [,1]     [,2]     [,3]     [,4]\n#> [1,]     0.00 69995.82 42265.58 51296.53\n#> [2,] 69995.82     0.00 28240.50 29202.84\n#> [3,] 42265.58 28240.50     0.00 23692.10\n#> [4,] 51296.53 29202.84 23692.10     0.00\nlibrary(intergraph)\n# Note we use the leq=TRUE argument here as we want nodes less than the threshold to count.\nnet10 <- asIgraph(network(\n  event2dichot(\n    g_dist1,\n    method = 'absolute',\n    thresh = 10000,\n    leq = TRUE\n  ),\n  directed = F\n))\nnet18 <- asIgraph(network(\n  event2dichot(\n    g_dist1,\n    method = 'absolute',\n    thresh = 18000,\n    leq = TRUE\n  ),\n  directed = F\n))\ng10_deg <- as.data.frame(igraph::degree(net10))\ncolnames(g10_deg) <- 'degree'\ng18_deg <- as.data.frame(igraph::degree(net18))\ncolnames(g18_deg) <- 'degree'\n# Plot histogram of degree for 10km network\nh10 <- ggplot(data = g10_deg) +\n  geom_histogram(aes(x = degree), bins = 15)\n# Plot histogram of degree for 18km network\nh18 <- ggplot(data = g18_deg) +\n  geom_histogram(aes(x = degree), bins = 15)\n# Plot 10 Km network\ng10 <- ggraph(net10,\n              layout = \"manual\",\n              x = guad[, 2],\n              y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n# Plot 18 Km network\ng18 <- ggraph(net18,\n              layout = \"manual\",\n              x = guad[, 2],\n              y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng18\nlibrary(patchwork)\nplot_a <- g10 + inset_element(\n  h10,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_b <- g18 + inset_element(\n  h18,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_a\nplot_b\nrng1 <- rng(guad[, 2:3])\ng_rng <- ggraph(rng1,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng_rng_deg <- as.data.frame(igraph::degree(rng1))\ncolnames(g_rng_deg) <- 'degree'\n# Plot histogram of degree for relative neighborhood network\nh_rng <- ggplot(data = g_rng_deg) +\n  geom_histogram(aes(x = degree), bins = 3)\nplot_c <- g_rng + inset_element(\n  h_rng,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_c\ngg1 <- gg(x = guad[, 2:3])\ng_gg <- ggraph(gg1,\n               layout = \"manual\",\n               x = guad[, 2],\n               y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng_gg_deg <- as.data.frame(igraph::degree(gg1))\ncolnames(g_gg_deg) <- 'degree'\n# Plot histogram of degree for relative neighborhood network\nh_gg <- ggplot(data = g_gg_deg) +\n  geom_histogram(aes(x = degree), bins = 5)\nplot_d <- g_gg + inset_element(\n  h_gg,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_d\n# Calculate k=2,3,4, and 6 nearest neighbor graphs\nnn2 <- nng(x = guad[, 2:3], k = 2)\nnn3 <- nng(x = guad[, 2:3], k = 3)\nnn4 <- nng(x = guad[, 2:3], k = 4)\nnn6 <- nng(x = guad[, 2:3], k = 6)\n# Initialiize network graph for each k value\ng_nn2 <- ggraph(nn2,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng_nn3 <- ggraph(nn3,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng_nn4 <- ggraph(nn4,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\ng_nn6 <- ggraph(nn6,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n# Set up dataframes of degree distribution for each network\nnn2_deg <- as.data.frame(igraph::degree(nn2))\ncolnames(nn2_deg) <- 'degree'\nnn3_deg <- as.data.frame(igraph::degree(nn3))\ncolnames(nn3_deg) <- 'degree'\nnn4_deg <- as.data.frame(igraph::degree(nn4))\ncolnames(nn4_deg) <- 'degree'\nnn6_deg <- as.data.frame(igraph::degree(nn6))\ncolnames(nn6_deg) <- 'degree'\n# Initialize histogram plot for each degree distribution\nh_nn2 <- ggplot(data = nn2_deg) +\n  geom_histogram(aes(x = degree), bins = 5) +\n  scale_x_continuous(limits = c(0, max(nn2_deg)))\nh_nn3 <- ggplot(data = nn3_deg) +\n  geom_histogram(aes(x = degree), bins = 6) +\n  scale_x_continuous(limits = c(0, max(nn3_deg)))\nh_nn4 <- ggplot(data = nn4_deg) +\n  geom_histogram(aes(x = degree), bins = 6) +\n  scale_x_continuous(limits = c(0, max(nn4_deg)))\nh_nn6 <- ggplot(data = nn6_deg) +\n  geom_histogram(aes(x = degree), bins = 5) +\n  scale_x_continuous(limits = c(0, max(nn6_deg)))\nplot_a <- g_nn2 + inset_element(\n  h_nn2,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_b <- g_nn3 + inset_element(\n  h_nn3,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_c <- g_nn4 + inset_element(\n  h_nn4,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_d <- g_nn6 + inset_element(\n  h_nn6,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_a\nplot_b\nplot_c\nplot_d"},{"path":"SpatialNetworks.html","id":"networks-in-space-in-the-u.s.-southwest","chapter":"Section 6 Spatial Networks","heading":"6.5.2 Networks in Space in the U.S. Southwest","text":"second case study Chapter 7 Brughmans Peeples (2022) provides example can use spatial network methods analyze material cultural network data. use Chaco World data can download map data, site attribute data, ceramic frequency data follow along.first analysis explores degree similarities ceramics (terms Brainerd-Robinson similarity based wares) can explained spatial distance. simply define ceramic similarity matrix, Euclidean distance matrix, fit model using distance explain ceramic similarity using general additive model (gam) approach. gam function use mgcv package. Note object dmat created using dist function data started already projected site locations using UTM coordinates.results show described book, spatial distance statistically significant predictor ceramic similarity distance appear explain 37.2% variation ceramic similarity.next analysis presented book creates series minimum distance networks 36Kms way nearly 400Kms concentric days travel (36Kms one day travel foot) explore proportion variance explained networks constrained distance.Finally, let’s recreate figure 7.8 book display 36km minimum distance network Chaco region ca. AD 1050-1100. follows basic format plotting minimum distance networks defined .","code":"\nlibrary(mgcv)\nload('data/map.RData')\nattr <- read.csv('data/AD1050attr.csv', row.names = 1)\ncer <- read.csv('data/AD1050cer.csv',\n                header = T,\n                row.names = 1)\nsim <-\n  (2 - as.matrix(vegan::vegdist(prop.table(\n    as.matrix(cer), 1), \n    method = 'manhattan'))) / 2\ndmat <- as.matrix(dist(attr[, 9:10]))\nfit <- gam(as.vector(sim) ~ as.vector(dmat))\nsummary(fit)\n#> \n#> Family: gaussian \n#> Link function: identity \n#> \n#> Formula:\n#> as.vector(sim) ~ as.vector(dmat)\n#> \n#> Parametric coefficients:\n#>                   Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)      7.979e-01  2.547e-03   313.3   <2e-16 ***\n#> as.vector(dmat) -2.487e-06  1.448e-08  -171.8   <2e-16 ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> \n#> R-sq.(adj) =  0.372   Deviance explained = 37.2%\n#> GCV = 0.082702  Scale est. = 0.082699  n = 49729\n# Create a sequence of distances from 36km to 400kms by concentric\n# days travel on foot\nkms <- seq(36000, 400000, by = 36000)\n# Define minimum distance networks for each item in \"kms\" and the\n# calculate variance explained\ntemp.out <- NULL\nfor (i in 1:length(kms)) {\n  dmat.temp <- dmat\n  dmat.temp[dmat > kms[i]] <- 0\n  dmat.temp[dmat.temp > 0] <- 1\n  # Calculate gam model and output r^2 value\n  temp <- gam(as.vector(sim[lower.tri(sim)]) ~\n                as.vector(dmat.temp[lower.tri(dmat.temp)]))\n  temp.out[i] <- summary(temp)$r.sq\n}\n# Create data frame of output\ndat <- as.data.frame(cbind(kms / 1000, temp.out))\ncolnames(dat) <- c('Dist', 'Cor')\nlibrary(ggplot2)\n# Plot the results\nggplot(data = dat) +\n  geom_line(aes(x = Dist, y = Cor)) +\n  geom_point(aes(x = Dist, y = Cor), size = 3) +\n  xlab(\"Maximum Distance Network Threshold (Km)\") +\n  ylab(\"Proportion of Variance Explained\") +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(1.5)),\n    axis.text.y = element_text(size = rel(1.5)),\n    axis.title.x = element_text(size = rel(1.5)),\n    axis.title.y = element_text(size = rel(1.5))\n  )\nd36 <- as.matrix(dist(attr[, 9:10]))\nd36[d36 < 36001] <- 1\nd36[d36 > 1] <- 0\ng36.net <- graph_from_adjacency_matrix(d36, mode = \"undirected\")\nlocations_sf <- st_as_sf(attr,\n                         coords = c(\"EASTING\", \"NORTHING\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\nxy <- as.data.frame(cbind(attr$SWSN_Site, coord1))\ncolnames(xy) <- c('site', 'x', 'y')\nbase <- get_stamenmap(\n  bbox = c(-110.75, 33.5, -107, 38),\n  zoom = 8,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n# Extract edgelist from network object\nedgelist <- get.edgelist(g36.net)\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(xy[which(xy$site == edgelist[i, 1]), 2],\n                  xy[which(xy$site == edgelist[i, 1]), 3],\n                  xy[which(xy$site == edgelist[i, 2]), 2],\n                  xy[which(xy$site == edgelist[i, 2]), 3])\n}\nfigure7_8 <- ggmap(base, darken = 0.15) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    size = 0.10,\n    show.legend = F\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.65,\n    size = 1,\n    col = 'red',\n    show.legend = F\n  ) +\n  theme_void()\nfigure7_8"},{"path":"references-and-r-packages.html","id":"references-and-r-packages","chapter":"References and R Packages","heading":"References and R Packages","text":"","code":""}]
