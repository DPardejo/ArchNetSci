[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Note pre-release version document. aware formatting issues may lingering errors currently investigation. Please check back updates coming months full “release” version document.Cite document :Peeples, Matthew . Tom Brughmans (2022). Online Companion Archaeological Network Science Brughmans Peeples. https://archnetworks.netFor information book resrouces including downloadable archaeological network data, code, tutorials see archnetworks.net.document serves companion Cambridge Manuals Archaeology book Archaeological Network Science Tom Brughmans Matthew . Peeples (2022). document outlines methods managing analyzing network data, primarily using R programming language. following sections provide code examples replicate analyses, techniques, visualizations presented book well many additional useful code snippets, hints, information. appendix written expand upon specific topics covered book may find useful follow along examples read. Sections 2 7 document correspond topics information covered Chapters 2 7 book. can use table contents left-hand side screen jump directly particular topic.Mockup Cover image Archaeological Network ScienceThis appendix assumes basic familiarity R R studio. first time R user need help getting R R studio installed running, suggest follow basic RYouWithMe! tutorials R-Ladies Sydney ModernDive Statistical Inference via Data Science basic tutorial (McConville et al. 2021). already basic familiarity R want go , numerous additional resources online (many completely free) help learn. resources recommend include R Data Science (Wickham Grolemund 2017), Advanced R (Wickham 2019), R Cookbook, 2nd edition (Long Teetor 2019)), R Action associated Quick-R website Kabacoff 2015. addition Ben Marwick created excellent repository resources using R archaeology well ever-growing list archaeological publications include R code. Reproducing published results , experience, one best ways learn advanced analytical techniques data management R.","code":""},{"path":"index.html","id":"project-license","chapter":"Welcome","heading":"Project License","text":"work licensed Creative Commons Attribution-NonCommercial-NoDerivitives 4.0 International License.","code":""},{"path":"getting-started.html","id":"getting-started","chapter":"Section 1 Getting Started","heading":"Section 1 Getting Started","text":"section provides downloadable files network datasets used online companion book well information primary R packages used analysis visualization throughout tutorial. also provide brief instructions importing data R using R-studio guidance setting R-studio working environment. additional guidance see resources provided introduction.","code":""},{"path":"getting-started.html","id":"datasets","chapter":"Section 1 Getting Started","heading":"1.1 Datasets","text":"analyses illustrated online appendix use number real simulated archaeological datasets serve examples particular data types techniques. datasets used provided .csv (comma separated value) .RData formats can downloaded can follow along analyses computer. encourage explore files see formatted guide setting datasets.data used include range different network data formats types. primary datasets described detail Brughmans Peeples (2022) Chapter 2.8. Note spatial locations archaeological sites provided locations randomly jittered 10 kilometers actual locations maintain data security.files can right click “save ” save use locally. Note many additional datasets relating replication particular figures book provided code particular figure occurs. ’d like just download everything see next section","code":""},{"path":"getting-started.html","id":"Everything","chapter":"Section 1 Getting Started","heading":"1.1.1 Just Give Me Everything","text":"Hey, get . ’re busy just want data one convenient package. provide data used appendix single .zip file download. follow along examples appendix need choose R working directory place contents *.zip folder within individual files contained within folder called “data”. Note includes additional files required reproducing particular figures well.All_data.zip - single compressed file containing data files used appendix.","code":""},{"path":"getting-started.html","id":"roman-road-networks","chapter":"Section 1 Getting Started","heading":"1.1.2 Roman Road Networks","text":"development elaborate road system one enduring legacies Roman Republic Empire. Areas came Roman control connected Rome important provincial centers entirely new roads well redeveloped existing roads. roughly second century AD onward resulted integrated terrestrial transport network connecting North-Africa, Middle East, western southern Europe. Much subsequent development transport systems regions built Roman system.primary source roads entire Roman world Barrington Atlas Greek Roman World (Talbert 2000) digitization Ancient World Mapping Center (2012). many examples focus particular roads Iberian Peninsula, digitized great detail Pau de Soto (de Soto Carreras 2021). analyses Roman road network ancient settlements represented nodes existence road two settlements represented edge. also include length road edge attribute.Hispania_nodes - NodeIDs names Roman era settlements Iberian Peninsula along names latitude longitude locations decimal degrees.Hispania_roads - Edge list road connections using NodeIDs Hispania_nodes file. file contains “weight” variable defined edge denotes length road segment.","code":""},{"path":"getting-started.html","id":"southwest-social-networks-project-ceramic-similarity-networks","chapter":"Section 1 Getting Started","heading":"1.1.3 Southwest Social Networks Project Ceramic Similarity Networks","text":"Southwest Social Networks (SWSN) Project (subsequent cyberSW project) large collaborative effort focused exploring methods models network analysis archaeological data better understand patterns interaction, population movement, demographic change across U.S. Southwest Mexican Northwest time (ca. .D. 800-1800; Borck et al. 2015; Giomi et al. 2021; Mills et al. 2013a; 2013b; 2015; 2018; Peeples Haas 2013; Peeples et al. 2016; Peeples Roberts 2013). interval considered project region inhabited largely sedentary agricultural populations (though mobile populations also present throughout period) communities large several thousand people peak. region blessed excellent archaeological preservation, fine grained chronology anchored dendrochronological dates, nearly 150 years focused archaeological research.SWSN/cyberSW project team gathered massive database information location size tens thousands archaeological sites ceramic material cultural typological frequency data consisting millions objects explore patterns material similarity, exchange, technology change across time space study area. data well tools needed analyze available online platform called cyberSW (cyberSW.org). online platform even allows explore data directly internet browser. size complexity SWSN/cyberSW data make particularly good example discussing decision processes involved visualizing analyzing large networks.several sections book also use subsets larger dataset; San Pedro Valley, Chaco World. San Pedro Valley southern Arizona well-studied portion SWSN study area (see Clark Lyons 2012; Gerald 2019) early focus network methodological exploration team (Mills et al. 2013b). data subset includes detailed ceramic typological frequency known major settlements across region late pre-Hispanic period (ca. .D. 1200-1450). Chaco World large-scale social political system spanned much Colorado Plateau ca. .D. 800-1150. settlement system marked construction massive public architectural features known great houses great kivas. subset database includes information architecture ceramic typological data large portion known Chacoan architectural complexes throughout U.S. Southwest. Chaco World major focus SWSN/cyberSW project (Giomi et al. 2021; Giomi Peeples 2019; Mills et al. 2018).networks, individual settlements treated nodes edges defined weighted based similarities ceramic wares recovered settlements. Ceramic data used generate networks apportioned sequence 50-year chronological intervals using methods described detail Roberts colleagues (2012) Ortman (2016; see discussion Mills et al. 2018) able explore change time. Site locations site attribute data also considered examples. R implementations chronological apportioning methods available GitHub well (R implementation Roberts et al. 2012, R implementation Ortman 2016).SWSN Attribute Data AD 1300-1350 - Attribute data SWSN sites dating AD 1300 1350 including site name, site sub-region (Macro), jittered easting northing UTM coordinates.SWSN Similarity Data AD 1300-1350 - Symmetric similarity matrix based Brainerd-Robinson similarities SWSN sites dating AD 1300 1350.Chaco World Attribute Data AD 1050-1100 - Attribute data sites Chacoan architectural features dating AD 1050 1100 including site IDs, site names, site sub-regions, counts different kinds public architectural features, jittered easting northing site locations.Chaco World Ceramic Data AD 1050-1100 - Ceramic count data ware sites Chacoan architectural features dating AD 1050 1100.Chaco World Network AD 1050-1100 - Adjacency matrix binarized network ceramic similarity sites Chacoan architectural features dating AD 1050 1100.San Pedro Networks throgh Time - .RData file contains igraph network objects San Pedro region ceramic similarity networks AD1250-1300, AD1300-1350, AD1350-1400.","code":""},{"path":"getting-started.html","id":"cibola-region-technological-similarity-network","chapter":"Section 1 Getting Started","heading":"1.1.4 Cibola Region Technological Similarity Network","text":"Cibola region along Arizona New Mexico border U.S. Southwest large diverse physiographic region spanning southern edge Colorado Plateau ancestral homeland contemporary Zuni (:shiwi) people. Peeples colleagues (Peeples 2011, 2018; Peeples et al. 2021) explored patterns technological similarity communities practice region series sites dating ca. .D. 1100-1350 explorations corrugated ceramic cooking pots. Corrugated pots, produced across much U.S. Southwest least 9th 14th centuries, coiled ceramic vessels coils used make vessel never fully smoothed. Thus, ceramics retain substantial amounts evidence specific techniques used produce .book use data ceramic technological production techniques generate similarity networks originally published Peeples (2011; 2018). networks settlement treated node similarity metrics defining weights edges pairs sites based analysis number metric coded attributes individual ceramic vessels. addition material cultural data, also additional site attributes location types frequency public architectural features.Ceramic technological data Peeples (2018): Additional data documentation project available tDAR collection. Nodes defined individual settlements edges defined based similarities technological attributes cooking pots recovered settlements. details methods assumptions used define networks see Peeples (2018, pg. 100-104).Cibola Ceramic Technological Clusters - Counts ceramic technological clusters sites Cibola region sample.Cibola Site Attributes - Site location, public architectural feature types, sub-region designations sites Cibola region sample.Cibola Binary Network Edge List - Binary edge list Cibola technological similarity network.Cibola Binary Network Adjacency Matrix - Binary adjacency matrix Cibola technological similarity network.Peeples2018.Rdata - file contains number objects R format including site attributes (site_info), symmetric Brainerd-Robinson similarity matrix (ceramicBR), binary network object statnet/network format (BRnet), weighted network object statnet/network format (BRnet_w)","code":""},{"path":"getting-started.html","id":"himalayan-visibility-networks","chapter":"Section 1 Getting Started","heading":"1.1.5 Himalayan Visibility Networks","text":"Hundreds forts small fortified structures located mountain tops ridges central Himalayan region Garhwal Uttarakhand (India). Despite prominent feature history region interwoven local folklore (Garhwal derived ‘land forts’), fortification phenomenon received little research attention. might origins downfall Katyuri dynasty 11th century continued 15th century region consolidated Parmar dynasty possibly even later attested Mughal, Tibetan, British aggressions.book use research context example spatial networks specifically visibility networks.made possible thanks survey forts region performed context PhD project Dr Nagendra Singh Rawat (2017). use catalog 193 sites (Rawat et al. 2020, Appendix S1), use case Chaundkot fort surroundings particular case study. Chaundkot fort theorized one key strongholds region also one partly excavated (Rawat Nautiyal 2020). case studies represent strongholds nodes, ability line--sight exist observers located pair strongholds represented directed edge. length line--sight represented edge attribute.Himalayan Node data - Node attribute data Himalayan sites including locations lat/long, elevation, site name/type, descriptions landscape features.Himalayan Edge List - Edge list data information connections among nodes within 25kms information distance whether target site visible source. Note edges “Visible = TRUE” included activated edges.","code":""},{"path":"getting-started.html","id":"archaeological-publication-networks","chapter":"Section 1 Getting Started","heading":"1.1.6 Archaeological Publication Networks","text":"knowledge stories past human behavior much shaped material remains excavate, actions interactions archaeologists study . Aspects actions interactions formally represented publications. papers can co-authored, reflecting scientific collaboration networks communities practice. Authors cite authors’ works indicate explicitly influenced related paper’s subject matter.previous work, turned tools archaeological network science archaeological network researchers (Brughmans 2013; Brughmans Peeples 2017). studied co-authorship citation practices 250 publications applied formal network methods archaeological research topics 1968 present. list publications, undirected co-authorship network can made representing individual authors nodes, connecting pair authors edge co-authors one papers, edge values representing number papers co-authored. Moreover, directed citation network can made bibliographies list publications. citation network, node represents individual publication connected publications bibliography directed edge. edge goes citing publication cited publication, represents source direction academic influence explicitly expressed publication. use networks archaeological network research publications throughout volume illustrate concepts like acyclic structure citation networks.Publication Networks Attribute Data - Attribute data table including information publications including unique key identifier, publication type, publication title, publication date, author list separated semi-colons.Publication Networks Co-Authorship Incidence Matrix - incidence matrix unique publications rows authors columns.","code":""},{"path":"getting-started.html","id":"iron-age-sites-in-southern-spain","chapter":"Section 1 Getting Started","heading":"1.1.7 Iron Age Sites in Southern Spain","text":"Guadalquivir river valley south Spain present-day Seville Córdoba densely urbanized late Iron Age (early 5th c. BC late 3rd c. BC). Many settlements dotted along rivers southern part valley (Fig. 2.6), settlement pattern focused nuclear settlements sometimes referred oppida. reveal defensive architecture many located elevations. Previous studies Iron Age settlements region explored possible explanations locations (Keay Earl 2011; Brughmans et al. 2014, 2015). Given elevated locations, one theory received considerable attention intervisibility. small settlements surrounding oppida seen , oppida located partly allow visual control surrounding settlements? groups Iron Age settlements tend intervisible, forming communities visible daily basis? chains intervisibility allowed passing information one site another via visual smoke fire signals, chains follow key communication medium area: navigable rivers?questions explored previous research using GIS network methods, using dataset 86 sites lines--sight connecting pairs Iron Age settlements distances 20km large fire smoke signals visible (dataset research topic: Keay Earl 2011; Brughmans et al. 2014, 2015). account errors Digital Elevation Model (DEM), probabilistic line--sight analysis performed introduces random errors DEM can blocking enhancing effect lines--sight. locations 86 sites network displayed figure 2.9 also available Appendix Brughmans et al. 2014. locations used Chapter 7 book illustrate spatial network models explore different geographical structures might underlie settlement pattern.Guadalquivir settlement data - Site number locations decimal degrees sites Guadalquivir survey area.","code":""},{"path":"getting-started.html","id":"importing-data-in-r","chapter":"Section 1 Getting Started","heading":"1.2 Importing Data in R","text":"section briefly describes data provided (data) can imported R analyses. running code , however, need ensure R session set correct working directory (location placed .csv files just downloaded). , go menu bar top click Session > Set Working Directory > Choose Directory navigate place hard drive files reside (alternatively can hit Ctrl + Shift + H navigate appropriate directory).example read Cibola_edgelist.csv file define object called “EL1” includes data file using read.csv() command. Note case file want read sub-folder working directory called “data” need use “data/” prefix file name correctly call file. chose use sub-folder call folder something else, need modify “data/” section code.addition .csv files, several examples book several datasets provide .RData files can read directly R can contain multiple R objects. can read directly R environment using “load()” function. See example . note must specify specific directory within working directory file located.","code":"\n# read in data with first row representing column names (header=TRUE)\nEL1 <- read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n# look at the first few rows\nhead(EL1)\n#>           FROM                   TO\n#> 1 Apache Creek         Casa Malpais\n#> 2 Apache Creek         Coyote Creek\n#> 3 Apache Creek         Hooper Ranch\n#> 4 Apache Creek      Horse Camp Mill\n#> 5 Apache Creek        Hubble Corner\n#> 6 Apache Creek Mineral Creek Pueblo\nload(\"data/map.RData\")"},{"path":"getting-started.html","id":"installing-r-packages","chapter":"Section 1 Getting Started","heading":"1.3 Installing R Packages","text":"appendix rely number pre-existing R packages. order use packages new installation R R-studio, first need install . Note need new installation R. install packages, can click “Packages” tab window bottom right R studio, click “Install” button top type names packages separated commas. Alternatively can install packages console simply typing “install.packages(”nameofpackagehere”)” without outer quotation marks.install.packages(c(“statnet”,“tnet”))use number R packages modules book manipulating analyzing network data general analyses procedures. frequently used network packages include:igraph (Csardi Nepusz 2006) - analytical routines simple graphs graph analysisstatnet (Krivitsky et al. 2020) - suite packages designed management statistical analysis networksintergraph (Bojanowski 2015) - set routines coercing objects common network formats Rggraph (Pederson 2021) - powerful graph visualization package based ggplot2 plotting formatIn order install packages used appendix, can run following chunk code. Specific packages initialized along specific sections required. Note code reinstall packages already installed current version R.version book built R version 4.1.2 (2021-11-01) following packages:","code":"\npackages <- c(\"igraph\", \"statnet\", \"intergraph\", \"tnet\", \"ggplot2\",\n              \"deldir\",\"rjson\",\"d3r\",\"cccd\",\"RBGL\",\"graph\",\"BiocGenerics\",\n              \"networkD3\",\"visNetwork\",\"GISTools\",\"rgeos\",\"maptools\",\"sp\",\n              \"ndtv\",\"gridExtra\",\"png\",\"scales\",\"ape\",\"graphlayouts\",\n              \"igraphdata\",\"ggrepel\",\"ggsn\",\"tidyverse\",\"edgebundle\",\n              \"superheat\",\"ggplotify\",\"ggforce\",\"colorspace\",\"ggmap\",\"sf\",\n              \"dplyr\",\"ggpubr\",\"ggraph\",\"ggplot2\",\"reshape2\",\"multinet\",\n              \"RColorBrewer\",\"Rcpp\",\"vegan\",\"intergraph\",\"geosphere\",\n              \"networkDynamic\",\"scatterplot3d\",\"patchwork\")\n\ninstall.packages(setdiff(packages, rownames(installed.packages())))  \n\ndevtools::install_github(\"liamgilbey/ggwaffle\")\n\nif(!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\nBiocManager::install(\"RBGL\")"},{"path":"getting-started.html","id":"suggested-workspace-setup","chapter":"Section 1 Getting Started","heading":"1.4 Suggested Workspace Setup","text":"order follow along examples appendix easiest set R working directory similar format used creating . Specifically, suggest create new working directory create R studio project tied specific directory. , suggest create sub-folder working directory called “data” place files downloaded place appendix folder. Note chose “Just Give Everything” download .zip file already contains sub-folder called “data” sure ’re double nesting folders (want “working_directory/data” “working_directory/data/data”).document created R version 4.04 “Lost Library Book” suggest run current installation R R-studio.","code":""},{"path":"NetworkData.html","id":"NetworkData","chapter":"Section 2 Network Data","heading":"Section 2 Network Data","text":"section provides examples many common network formats data types discussed Chapter 3 Brughmans Peeples 2022. examples use Cibola technological similarity network dataset (described Chapter 2.8.3) relatively small easy display variety formats.","code":""},{"path":"NetworkData.html","id":"network-data-formats","chapter":"Section 2 Network Data","heading":"2.1 Network Data Formats","text":"section follows Chapter 3.2 Brughmans Peeples (2022) provide examples network attribute data variety different data formats well code converting among formats R. examples primarily using “igraph” package also provide examples using “statnet” suite packages (includes “network,” “sna,” “ergm,” others). order clear package using use package name function call (.e., igraph::function_name sna::function_name). See section 3.2 information.Let’s first get started initializing packages use section.","code":"\n# initialize packages\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(vegan)\nlibrary(multinet)"},{"path":"NetworkData.html","id":"Edgelist","chapter":"Section 2 Network Data","heading":"2.1.1 Edge List","text":"edge list quick easy way capture network data. simply lists edges network one one node id: E=((n1,n2),(n1,n3),(n1,n4),…,(ni,nj)). purposes data management usually easiest create edge list data frame matrix row represents pair nodes connections going node one column node second column (additional columns can used edge weight edge attributes).example, import Cibola dataset format data frame convert network object analysis. can download edgelist file follow along . Since edges network undirected simple binary network, use “directed=FALSE” argument igraph::graph_from_edgelist function call.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Examine the first several rows\nhead(Cibola_edgelist)\n#>           FROM                   TO\n#> 1 Apache Creek         Casa Malpais\n#> 2 Apache Creek         Coyote Creek\n#> 3 Apache Creek         Hooper Ranch\n#> 4 Apache Creek      Horse Camp Mill\n#> 5 Apache Creek        Hubble Corner\n#> 6 Apache Creek Mineral Creek Pueblo\n\n# Create graph object. The dataframe is converted to a matrix as that\n#is required by this specific function. Since this is an undirected\n# network directed = FALSE.\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n# Display igraph network object and then plot a simple node-link diagram\nCibola_net\n#> IGRAPH 4729fa1 UN-- 30 167 -- \n#> + attr: name (v/c)\n#> + edges from 4729fa1 (vertex names):\n#>  [1] Apache Creek--Casa Malpais        \n#>  [2] Apache Creek--Coyote Creek        \n#>  [3] Apache Creek--Hooper Ranch        \n#>  [4] Apache Creek--Horse Camp Mill     \n#>  [5] Apache Creek--Hubble Corner       \n#>  [6] Apache Creek--Mineral Creek Pueblo\n#>  [7] Apache Creek--Rudd Creek Ruin     \n#>  [8] Apache Creek--Techado Springs     \n#> + ... omitted several edges\nset.seed(3523) # set random seed to ensure graph layout stays the same each time.\nplot(Cibola_net)"},{"path":"NetworkData.html","id":"adjacency-list","chapter":"Section 2 Network Data","heading":"2.1.2 Adjacency List","text":"adjacency list consists set rows, first node row connected subsequent nodes row. therefore concise edge list (relationship row), unlike edge list result rows equal length (row edge list typically two values, representing pair nodes). Adjacency lists relatively rare practice can sometimes useful formats directly gathering network data small networks supported many network analysis software packages.following chunk code, convert network object created adjacency list examine couple rows.output particular node can called either referencing name using “$” call using\n“[[k]]” brackets k row number node question. printed output essentially list edges incident node question identified name sending receiving node. Notice edge Apache Creek–Casa Malpais shows adjacency lists. undirected network pair connected sites listed adjacency list.","code":"\n# Convert edge list to adjacency list using igraph function\nadj_list <- igraph::as_adj_edge_list(Cibola_net)\n\n# examine adjacency list for the site Apache Creek\nadj_list$`Apache Creek`\n#> + 11/167 edges from 4729fa1 (vertex names):\n#>  [1] Apache Creek--Casa Malpais        \n#>  [2] Apache Creek--Coyote Creek        \n#>  [3] Apache Creek--Hooper Ranch        \n#>  [4] Apache Creek--Horse Camp Mill     \n#>  [5] Apache Creek--Hubble Corner       \n#>  [6] Apache Creek--Mineral Creek Pueblo\n#>  [7] Apache Creek--Rudd Creek Ruin     \n#>  [8] Apache Creek--Techado Springs     \n#>  [9] Apache Creek--Tri-R Pueblo        \n#> [10] Apache Creek--UG481               \n#> + ... omitted several edges\n\n# It is also possible to call specific nodes by number. In this case,\n# site 2 is Casa Malpais\nadj_list[[2]] \n#> + 11/167 edges from 4729fa1 (vertex names):\n#>  [1] Apache Creek--Casa Malpais   \n#>  [2] Casa Malpais--Coyote Creek   \n#>  [3] Casa Malpais--Hooper Ranch   \n#>  [4] Casa Malpais--Horse Camp Mill\n#>  [5] Casa Malpais--Hubble Corner  \n#>  [6] Casa Malpais--Rudd Creek Ruin\n#>  [7] Casa Malpais--Techado Springs\n#>  [8] Casa Malpais--Tri-R Pueblo   \n#>  [9] Casa Malpais--UG481          \n#> [10] Casa Malpais--Garcia Ranch   \n#> + ... omitted several edges"},{"path":"NetworkData.html","id":"adjacency-matrix","chapter":"Section 2 Network Data","heading":"2.1.3 Adjacency Matrix","text":"adjacency matrix perhaps common versatile network data format data analysis network science (sociology sometimes referred sociomatrix). symmetric matrix size n x n, set rows columns denoting nodes network. node names identifiers typically used label rows columns. pair nodes connected edge (.e. adjacent), corresponding cell entry. diagonal matrix represents “self loops” can variously defined connected unconnected depending application.can obtain adjacency matrix object R converting network object created reading file directly rows columns denoting site 0 1 denoting presence absence relation. can download csv file follow along .Note compare network graph one produced based edge list additional unconnected node (WS Ranch) shown previous network. one advantages adjacency matrix provides way easily including unconnected nodes without manually add include self-loops.","code":"\n# Convert to adjacency matrix then display first few rows/columns\nadj_mat <- igraph::as_adjacency_matrix(Cibola_net)\nhead(adj_mat)\n#> 6 x 30 sparse Matrix of class \"dgCMatrix\"\n#>                                                            \n#> Apache Creek    . 1 1 1 1 1 1 1 1 1 1 1 . . . . . . . . . .\n#> Casa Malpais    1 . 1 1 1 1 . 1 1 1 1 . . . . . . . . . . .\n#> Coyote Creek    1 1 . 1 1 1 1 1 1 1 1 . . . . . . . . . . .\n#> Hooper Ranch    1 1 1 . 1 1 1 1 1 1 1 1 . . . . . . . . . .\n#> Horse Camp Mill 1 1 1 1 . 1 1 1 1 1 1 . . . . . . . . . . .\n#> Hubble Corner   1 1 1 1 1 . 1 1 1 1 1 1 . . . . . . . . . .\n#>                                \n#> Apache Creek    . . . . . . . .\n#> Casa Malpais    1 1 . . . . . .\n#> Coyote Creek    1 . . . . . . .\n#> Hooper Ranch    . . . . . . . .\n#> Horse Camp Mill 1 1 . . . . . .\n#> Hubble Corner   . 1 . . . . 1 .\n\n# Read in adjacency matrix and convert to network object for plotting\nadj_mat2 <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = T,\n           row.names = 1)\nCibola_net2 <-\n  igraph::graph_from_adjacency_matrix(as.matrix(adj_mat2),\n                                      mode = \"undirected\")\nset.seed(4352)\nplot(Cibola_net2)"},{"path":"NetworkData.html","id":"incidence-matrix","chapter":"Section 2 Network Data","heading":"2.1.4 Incidence Matrix","text":"incidence matrix frequently used define connections among different sets nodes two-mode bipartite network rows columns represent two different classes nodes presence/absence value edge indicated corresponding cell.way example can read data used generate one-mode networks ceramic technological similarity examining far. corresponding data frame, row represents site column represents specific cluster technological attributes cooking pottery (see Peeples 2018, pg. 100-104 details) number cell representing count technological cluster site.creating network object plot simple two-mode network color representing node class. discuss plotting options greater detail visualization section appendix.","code":"\n# Read in two-way table of sites and ceramic technological clusters\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\nhead(Cibola_clust)\n#>              Clust1 Clust2 Clust3 Clust4 Clust5 Clust6\n#> Apache Creek      7      3      6     16      6      1\n#> Atsinna           0     12     26      5      0      1\n#> Baca Pueblo       0      9      3     12      1      2\n#> Casa Malpais      2     15      7     28     17     16\n#> Cienega           2     28     34      2      0     10\n#> Coyote Creek     10     13      8     30     20      5\n#>              Clust7 Clust8 Clust9 Clust10\n#> Apache Creek      1      2      0       0\n#> Atsinna           6      0      7       0\n#> Baca Pueblo       5      0     16       1\n#> Casa Malpais      2      5      1       0\n#> Cienega          11      0      5       1\n#> Coyote Creek      1      8      0       5\n\n# Convert into a network object using the incidence matrix format. Note that\n# multiple=TRUE as we want this defined as a bipartite network.\nCibola_inc <-\n  igraph::graph_from_incidence_matrix(Cibola_clust, directed = FALSE, multiple =\n                                        TRUE)\nhead(Cibola_inc)\n#> 6 x 41 sparse Matrix of class \"dgCMatrix\"\n#>                                                           \n#> Apache Creek . . . . . . . . . . . . . . . . . . . . . . .\n#> Atsinna      . . . . . . . . . . . . . . . . . . . . . . .\n#> Baca Pueblo  . . . . . . . . . . . . . . . . . . . . . . .\n#> Casa Malpais . . . . . . . . . . . . . . . . . . . . . . .\n#> Cienega      . . . . . . . . . . . . . . . . . . . . . . .\n#> Coyote Creek . . . . . . . . . . . . . . . . . . . . . . .\n#>                                                         \n#> Apache Creek . . . . . . . .  7  3  6 16  6  1  1 2  . .\n#> Atsinna      . . . . . . . .  . 12 26  5  .  1  6 .  7 .\n#> Baca Pueblo  . . . . . . . .  .  9  3 12  1  2  5 . 16 1\n#> Casa Malpais . . . . . . . .  2 15  7 28 17 16  2 5  1 .\n#> Cienega      . . . . . . . .  2 28 34  2  . 10 11 .  5 1\n#> Coyote Creek . . . . . . . . 10 13  8 30 20  5  1 8  . 5\n\nset.seed(4543)\n# Plot as two-mode network\nplot(Cibola_inc, vertex.color = as.numeric(V(Cibola_inc)$type) + 1)"},{"path":"NetworkData.html","id":"node-and-edge-information","chapter":"Section 2 Network Data","heading":"2.1.5 Node and Edge Information","text":"Frequently want use information nodes edges (node location, site type, edge weight, etc.) analyses need track data separate attribute object data column. One common way simply create data frame contains required attribute information call specific data data frame needed. following example shows, also possible directly assign attributes nodes edges graph object use subsequent analyses using “V()” vertices (nodes) “E()” edges calls within igraph.following example use file includes basic attribute data site (node) sites network ’ve working . file includes x y coordinates sites, information presence/absence shape Great Kiva public architectural features sites, Region assigned.order assign attribute particular node edge can use V E (vertex edge) calls igraph. example, following example, assign region variable node network created using V function assign vertex attribute. simply type name network object parenthesis V use “$” atomic variable symbol assign name attribute associated network object.can used plotting analyses calling variable factor","code":"\n# Read in attribute data and look at the first few rows.\nCibola_attr <- read.csv(file = \"data/Cibola_attr.csv\", header = TRUE)\nhead(Cibola_attr)\n#>           Site      x       y             Great.Kiva\n#> 1 Apache Creek 724125 3747310 Rectangular Great Kiva\n#> 2      Atsinna 726741 3895499                   none\n#> 3  Baca Pueblo 651431 3797143                   none\n#> 4 Casa Malpais 659021 3786211 Rectangular Great Kiva\n#> 5      Cienega 738699 3887985                   none\n#> 6 Coyote Creek 671154 3780509 Rectangular Great Kiva\n#>                  Region\n#> 1    Mogollon Highlands\n#> 2       El Morro Valley\n#> 3 Upper Little Colorado\n#> 4 Upper Little Colorado\n#> 5       El Morro Valley\n#> 6 Upper Little Colorado\n# Assign a variable called \"region\" to the Cibola_net2 based on the\n# column in the Cibola_attr table called \"Region\"\nV(Cibola_net2)$region <- Cibola_attr$Region\n\n# If we now call that attribute we get a vector listing each assigned value\nV(Cibola_net2)$region\n#>  [1] \"Mogollon Highlands\"    \"El Morro Valley\"      \n#>  [3] \"Upper Little Colorado\" \"Upper Little Colorado\"\n#>  [5] \"El Morro Valley\"       \"Upper Little Colorado\"\n#>  [7] \"Mogollon Highlands\"    \"Carrizo Wash\"         \n#>  [9] \"Pescado Basin\"         \"West Zuni\"            \n#> [11] \"Upper Little Colorado\" \"Mariana Mesa\"         \n#> [13] \"Mariana Mesa\"          \"West Zuni\"            \n#> [15] \"El Morro Valley\"       \"Vernon Area\"          \n#> [17] \"El Morro Valley\"       \"West Zuni\"            \n#> [19] \"Pescado Basin\"         \"Carrizo Wash\"         \n#> [21] \"El Morro Valley\"       \"Upper Little Colorado\"\n#> [23] \"El Morro Valley\"       \"West Zuni\"            \n#> [25] \"Mariana Mesa\"          \"El Morro Valley\"      \n#> [27] \"Mariana Mesa\"          \"Mariana Mesa\"         \n#> [29] \"Mariana Mesa\"          \"Mogollon Highlands\"   \n#> [31] \"Pescado Basin\"\n\nset.seed(43534)\nplot(Cibola_net2, vertex.color = as.factor(V(Cibola_net2)$region))"},{"path":"NetworkData.html","id":"types-of-networks","chapter":"Section 2 Network Data","heading":"2.2 Types of Networks","text":"section roughly follows Brughmans Peeples (2022) Chapter 3.3 describe provide examples R format many common types networks. examples use igraph R package also show use statnet network packages applicable.","code":""},{"path":"NetworkData.html","id":"simple-networks","chapter":"Section 2 Network Data","heading":"2.2.1 Simple Networks","text":"Simple networks unweighted undirected one-mode networks. way example use Cibola region adjacency matrix file convert simple network using igraph statnet/network. Notice examples specify undirected network (mode=“undirected” directed=FALSE).Notice two formats differ way internally store network data R way print output screen show total 31 nodes (vertices) 167 edges (igraph object first row specifies node edge numbers – marks).","code":"\n# Read in raw adjacency matrix file\nadj_mat2 <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = T,\n           row.names = 1)\n\n# Convert to a network object using igraph\nsimple_net_i <-\n  igraph::graph_from_adjacency_matrix(as.matrix(adj_mat2),\n                                      mode = \"undirected\")\nsimple_net_i\n#> IGRAPH 485a51e UN-- 31 167 -- \n#> + attr: name (v/c)\n#> + edges from 485a51e (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n\n# Covert to a network object using statnet/network\nsimple_net_s <-\n  network::network(as.matrix(adj_mat2), directed = FALSE)\nsimple_net_s\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes"},{"path":"NetworkData.html","id":"directed-networks","chapter":"Section 2 Network Data","heading":"2.2.2 Directed Networks","text":"Sometimes relationships directional, meaning orientation. example, flow river directed downstream. cases can incorporate information network data distinguishing source target edge.way example modify Cibola network edge list remove number edges random simulate directed network data. convert data various network matrix formats illustrate directed networks stored used R.Notice look igraph network plot arrows indicating direction connection edge list. making directed edge list, sending node default left column receiving node right column. adjacency matrix upper lower triangles longer identical. , generating adjacency matrix, can simply mark edges sent nodes denoted rows edges received nodes columns. Finally, plot, since R recognizes directed igraph object plot network, automatically shows arrows indicating direction edge.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Create a random sub-sample of 125 edges out of the total 167 using\n# the \"sample\" function\nset.seed(45325)\nEL2 <- Cibola_edgelist[sample(seq(1, nrow(Cibola_edgelist)), 125,\n                              replace = FALSE), ]\n\n# Create graph object from the edge list using the directed=TRUE argument\n# to ensure this is treated as a directed network object.\ndirected_net <-\n  igraph::graph_from_edgelist(as.matrix(EL2), directed = TRUE)\ndirected_net\n#> IGRAPH 4863065 DN-- 30 125 -- \n#> + attr: name (v/c)\n#> + edges from 4863065 (vertex names):\n#>  [1] Coyote Creek   ->Techado Springs      \n#>  [2] Hubble Corner  ->Tri-R Pueblo         \n#>  [3] Hubble Corner  ->Techado Springs      \n#>  [4] Heshotauthla   ->Pueblo de los Muertos\n#>  [5] Rudd Creek Ruin->Techado Springs      \n#>  [6] Heshotauthla   ->Hinkson              \n#>  [7] Los Gigantes   ->Yellowhouse          \n#>  [8] Los Gigantes   ->Pueblo de los Muertos\n#> + ... omitted several edges\n\n# View as adjacency matrix of direted network object\nhead(as_adjacency_matrix(directed_net))\n#> 6 x 30 sparse Matrix of class \"dgCMatrix\"\n#>                                                            \n#> Coyote Creek          . 1 1 . . . 1 . . . . . 1 . . . . . .\n#> Techado Springs       . . . 1 . . . . . . . . . . . . . . .\n#> Hubble Corner         . 1 . 1 . . 1 . . . . . . . . . . . .\n#> Tri-R Pueblo          . . . . . . . . . . . . . . . . . 1 .\n#> Heshotauthla          . . . . . 1 . 1 1 1 1 1 . . 1 . 1 . 1\n#> Pueblo de los Muertos . . . . . . . . . . . . . . . . . . 1\n#>                                            \n#> Coyote Creek          . . 1 . . . . . . 1 .\n#> Techado Springs       . . . . . . . . . 1 .\n#> Hubble Corner         1 . . . . . . . . 1 .\n#> Tri-R Pueblo          . . . . . . . . . 1 .\n#> Heshotauthla          . 1 . . . . . . 1 . .\n#> Pueblo de los Muertos . . . . . . . . . . .\n\n# Plot network\nset.seed(4353)\nplot(directed_net)"},{"path":"NetworkData.html","id":"signed-categorized-and-valued-networks","chapter":"Section 2 Network Data","heading":"2.2.3 Signed, Categorized, and Valued Networks","text":"many situations want add values specific edges signs (sometimes called valences) weights defining strength nature relationships. variety ways can record assign weights values edges R. simplest way directly include information one formats described edge list adjacency matrix. example, can add third column edge list denotes weight sign edge can fill cells adjacency matrix specific values rather simply 1s 0s.example, random generate edge weights Cibola network edge list adjacency matrix illustrate R handles formats.Notice final plot line thickness used indicate edges various weights. explore options visualizations network visualizations section appendix.","code":"\n# Read in edge list file as data frame\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n# Add additional column of weights as random integers between 1 and 4\n# for each edge\nCibola_edgelist$Weight <-\n  sample(seq(1, 4), nrow(Cibola_edgelist), replace = TRUE)\n\n# Create weighted network object calling only the first two columns\nweighted_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist[, 1:2]),\n                              directed = FALSE)\n# add edge attribute to indicate weight\nE(weighted_net)$weight <- Cibola_edgelist$Weight\n\n# Explore the first few rows of network object\nhead(get.data.frame(weighted_net))\n#>           from                   to weight\n#> 1 Apache Creek         Casa Malpais      4\n#> 2 Apache Creek         Coyote Creek      1\n#> 3 Apache Creek         Hooper Ranch      1\n#> 4 Apache Creek      Horse Camp Mill      3\n#> 5 Apache Creek        Hubble Corner      4\n#> 6 Apache Creek Mineral Creek Pueblo      4\n\n# View network as adjacency matrix. Notice the attr=\"weight\" command that\n# indicates which edge attribute to use for values in the matrix\nhead(as_adjacency_matrix(weighted_net, attr = \"weight\"))\n#> 6 x 30 sparse Matrix of class \"dgCMatrix\"\n#>                                                            \n#> Apache Creek    . 4 1 1 3 4 4 3 4 3 3 1 . . . . . . . . . .\n#> Casa Malpais    4 . 1 1 2 3 . 4 4 3 2 . . . . . . . . . . .\n#> Coyote Creek    1 1 . 1 4 2 3 2 2 1 2 . . . . . . . . . . .\n#> Hooper Ranch    1 1 1 . 4 1 2 2 3 3 1 3 . . . . . . . . . .\n#> Horse Camp Mill 3 2 4 4 . 2 1 3 1 4 4 . . . . . . . . . . .\n#> Hubble Corner   4 3 2 1 2 . 2 3 1 1 2 4 . . . . . . . . . .\n#>                                \n#> Apache Creek    . . . . . . . .\n#> Casa Malpais    2 1 . . . . . .\n#> Coyote Creek    4 . . . . . . .\n#> Hooper Ranch    . . . . . . . .\n#> Horse Camp Mill 2 4 . . . . . .\n#> Hubble Corner   . 4 . . . . 3 .\n\n# Plot the network\nset.seed(574)\nplot(weighted_net, edge.width = E(weighted_net)$weight)"},{"path":"NetworkData.html","id":"two-mode-networks-and-affiliation-networks","chapter":"Section 2 Network Data","heading":"2.2.4 Two-mode Networks and Affiliation Networks","text":"Two-mode networks networks two separate categories nodes defined structural variable (edges) categories. sociology, two-mode networks often used studying affiliation individuals organizations, presence professionals boards companies attendance scholars conferences (referred affiliation networks).Two-mode network data typically recorded two-way table rows columns representing two different classes nodes individual cells representing presence/absence weight edges classes nodes. way example return table ceramic technological clusters sites Cibola region data. simplest way create unweighted two-mode network data create network object directly two-way table saw . example create edge site technological cluster present irrespective relative frequency.case since clusters present sites, creates pretty busy network may particularly useful. alternative define threshold (either terms raw count proportion) define edge node one class another. provide example build function modify data. function can set proportion threshold like used define edge two classes nodes. proportion cluster site greater equal threshold edge present.Notice now far fewer ties familiar sites question might notice clear regional patterning.also possible create one-mode projections two-mode data using simple matrix algebra. need multiply matrix transpose matrix. results adjacency matrix whichever set nodes represented rows first matrix matrix multiplication. example using “mod_clust” incidence matrix threshold created . resulting incidence matrix individual cells represent number different edges common nodes question can treated like edge weight. diagonal matrix total number clusters present site assemblage.","code":"\n# Read in two-way table of sites and ceramic technological clusters\nCibola_clust <- read.csv(file = \"data/Cibola_clust.csv\",\n                         header = TRUE,\n                         row.names = 1)\n# Create network from incidence matrix based on presence/absence of\n# a cluster at a site\nCibola_inc <- igraph::graph_from_incidence_matrix(Cibola_clust,\n                                                  directed = FALSE,\n                                                  multiple = TRUE)\nCibola_inc\n#> IGRAPH 48ac062 UN-B 41 2214 -- \n#> + attr: type (v/l), name (v/c)\n#> + edges from 48ac062 (vertex names):\n#>  [1] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [3] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [5] Apache Creek--Clust1 Apache Creek--Clust1\n#>  [7] Apache Creek--Clust1 Apache Creek--Clust2\n#>  [9] Apache Creek--Clust2 Apache Creek--Clust2\n#> [11] Apache Creek--Clust3 Apache Creek--Clust3\n#> [13] Apache Creek--Clust3 Apache Creek--Clust3\n#> [15] Apache Creek--Clust3 Apache Creek--Clust3\n#> + ... omitted several edges\nset.seed(4537643)\n# Plot as two-mode network\nplot(Cibola_inc, vertex.color = as.numeric(V(Cibola_inc)$type) + 1)\n# Define function for creating incidence matrix with threshold\ntwo_mode <- function (x, thresh = 0.25) {\n  # Create matrix of proportions from x input into function\n  temp <- prop.table(as.matrix(x), 1)\n  # Define anything with greater than or equal to threshold as\n  # present (1)\n  temp[temp >= thresh] <- 1\n  # Define all other cells as absent (0)\n  temp[temp < 1] <- 0\n  # Return the new binarized table as output of the function\n  return(temp)\n}\n\n# Run the function and create network object\n# thresh is set to 0.25 but could be any values from 0-1\nmod_clust <- two_mode(Cibola_clust, thresh = 0.25)\n# Examine the first few rows\nhead(mod_clust)\n#>              Clust1 Clust2 Clust3 Clust4 Clust5 Clust6\n#> Apache Creek      0      0      0      1      0      0\n#> Atsinna           0      0      1      0      0      0\n#> Baca Pueblo       0      0      0      0      0      0\n#> Casa Malpais      0      0      0      1      0      0\n#> Cienega           0      1      1      0      0      0\n#> Coyote Creek      0      0      0      1      0      0\n#>              Clust7 Clust8 Clust9 Clust10\n#> Apache Creek      0      0      0       0\n#> Atsinna           0      0      0       0\n#> Baca Pueblo       0      0      1       0\n#> Casa Malpais      0      0      0       0\n#> Cienega           0      0      0       0\n#> Coyote Creek      0      0      0       0\n# Create a graph matrix from the new incidence matrix\ntwo_mode_net <- igraph::graph_from_incidence_matrix(\n                          mod_clust,\n                          directed = FALSE,\n                          multiple = TRUE)\n\n# Plot results\nset.seed(4537)\nplot(two_mode_net, \n     vertex.color = as.numeric(V(Cibola_inc)$type) + 1)\n# In R the command \"%*%\" indicates matrix multiplication and \"t()\"\n# gives the transpose of the matrix within the parentheses.\n# Lets first create a one-mode projection focused on sites\nsite_mode <- mod_clust %*% t(mod_clust)\nsite_net <- igraph::graph_from_adjacency_matrix(site_mode,\n                                                mode = \"undirected\",\n                                                diag = FALSE)\nplot(site_net)\n\n# Now lets create a one-mode projection focused on ceramic\n# technological clusters.\n# Notice that the only change is we switch which side of the\n# matrix multiplication we transpose.\nclust_mode <- t(mod_clust) %*% mod_clust\nhead(clust_mode)\n#>        Clust1 Clust2 Clust3 Clust4 Clust5 Clust6 Clust7\n#> Clust1      1      0      0      0      0      0      0\n#> Clust2      0     16      9      1      0      2      0\n#> Clust3      0      9     10      0      0      1      0\n#> Clust4      0      1      0     11      1      0      0\n#> Clust5      0      0      0      1      1      0      0\n#> Clust6      0      2      1      0      0      2      0\n#>        Clust8 Clust9 Clust10\n#> Clust1      0      0       0\n#> Clust2      0      0       0\n#> Clust3      0      0       0\n#> Clust4      0      0       0\n#> Clust5      0      0       0\n#> Clust6      0      0       0\n\nclust_net <- igraph::graph_from_adjacency_matrix(clust_mode,\n                                                 mode = \"undirected\",\n                                                 diag = FALSE)\nplot(clust_net)"},{"path":"NetworkData.html","id":"similarity-networks","chapter":"Section 2 Network Data","heading":"2.2.5 Similarity Networks","text":"Similarity networks simply refer one-mode networks nodes defined entities interest edges defined /weighted based metric similarity (distance) defined based features, attributes, assemblage associated node. approach frequently used archaeology explore material cultural networks nodes contexts interests (e.g., sites, excavation units, houses, etc.) edges defined weighted based similarities relative frequencies artifacts particular classes artifacts recovered contexts.many different ways define track similarity network data use R. example, show several methods using affiliation data used previous example. Specifically, define weight edges based similarities frequencies ceramic technological clusters sites Cibola region sample.examples use statnet package network package within rather igraph statnet additional functions useful working similarity data. following examples, first demonstrate several different similarity/distance metrics discuss approaches binarization similarity networks options working weighted data.","code":""},{"path":"NetworkData.html","id":"brainerd-robinson-similarity","chapter":"Section 2 Network Data","heading":"Brainerd-Robinson Similarity","text":"first metric explore rescaled version Brainerd-Robinson (BR) similarity metric. BR measure commonly used archaeology including number recent (recent) network studies. measure represents total similarity proportional representation categories defined :\\[S = {\\frac{2-\\sum_{k} \\left|x_{k} - y_{k}\\right|} {2}}\\], categories \\(k\\), \\(x\\) proportion \\(k\\) first assemblage \\(y\\) proportion \\(k\\) second. subtract sum 2 2 maximum proportional difference possible two samples. divide result 2. provides scale similarity 0-1 1 perfect similarity 0 indicates similarity. chunk defines code calculating modified BR similarity measure. Note use distance metric called “Manhattan Distance” built “vegan” package R. metric identical Brainerd-Robinson metric.point simply define weighted network object weights equal similarity scores, define threshold defining edges present absent. discuss options detail presenting similarity/distance metrics.","code":"\n# Read in raw data\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\n\n# First we need to convert the ceramic technological clusters into proportions\nclust_p <- prop.table(as.matrix(Cibola_clust), margin = 1)\n\n# The following line uses the vegdist function in the vegan package\n# to calculate the Brainard-Robinson similarity score. Since vegdist\n# by default defines an unscaled distance we must subtract the results\n# from 2 and then divide by 2 to get a similarity scaled from 0 to 1.\nCibola_BR <- (2 - as.matrix(vegan::vegdist(clust_p,\n                                           method = 'manhattan'))) / 2\n\n# Lets look at the first few rows.\nCibola_BR[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.3433584   0.4455782\n#> Atsinna         0.3433584 1.0000000   0.5750090\n#> Baca Pueblo     0.4455782 0.5750090   1.0000000\n#> Casa Malpais    0.7050691 0.3740804   0.5608953\n#>              Casa Malpais\n#> Apache Creek    0.7050691\n#> Atsinna         0.3740804\n#> Baca Pueblo     0.5608953\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"morisitas-overlap-index","chapter":"Section 2 Network Data","heading":"Morisita’s Overlap Index","text":"Another measure used defining similarities among assemblages archaeological similarity networks Morisita’s overlap index. measure measure overlap individual assemblages within larger population takes size samples account. Specifically, approach assumes sample size increases diversity likely increase. measure produces results similar Brainerd-Robinson metric practice cases measure may preferred dramatic differences assemblage sizes among observations.Morisita’s index calculated :\\[C_D=\\frac{2 \\Sigma^Sx_iy_i}{(D_x + D_y)XY}\\]:\n\\(x_i\\) number rows category \\(\\) represented total \\(X\\) population.\n\\(y_i\\) number rows category \\(\\) presented total \\(Y\\) population.\n\\(D_x\\) \\(D_y\\) Simpson’s diversity index values \\(x\\) \\(y\\) respectively.\n\\(S\\) total number columns.metric ranges 0 (categories overlap ) 1 categories occur proportions samples. metric works absolute counts can run vegdist function directly “Cibola_clust” object. want similarity rather distance (default function R) subtract results 1.","code":"\n# Calculate matrix of Morisita similarities based on the\n# Cibola_clust two-way table.\nCibola_Mor <- 1 - as.matrix(vegan::vegdist(Cibola_clust,\n                                           method = 'morisita'))\nCibola_Mor[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.4885799   0.6014729\n#> Atsinna         0.4885799 1.0000000   0.5885682\n#> Baca Pueblo     0.6014729 0.5885682   1.0000000\n#> Casa Malpais    0.9060751 0.4459998   0.6529069\n#>              Casa Malpais\n#> Apache Creek    0.9060751\n#> Atsinna         0.4459998\n#> Baca Pueblo     0.6529069\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"chi2-distance","chapter":"Section 2 Network Data","heading":"\\(\\chi^{2}\\) Distance","text":"next measure use \\(\\chi^{2}\\) distance metric basis correspondence analysis related methods commonly used frequency seriation archaeology (note probably really called \\(\\chi\\) distance since typical form use squared, name persists way literature ’s use ). measure defined :\\[\\chi_{jk} = \\sqrt{\\sum \\frac 1{c_{j}}\n({x_{j}-y_{j})^{2}}}\\]\\(c_j\\) denotes \\(j_{th}\\) element average row profile (proportional abundance \\(j\\) across rows) \\(x\\) \\(y\\) represent row profiles two sites comparison. metric therefore takes raw abundance (rather simply proportional representation) account defining distance sites. definition metric rare categories play greater role defining distances among sites common categories (correspondence analysis). measure minimum value 0 theoretical upper limit.code calculating \\(\\chi^{2}\\) distances defined chunk new object called “Cibola_X” created using measure. sometimes preferable rescale measure bounded 0 1. create second object called “Cibola_X01” represents rescaled distances simply dividing matrix maximum observed value (many ways fine demonstration purposes). , subtract results 1 convert distance similarity.","code":"\n# Define function for calculating chi-squared distance\nchi_dist <- function(x) {\n  # calculates the profile for every row\n  rowprof <- x / apply(x, 1, sum)\n  # calculates the average profile\n  avgprof <- apply(x, 2, sum) / sum(x)\n  # creates a distance object of chi-squared distances\n  chid <- dist(as.matrix(rowprof) %*% diag(1 / sqrt(avgprof)))\n  # return the results\n  return(as.matrix(chid))\n}\n\n# Run the script and then create the rescaled 0-1 version\nCibola_X <- chi_dist(Cibola_clust)\nCibola_X01 <- 1 - (Cibola_X / max(Cibola_X))\n\nCibola_X01[1:4, 1:4]\n#>              Apache Creek   Atsinna Baca Pueblo\n#> Apache Creek    1.0000000 0.2904662   0.1010795\n#> Atsinna         0.2904662 1.0000000   0.3393173\n#> Baca Pueblo     0.1010795 0.3393173   1.0000000\n#> Casa Malpais    0.6166508 0.2999925   0.1469591\n#>              Casa Malpais\n#> Apache Creek    0.6166508\n#> Atsinna         0.2999925\n#> Baca Pueblo     0.1469591\n#> Casa Malpais    1.0000000"},{"path":"NetworkData.html","id":"creating-network-objects-from-similarity-matrices","chapter":"Section 2 Network Data","heading":"Creating Network Objects from Similarity Matrices","text":"Now defined three measures similarity, next step convert network objects R packages able work . can either creating binary networks (ties either present absent) weighted networks (many cases simply raw similarity/distance matrices calculated ). provide examples approaches, starting simple binary networks. many ways define networks matrices like generated examples seen exhaustive set procedures.","code":""},{"path":"NetworkData.html","id":"creating-binary-network-objects","chapter":"Section 2 Network Data","heading":"Creating binary network objects","text":"First, produce network object based BR similarity matrix created . example, define ties present pairs sites share 65% commonality (BR > 0.65) terms proportions ceramics recovered pairs sites.code , event2dichot function (“statnet” package) takes matrix divides 1s 0s based cut choose. ’re using ‘absolute’ cut meaning ’re assigning specific value use cut (0.65). send output function network function just .next chunk code use \\(\\chi^2\\) distances create binary networks. time, use absolute value define ties present, instead define similarities greater 80 percent similarities present. plot just .","code":"\n# Define our binary network object from BR similarity\nBRnet <-\n  network(event2dichot(Cibola_BR, method = 'absolute', thresh = 0.65),\n          directed = FALSE)\n# Now let's add names for our nodes based on the row names\n# of our original matrix\nBRnet %v% 'vertex.names' <- row.names(Cibola_clust)\n# look at the results.\nBRnet\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes\n\n# plot network using default layout\nset.seed(7564)\nplot(BRnet)\n# Note we use 1 minus chacoX01 here so to convert a distance\n# to a similarity\nXnet <-\n  network(event2dichot(Cibola_X01, \n                       method = 'quantile', \n                       thresh = 0.80),\n                       directed = FALSE)\n# Once again add vertext names\nXnet %v% 'vertex.names' <- row.names(Cibola_clust)\n# look at the results\nXnet\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 80 \n#>     missing edges= 0 \n#>     non-missing edges= 80 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes\n\n# plot network using default layout\nset.seed(346)\nplot(Xnet)"},{"path":"NetworkData.html","id":"creating-weighted-network-objects","chapter":"Section 2 Network Data","heading":"Creating Weighted Network Objects","text":"also possible use R create weighted networks individual edges valued. found works reasonably well networks co-presence something similar (counts mentions texts monuments example) perform well applied large similarity distance matrices (every possible link value, network gets unwieldy fast). latter case, found often better just work directly underlying similarity/distance matrix., however, chose create weighted network object similarity matrix requires slight modification procedure . chunk code , simply add arguments “ignore.eval=F” “names.eval=‘weight’” let network function know like weights retained like attribute called ‘weight’. apply matrix Morisita similarities defined plot result.resulting network nearly complete bit unwieldy plotting calculating network statistics weighted network can often still useful see exploratory analysis section.","code":"\n# create weighted network object from co-occurrence matrix by\n# adding the ignore.eval=F argument\nMor_wt <- network(\n  Cibola_Mor,\n  directed = FALSE,\n  ignore.eval = FALSE,\n  names.eval = 'weight'\n)\n\nMor_wt %v% 'vertex.names' <- row.names(Cibola_Mor)\nMor_wt\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 465 \n#>     missing edges= 0 \n#>     non-missing edges= 465 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#>  Edge attribute names: \n#>     weight\n\n# plot weighted network using default layout\nset.seed(4634)\nplot(Mor_wt)"},{"path":"NetworkData.html","id":"converting-among-network-object-formats","chapter":"Section 2 Network Data","heading":"Converting Among Network Object Formats","text":"examples document using igraph package similarity networks chose use statnet due convenience functions working directly similarity matrices. worry easy convert one format another preserve attributes using package called intergraph. way example can covert weighted network object created previous step convert igraph object view attributes using “asIgraph” function. wanted go direction covert igraph object statnet/network object instead use “asNetwrok”.","code":"\nMor_wt_i <- asIgraph(Mor_wt)\nMor_wt_i\n#> IGRAPH 49fdd46 U-W- 31 465 -- \n#> + attr: na (v/l), vertex.names (v/c), na (e/l),\n#> | weight (e/n)\n#> + edges from 49fdd46:\n#>  [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--10\n#> [10] 1--11 1--12 1--13 1--14 1--15 1--16 1--17 1--18 1--19\n#> [19] 1--20 1--21 1--22 1--23 1--24 1--25 1--26 1--27 1--28\n#> [28] 1--29 1--30 1--31 2-- 3 2-- 4 2-- 5 2-- 6 2-- 7 2-- 8\n#> [37] 2-- 9 2--10 2--11 2--12 2--13 2--14 2--15 2--16 2--17\n#> [46] 2--18 2--19 2--20 2--21 2--22 2--23 2--24 2--25 2--26\n#> [55] 2--27 2--28 2--29 2--30 2--31 3-- 4 3-- 5 3-- 6 3-- 7\n#> + ... omitted several edges\n\n# view first 10 edge weights to show that they are retained\nE(Mor_wt_i)$weight[1:10]\n#>  [1] 0.4885799 0.6014729 0.9060751 0.4049019 1.0000000\n#>  [6] 0.7087214 0.7724938 0.4521581 0.7996468 1.0000000"},{"path":"NetworkData.html","id":"ego-networks","chapter":"Section 2 Network Data","heading":"2.2.6 Ego Networks","text":"aim understand relational environment within entity embedded, relevant research questions data collection challenges dictate focus, archaeological network research can make use -called ego-networks: type network includes focal node (-called ego), set nodes ego connected edge (-called alters) edges set nodes.Extracting ego-network existing igraph network object R easy. extract plot ego-network Apache Creek, first site network files created .ego-networks, nodes connected target nodes (Apache Creek first example Platt Ranch second) shown edges among included nodes shown.also possible determine size ego-networks entire one-mode network using “ego_size” function. output function vector can assigned network node attribute.","code":"\n# Read in edgelist file as dataframe\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\n\n# Create graph object. The dataframe is converted to a matrix as\n# that is required by this specific function. Since this is an\n# undirected network, directed = FALSE.\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n# Extract ego-networks\nego_nets <- make_ego_graph(Cibola_net)\n\n# Examine the first ego-network\nego_nets[[1]]\n#> IGRAPH 4a05501 UN-- 12 59 -- \n#> + attr: name (v/c)\n#> + edges from 4a05501 (vertex names):\n#>  [1] Apache Creek--Casa Malpais   \n#>  [2] Apache Creek--Coyote Creek   \n#>  [3] Casa Malpais--Coyote Creek   \n#>  [4] Apache Creek--Hooper Ranch   \n#>  [5] Casa Malpais--Hooper Ranch   \n#>  [6] Coyote Creek--Hooper Ranch   \n#>  [7] Apache Creek--Horse Camp Mill\n#>  [8] Casa Malpais--Horse Camp Mill\n#> + ... omitted several edges\n\n# Plot Apache Creek ego-network\nset.seed(754)\nplot(ego_nets[[1]])\n\n# Plot Platt Ranch ego-network for comparison\nset.seed(45367)\nplot(ego_nets[[30]])\nego_size(Cibola_net)\n#>  [1] 12 12 12 12 13 14 13 13 10 14 15  7  9 14 13 14 15 11\n#> [19] 14 14 15  2 14 19 15 12 12 11  7  6"},{"path":"NetworkData.html","id":"multilayer-networks","chapter":"Section 2 Network Data","heading":"2.2.7 Multilayer Networks","text":"simplest terms, multilayer networks networks single set nodes connected two sets edges represent different kind relationship among nodes. relatively new area network science archaeological network research expect likely change coming years. now new R packages help manage analyze multilayer network data.multinet package (Rossi Vega 2021) designed facilitate analysis multilayer networks. order explore possibilities use example data analyses included package. Specifically, look famous network data Florentine families 14th century connections defined terms business marriage.multinet network objects essentially compatible igraph individual layers can analyzed just like igraph network objects. multinet approach likely greater utility conducting comparisons among layers conducting analyses take several layers account simultaneously. detailed exploration approach beyond scope document (provide simple example ) suggest interested readers read package information tutorials associated package .","code":"\n# create object with Florentine multilayer network data\nflorentine <- ml_florentine()\n\n# Examine the data\nflorentine\n#> ml-net[15, 2, 26, 35 (35,0)]\nsummary(florentine)\n#>           n  m dir nc slc      dens        cc      apl dia\n#> _flat_   15 35   0  1  15 0.3333333 0.3409091 2.085714   4\n#> business 11 15   0  1  11 0.2727273 0.4166667 2.381818   5\n#> marriage 15 20   0  1  15 0.1904762 0.1914894 2.485714   5\n\n# plot the data\nplot(florentine)\n# If we want to calculate degree centrality across multiple layers of a\n# multilayer network, the multinet package can help us do that directly\n# and quite simply.\nmultinet::degree_ml(florentine)\n#>  [1]  4  3  7  4  5  3  2 11  6  3  6  6  3  6  1\n\n# Similarly, we could apply cluster detection algorithms to all layers\n# of a multilayer network simultaneously.\nmultinet::glouvain_ml(florentine)\n#>           actor    layer cid\n#> 1    Tornabuoni business   0\n#> 2    Tornabuoni marriage   0\n#> 3       Ridolfi marriage   0\n#> 4      Salviati business   0\n#> 5      Salviati marriage   0\n#> 6         Pazzi business   0\n#> 7         Pazzi marriage   0\n#> 8        Medici business   0\n#> 9        Medici marriage   0\n#> 10   Acciaiuoli marriage   0\n#> 11      Peruzzi business   1\n#> 12      Peruzzi marriage   1\n#> 13      Strozzi marriage   1\n#> 14 Lamberteschi business   1\n#> 15 Lamberteschi marriage   1\n#> 16     Guadagni business   1\n#> 17     Guadagni marriage   1\n#> 18   Castellani business   1\n#> 19   Castellani marriage   1\n#> 20     Bischeri business   1\n#> 21     Bischeri marriage   1\n#> 22       Ginori business   2\n#> 23       Ginori marriage   2\n#> 24      Albizzi marriage   2\n#> 25    Barbadori business   2\n#> 26    Barbadori marriage   2"},{"path":"exploratory-network-analysis.html","id":"exploratory-network-analysis","chapter":"Section 3 Exploratory Network Analysis","heading":"Section 3 Exploratory Network Analysis","text":"section serves companion Chapter 4 Brughmans Peeples 2022 provides basic examples exploratory network analytical methods outlined book well others.","code":""},{"path":"exploratory-network-analysis.html","id":"example-network-objects","chapter":"Section 3 Exploratory Network Analysis","heading":"3.1 Example Network Objects","text":"order facilitate exploratory analysis examples section, want first create set igraph network objects serve purposes across analyses . Specifically, generate define:simple_net - simple undirected binary network isolatessimple_net_noiso - simple undirected binary network without isolatesdirected_net - directed binary networkweighted_net - undirected weighted networksim_net_i - similarity network edges weighted similarity igraph formatsim_net - similarity network edges weighted similarity statnet/network formatsim_mat - data frame object containing weighted similarity matrixEach used appropriate illustrate particular methods.following chunk code initialize packages use section define network objects use (using object names ). examples use Cibola technological similarity data used Network Data section previously.","code":"\n# initialize packages\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(vegan)\n\n# read in csv data\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\nCibola_adj_mat <- read.csv(file = \"data/Cibola_adj.csv\",\n                           header = T,\n                           row.names = 1)\n\n# Simple network with isolates\nsimple_net <-\n  igraph::graph_from_adjacency_matrix(as.matrix(Cibola_adj_mat),\n                                      mode = \"undirected\")\n\n# Simple network with no isolates\nsimple_net_noiso <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n#Create a directed network by subsampling edgelist\nset.seed(45325)\nEL2 <- Cibola_edgelist[sample(seq(1, nrow(Cibola_edgelist)), 125,\n                              replace = FALSE),]\n\ndirected_net <- igraph::graph_from_edgelist(as.matrix(EL2),\n                                            directed = TRUE)\n\n# Create a weighted undirected network by adding column of random\n# weights to edgelist\nCibola_edgelist$Weight <- sample(seq(1, 4), nrow(Cibola_edgelist),\n                                 replace = TRUE)\nweighted_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist[, 1:2]),\n                              directed = FALSE)\n\nE(weighted_net)$weight <- Cibola_edgelist$Weight\n\n# Create a similarity network using the Brainerd-Robinson metric\nCibola_clust <-\n  read.csv(file = \"data/Cibola_clust.csv\",\n           header = TRUE,\n           row.names = 1)\nclust_p <- prop.table(as.matrix(Cibola_clust), margin = 1)\nsim_mat <-\n  (2 - as.matrix(vegan::vegdist(clust_p, method = 'manhattan'))) / 2\nsim_net <- network(\n  sim_mat,\n  directed = FALSE,\n  ignore.eval = FALSE,\n  names.eval = 'weight'\n)\nsim_net_i <- asIgraph(sim_net)"},{"path":"exploratory-network-analysis.html","id":"CalcMetric","chapter":"Section 3 Exploratory Network Analysis","heading":"3.2 Calculating Network Metrics in R","text":"Although calculations behind scenes centrality metrics, clustering algorithms, network measures may somewhat complicated, calculating measures R using network objects usually quite straight forward typically involves single function couple arguments within . , however, things need kept mind applying methods network data. appendix, provide examples common functions may use well caveats potential problems.One thing keep mind working R network data using multiple packages time different packages may functions name often good practice specify package mean use directly code. example, function calculate degree centrality igraph sna (part statnet suite packages) simply “degree.” type “degree(simple_net)” console, R attempt use “degree” function whichever package called recently. may want. order avoid ambiguity, can add package name call like “igraph::degree(simple_net)” since “simple_net” igraph object, work correctly return results. hand “sna::degree(simple_net)” create error sna version degree function expects different format network object.addition potential overlap function names, another thing need keep mind certain network metrics require networks specific properties may produce unexpected results wrong kind network used. example, closeness centrality well defined binary networks isolates. use “igraph::closeness” command calculate closeness centrality network isolates, get results also get warning telling “closeness centrality well-defined disconnected graphs.” functions provide data meet criteria required function instead get error results returned. cases, however, function may simply return results provide warning important careful selecting methods avoid providing data violates assumptions method provided. Remember, questions function works requires can type “?function_name” console function question get help document provide information. can also include package names help call avoid getting something unexpected (.e., “?igraph::degree”)","code":""},{"path":"exploratory-network-analysis.html","id":"centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3 Centrality","text":"One common kinds exploratory network analysis involves calculating basic network centrality centralization statistics. wide array methods available R igraph statnet packages. section highlight examples well caveats keep mind.","code":""},{"path":"exploratory-network-analysis.html","id":"degree-centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.1 Degree Centrality","text":"Degree centrality can calculated using “igraph::degree” function simple networks without isolates well simple directed networks. method , however, appropriate weighted networks similarity networks (expects binary values). apply “igraph::degree” function weighted network object simply get binary network degree centrality values. alternative calculating weighted degree weighted similarity networks simply calculate row sums underlying similarity matrix (minus 1 account self loops) adjacency matrix. degree function returned output vector values representing degree centrality can assigned R object, plotted, otherwise used. provide examples illustrate. Note directed graphs can also specify mode “” indegree “” outdegree “” sum .Graph level degree centralization equally simple call using centr_degree function. function returns object multiple parts including vector degree centrality scores, graph level centralization metric, theoretical maximum number edges (n * [n-1]). metric can normalized maximum centralization value 1 using “normalize=TRUE” argument demonstrate .interested calculating graph level density can using “edge_density” function. Note just like degree function , works binary networks submit weighted network object simply get binary edge density value.","code":"\n# simple network with isolates\nigraph::degree(simple_net)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>           11            8            1           11 \n#>      Cienega \n#>           13\n# simple network no isolates\nigraph::degree(simple_net_noiso) [1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>              11              11              11 \n#>    Hooper Ranch Horse Camp Mill \n#>              11              12\n\n# directed network\nigraph::degree(directed_net, mode = \"in\")[1:5] # indegree\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>               1               6               5 \n#>    Tri-R Pueblo    Heshotauthla \n#>               6               2\nigraph::degree(directed_net, mode = \"out\")[1:5] # outdegree\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>               6               2               5 \n#>    Tri-R Pueblo    Heshotauthla \n#>               2              11\n\n# weighted network - rowSums of adjacency matrix\n(rowSums(as.matrix(\n  as_adjacency_matrix(weighted_net,\n                      attr = \"weight\")\n)) - 1)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>              25              29              21 \n#>    Hooper Ranch Horse Camp Mill \n#>              18              27\n\n# similarity network. Note we use the similarity matrix here and\n# not the network object\n(rowSums(sim_mat) - 1)[1:5]\n#> Apache Creek      Atsinna  Baca Pueblo Casa Malpais \n#>     16.00848     15.87024     14.77997     17.30358 \n#>      Cienega \n#>     17.09394\n\n# If you want to normalize your degree centrality metric by the\n# number of nodes present you can do that by adding the normalize=TRUE\n# command to the function calls above. For weighted and similarity\n# networks you can simply divide by the number of nodes minus 1.\nigraph::degree(simple_net, normalize = T)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>   0.36666667   0.26666667   0.03333333   0.36666667 \n#>      Cienega \n#>   0.43333333\n\n# it is also possible to directly plot the degree distribution for\n# a given network using the degree.distribution function.\n# Here we embed that call directly in a call for a histogram plot\n# using the \"hist\" function\nhist(igraph::degree.distribution(simple_net))\n\n# graph level centralization\nigraph::centr_degree(simple_net)\n#> $res\n#>  [1] 11  8  1 11 13 11  6 13 14 18 11 12 13 11 12 12 13 14\n#> [19] 11  5 10 12 13 13  9 14 13 14  6  0 10\n#> \n#> $centralization\n#> [1] 0.2408602\n#> \n#> $theoretical_max\n#> [1] 930\n\n# To calculate centralization score for a similarity matrix, use the\n# sna::centralization function\nsna::centralization(sim_mat, normalize = TRUE, sna::degree)\n#> [1] 0.1082207\nedge_density(simple_net_noiso)\n#> [1] 0.383908\n\nedge_density(weighted_net)\n#> [1] 0.383908"},{"path":"exploratory-network-analysis.html","id":"betweenness-centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.2 Betweenness Centrality","text":"betweenness functions work much like degree function calls . Betweenness centrality igraph can calculated simple networks without isolates, directed networks, weighted networks. case weighted networks similarity networks, shortest paths sets nodes calculated path greatest weight taken juncture. can normalize results using “normalize=TRUE” just like degree. “igraph::betweenness” function automatically detect graph directed weighted use appropriate method can also specify particular edge attribute use weight perhaps one weighting scheme.","code":"\n# calculate betweenness for simple network\nigraph::betweenness(simple_net)[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>     1.125000     0.000000     0.000000     8.825306 \n#>      Cienega \n#>     8.032865\n# calculate betweenness for weighted network\nigraph::betweenness(weighted_net, directed = FALSE)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>        20.94423        18.96259        17.67829 \n#>    Hooper Ranch Horse Camp Mill \n#>        15.66853         2.78036\n# calculate betweenness for weighted network specifying weight attribute\nigraph::betweenness(weighted_net, weights = E(weighted_net)$weight)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>        20.94423        18.96259        17.67829 \n#>    Hooper Ranch Horse Camp Mill \n#>        15.66853         2.78036\n\n# calculate graph level centralization\ncentr_betw(simple_net)\n#> $res\n#>  [1]   1.1250000   0.0000000   0.0000000   8.8253059\n#>  [5]   8.0328650   3.2862641   0.2500000  58.7048084\n#>  [9]  15.6031093 142.3305364   1.1250000   9.0503059\n#> [13]  11.9501530   6.2604913   1.2590038  12.8566507\n#> [17]   8.0328650  41.0052110   0.5722222   2.7950980\n#> [21]   0.2844828   9.0503059  15.3558646   8.0328650\n#> [25]   0.0000000  16.0653473  11.9501530  17.0225282\n#> [29]   0.0000000   0.0000000   2.1735632\n#> \n#> $centralization\n#> [1] 0.3064557\n#> \n#> $theoretical_max\n#> [1] 13050"},{"path":"exploratory-network-analysis.html","id":"eigenvector-centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.3 Eigenvector Centrality","text":"“igraph::eigen_centrality” function can calculated simple networks without isolates, directed networks, weighted networks. default scores scaled maximum score 1. can turn scaling using “scale=FALSE” argument. function automatically detects whether network object directed weighted can also call edge attributes specify particular weight attribute. default function outputs many features analysis number steps toward convergence number iterations just want centrality results can use atomic vector call $vector.","code":"\neigen_centrality(simple_net, \n   scale = TRUE)$vector[1:5]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>   0.46230981   0.54637071   0.07114132   0.53026366 \n#>      Cienega \n#>   0.85007181\n\neigen_centrality(\n  weighted_net,\n  weights = E(weighted_net)$weight,\n  directed = FALSE,\n  scale = FALSE\n)$vector[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.08116512      0.10608344      0.07254989 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.05355994      0.10123595"},{"path":"exploratory-network-analysis.html","id":"page-rank-centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.4 Page Rank Centrality","text":"“igraph::page_rank” function can calculated simple networks without isolates, directed networks, weighted networks. default scores scaled maximum score 1. can turn scaling using “scale=FALSE” argument. function automatically detects whether network object directed weighted can also call edge attributes specify particular weight attribute. can change algorithm used implement page rank algorithm (see help details) can also change damping factor desired.","code":"\npage_rank(directed_net, \n  directed = TRUE)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.01375364      0.03433734      0.02521968 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.04722743      0.01549665\n\n\npage_rank(\n  weighted_net,\n  weights = E(weighted_net)$weight,\n  directed = FALSE,\n  algo = \"prpack\"\n)$vector[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.03340837      0.03761940      0.02901255 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.02610001      0.03551477"},{"path":"exploratory-network-analysis.html","id":"closeness-centrality","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.5 Closeness Centrality","text":"“igraph::closeness” function calculates closeness centrality can calculated directed undirected simple weighted networks isolates. function can also used networks isolates, receive additional message suggesting closeness undefined networks fully connected. large networks can use “igraph::estimate_closeness” function cutoff setting consider paths length cutoff calculate closeness scores. directed networks can also specify whether connections , , directions used.","code":"\nigraph::closeness(simple_net)[1:5]\n#> Warning in igraph::closeness(simple_net): At\n#> centrality.c:2874 :closeness centrality is not well-defined\n#> for disconnected graphs\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>  0.010101010  0.010101010  0.009345794  0.011904762 \n#>      Cienega \n#>  0.012345679\n\nigraph::closeness(simple_net_noiso)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.01470588      0.01886792      0.01754386 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.01470588      0.01923077\n\nigraph::closeness(weighted_net, weights = E(weighted_net)$weight)[1:5]\n#>    Apache Creek    Casa Malpais    Coyote Creek \n#>      0.01010101      0.01298701      0.01219512 \n#>    Hooper Ranch Horse Camp Mill \n#>      0.01111111      0.01063830\n\nigraph::closeness(directed_net, mode = \"in\")[1:5]\n#> Warning in igraph::closeness(directed_net, mode = \"in\"): At\n#> centrality.c:2874 :closeness centrality is not well-defined\n#> for disconnected graphs\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>     0.001189061     0.001984127     0.001782531 \n#>    Tri-R Pueblo    Heshotauthla \n#>     0.002114165     0.001426534"},{"path":"exploratory-network-analysis.html","id":"hubs-and-authorities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.3.6 Hubs and Authorities","text":"directed networks possible calculate hub authority scores identify nodes characterized high indegree high outdegree particular. measure depends direction appropriate directed network objects. run function undirected network hub scores authority scores identical. functions can also applied networks directed weighted. want options printed can use atomic vector $vector call well.","code":"\nigraph::hub_score(directed_net)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.31998744      0.12265832      0.30740409 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.08450797      1.00000000\n\nigraph::authority_score(directed_net)$vector[1:5]\n#>    Coyote Creek Techado Springs   Hubble Corner \n#>      0.05372558      0.32708203      0.28835263 \n#>    Tri-R Pueblo    Heshotauthla \n#>      0.35970234      0.25265287"},{"path":"exploratory-network-analysis.html","id":"triads-and-clustering","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4 Triads and clustering","text":"Another important topic network science concerns considerations overall structure clustering connections across network whole. variety methods developed characterize overall degree clustering closure networks, many based counting triads various configurations. section, briefly outline approaches toward evaluating triads, transitivity, clustering R.","code":""},{"path":"exploratory-network-analysis.html","id":"triads","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4.1 Triads","text":"triad simply set three nodes description configuration edges among . undirected graphs, four possibilities describing connections among nodes (empty graph, 1 connection, 2 connections, 3 connections). directed graphs situation considerably complicated ties can considered directions edge one direction isn’t necessarily reciprocated. Thus 16 different configurations can exist (see Brughmans Peeples 2022: Figure 4.4).One common method outlining overall structural properties network conduct “triad census” counts 4 16 possible triads given network. Although triad census can conducted undirected network using igraph::triad_census function, warning returned along 0 results impossible triad configurations aware. results returned vector counts possible node configuration order outlined help document associated function (see ?triad_census ).Often can useful visualize motifs defined entry triad census can done using “graph_from_isomorphism_class()” function little bit additional data wrangling plotting using ggraph ggpubr packages. packages described detail visualization section appendix.","code":"\nigraph::triad_census(directed_net)\n#>  [1] 1404 2007    0  134  146  174    0    0  195    0    0\n#> [12]    0    0    0    0    0\n\nigraph::triad_census(simple_net)\n#> Warning in igraph::triad_census(simple_net): At\n#> motifs.c:1055 :Triad census called on an undirected graph\n#>  [1] 1033    0 2551    0    0    0    0    0    0    0  441\n#> [12]    0    0    0    0  470\nlibrary(ggraph)\nlibrary(ggpubr)\n\ng <- list()\nxy <-\n  as.data.frame(matrix(\n    c(0.1, 0.1, 0.9, 0.1, 0.45, 0.45),\n    nrow = 3,\n    ncol = 2,\n    byrow = T\n  ))\n\n\nfor (i in 0:15) {\n  g_temp <- graph_from_isomorphism_class(size = 3,\n                                         number = i,\n                                         directed = T)\n  g[[i + 1]] <- ggraph(g_temp,\n                       layout = \"manual\",\n                       x = xy[, 1],\n                       y = xy[, 2]) +\n    xlim(0, 1) +\n    ylim(0, 0.5) +\n    geom_node_point(size = 6, col = \"purple\") +\n    geom_edge_fan(\n      arrow = arrow(length = unit(4, 'mm'),\n                    type = \"closed\"),\n      end_cap = circle(6, 'mm'),\n      start_cap = circle(6, 'mm'),\n      edge_colour = \"black\"\n    ) +\n    theme_graph(\n      plot_margin =\n        margin(0, 0, 0, 0),\n      border = T,\n      foreground = \"black\"\n    )\n}\n\n# motifs ordered by order in triad_census function\nggarrange(\n  g[[1]], g[[2]], g[[4]], g[[7]],\n  g[[3]], g[[5]], g[[6]], g[[10]],\n  g[[8]], g[[12]], g[[11]], g[[9]],\n  g[[13]], g[[14]], g[[15]], g[[16]],\n  nrow = 4,\n  ncol = 4\n)"},{"path":"exploratory-network-analysis.html","id":"transitivity-and-clustering","chapter":"Section 3 Exploratory Network Analysis","heading":"3.4.2 Transitivity and Clustering","text":"network’s global average transitivity (clustering coefficient) number closed triads total number triads network. measure can calculated using “igraph::transitivity” simple networks without isolates, directed networks, weighted networks. options within function determine specific type transitivity (global transitivity default) treat isolates. See help document (?igraph::transitivity) details. want calculate local transitivity particular node can use “type=‘local’” argument. return NA value nodes part triads (isolates nodes single connection).","code":"\nigraph::transitivity(simple_net, type = \"global\")\n#> [1] 0.7617504\n\nigraph::transitivity(simple_net, type = \"local\")\n#>  [1] 0.8727273 1.0000000       NaN 0.8363636 0.8333333\n#>  [6] 0.8727273 0.8666667 0.4358974 0.7252747 0.4183007\n#> [11] 0.8727273 0.8333333 0.7435897 0.8000000 0.8787879\n#> [16] 0.7272727 0.8333333 0.6703297 0.9272727 0.7000000\n#> [21] 0.9555556 0.8333333 0.7692308 0.8333333 1.0000000\n#> [26] 0.7582418 0.7435897 0.7142857 1.0000000       NaN\n#> [31] 0.8222222"},{"path":"exploratory-network-analysis.html","id":"walks-paths-and-distance","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5 Walks, Paths, and Distance","text":"variety network metrics rely distance paths across networks can calculated R. great many functions available highlight just .","code":""},{"path":"exploratory-network-analysis.html","id":"distance","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.1 Distance","text":"cases, may simply want information graph distance nodes general perhaps average distance. variety functions can help including “igraph::distances” “igraph::mean_distance.” work simple networks, directed networks, weighted networks.","code":"\n# Create matrix of all distances among nodes and view the first\n# few rows and columns\nigraph::distances(simple_net)[1:4, 1:4]\n#>              Apache.Creek Atsinna Baca.Pueblo Casa.Malpais\n#> Apache.Creek            0       4           4            1\n#> Atsinna                 4       0           2            3\n#> Baca.Pueblo             4       2           0            3\n#> Casa.Malpais            1       3           3            0\n\n# Calculate the mean distance for a network\nigraph::mean_distance(simple_net)\n#> [1] 1.949425"},{"path":"exploratory-network-analysis.html","id":"shortest-paths","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.2 Shortest Paths","text":"want identify particular shortest paths nodes network can use “igraph::shortest_paths” function alternatively igraph::all_shortest_paths want shortest paths originating particular node. call function simply need provide network object id origin destination path. simplest solution just call node number. function works directed undirected networks without weights. Although can applied networks isolates, isolates produce NA results.output provides ids nodes crossed path origin destination.","code":"\n# track shortest path from Apache Creek to Pueblo de los Muertos\nigraph::shortest_paths(simple_net, from = 1, to = 21)\n#> $vpath\n#> $vpath[[1]]\n#> + 5/31 vertices, named, from 4cad003:\n#> [1] Apache.Creek          Casa.Malpais         \n#> [3] Garcia.Ranch          Heshotauthla         \n#> [5] Pueblo.de.los.Muertos\n#> \n#> \n#> $epath\n#> NULL\n#> \n#> $predecessors\n#> NULL\n#> \n#> $inbound_edges\n#> NULL"},{"path":"exploratory-network-analysis.html","id":"diameter","chapter":"Section 3 Exploratory Network Analysis","heading":"3.5.3 Diameter","text":"“igraph::diameter” function calculates diameter network (longest shortest path) can also use “farthest_vertices” function get ids nodes form ends longest shortest path. metric can calculated directed undirected, weighted unweighted networks, without isolates.","code":"\nigraph::diameter(directed_net, directed = TRUE)\n#> [1] 4\n\nigraph::farthest_vertices(directed_net, directed = TRUE)\n#> $vertices\n#> + 2/30 vertices, named, from 4cae11d:\n#> [1] Apache Creek          Pueblo de los Muertos\n#> \n#> $distance\n#> [1] 4"},{"path":"exploratory-network-analysis.html","id":"components-and-bridges","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6 Components and Bridges","text":"Identifying fully connected subgraphs within large network common analytical procedure quite straight forward R using igraph package. first want know whether given network fully connected can use “igraph::is_connected” function check.can also count components using “count_components” function.","code":"\nigraph::is_connected(simple_net)\n#> [1] FALSE\n\nigraph::is_connected(simple_net_noiso)\n#> [1] TRUE\nigraph::count_components(simple_net)\n#> [1] 2"},{"path":"exploratory-network-analysis.html","id":"identifying-components","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.1 Identifying Components","text":"want decompose network object distinct components can use “igraph::decompose” function outputs list object entry representing distinct component. object list can called using [[k]] k number item list.example network fully connected exception 1 node (WS Ranch). run decompose function separates WS ranch component isolate edges.","code":"\ncomponents <- igraph::decompose(simple_net, min.vertices = 1)\n\ncomponents\n#> [[1]]\n#> IGRAPH 4ef2110 UN-- 30 167 -- \n#> + attr: name (v/c)\n#> + edges from 4ef2110 (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n#> \n#> [[2]]\n#> IGRAPH 4ef2110 UN-- 1 0 -- \n#> + attr: name (v/c)\n#> + edges from 4ef2110 (vertex names):\n\nV(components[[2]])$name\n#> [1] \"WS.Ranch\""},{"path":"exploratory-network-analysis.html","id":"cutpoints","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.2 Cutpoints","text":"cutpoint node, removal creates network higher number components. convenient igraph function identifying cutpoints function “sna” package within “statnet” suite. Using intergraph package can easily convert igraph object sna object (using asNetwork function) within call use function.sna::cutpoint function returns node id cutpoints detected. can use numbers returned find name node question.example reveals Ojo Bonito cutpoint look figure can see sole connection Baca Pueblo otherwise become isolate distinct component Ojo Bonito removed.","code":"\ncut_p <- cutpoints(asNetwork(simple_net))\ncut_p\n#> [1] 18\n\nV(simple_net)$name[cut_p]\n#> [1] \"Ojo.Bonito\"\n\nset.seed(4536)\nplot(simple_net)"},{"path":"exploratory-network-analysis.html","id":"bridges","chapter":"Section 3 Exploratory Network Analysis","heading":"3.6.3 Bridges","text":"bridge edge, removal results network higher number components. function igraph::min_cut finds bridges network objects sets nodes graph whole. output function includes vector called $cut provides edges representing bridges. default function outputs cut value can use argument value.=FALSE get full output.example illustrates edge Ojo Bonito Baca Pueblo bridge (perhaps surprising Ojo Bonito cut point).","code":"\nmin_cut(simple_net_noiso, value.only = FALSE)\n#> $value\n#> [1] 1\n#> \n#> $cut\n#> + 1/167 edge from 4cad757 (vertex names):\n#> [1] Ojo Bonito--Baca Pueblo\n#> \n#> $partition1\n#> + 1/30 vertex, named, from 4cad757:\n#> [1] Baca Pueblo\n#> \n#> $partition2\n#> + 29/30 vertices, named, from 4cad757:\n#>  [1] Apache Creek          Casa Malpais         \n#>  [3] Coyote Creek          Hooper Ranch         \n#>  [5] Horse Camp Mill       Hubble Corner        \n#>  [7] Mineral Creek Pueblo  Rudd Creek Ruin      \n#>  [9] Techado Springs       Tri-R Pueblo         \n#> [11] UG481                 UG494                \n#> [13] Atsinna               Cienega              \n#> [15] Los Gigantes          Mirabal              \n#> [17] Ojo Bonito            Pueblo de los Muertos\n#> [19] Scribe S              Spier 170            \n#> + ... omitted several vertices"},{"path":"exploratory-network-analysis.html","id":"cliques-and-communities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7 Cliques and Communities","text":"Another common task network analysis involves creating cohesive sub-groups nodes larger network. wide variety methods available defining groups highlight common .","code":""},{"path":"exploratory-network-analysis.html","id":"cliques","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.1 Cliques","text":"clique network science concept arguably strictest method defining cohesive subgroup. set three nodes node directly connected nodes. can alternatively defined completely connected subnetwork, subnetwork maximum density. function “igraph::max_cliques” finds maximal cliques network outputs list object nodes set indicated. sake space output one clique 24 defined function call.Note list node can appear one maximal clique.","code":"\nmax_cliques(simple_net, min = 1)[[24]]\n#> + 9/31 vertices, named, from 4cad003:\n#> [1] Los.Gigantes    Cienega         Tinaja         \n#> [4] Spier.170       Scribe.S        Pescado.Cluster\n#> [7] Mirabal         Heshotauthla    Yellowhouse"},{"path":"exploratory-network-analysis.html","id":"k-cores","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.2 K-cores","text":"k-core maximal subnetwork vertex least degree k within subnetwork. R can obtained using “igraph::coreness” function filtering value appropriate. function creates vector k values can used remove nodes appropriate symbolize plots.plot shown darker read colors represent higher maximal k-core values.","code":"\n# Define coreness of each node\nkcore <- coreness(simple_net)\nkcore[1:6]\n#> Apache.Creek      Atsinna  Baca.Pueblo Casa.Malpais \n#>            9            8            1            9 \n#>      Cienega Coyote.Creek \n#>            9            9\n\n# set up colorscale\ncol_set <- heat.colors(max(kcore), rev = TRUE)\nset.seed(2509)\nplot(simple_net, vertex.color = col_set[kcore])"},{"path":"exploratory-network-analysis.html","id":"cluster-detection-algorithms","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3 Cluster Detection Algorithms","text":"R allows use variety common cluster detection algorithms define groups nodes network using variety different assumptions. highlight common .","code":""},{"path":"exploratory-network-analysis.html","id":"girvan-newman-clustering","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.1 Girvan-Newman Clustering","text":"Girvan-Newman clustering divisive algorithm based betweenness defines partition network maximizes modularity removing nodes high betweenness iteratively (see discussion Brughmans Peeples 2022 Chapter 4.6). R referred igraph::edge.betweenness.community function. function can used directed undirected networks without edge weights. function outputs variety information including individual edge betweenness scores, modularity information, partition membership. See help documents information","code":"\nGN <- igraph::edge.betweenness.community(simple_net)\nset.seed(4353)\nplot(simple_net, vertex.color = GN$membership)"},{"path":"exploratory-network-analysis.html","id":"walktrap-algorithm","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.2 Walktrap Algorithm","text":"walktrap algorithm designed work either binary weighted networks defines communities generating large number short random walks determining sets nodes consistently fall along short random walks. can called using “igraph::cluster_walktrap” function. “steps” argument determines length short walks set 4 default.","code":"\nWT <- igraph::cluster_walktrap(simple_net, steps = 4)\nset.seed(4353)\nplot(simple_net, vertex.color = WT$membership)"},{"path":"exploratory-network-analysis.html","id":"louvain-modularity","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.3 Louvain Modularity","text":"Louvain modularity cluster detection algorithm based modularity. algorithm iteratively moves nodes among community definitions way optimizes modularity. measure can calculated simple networks, directed networks, weighted networks implemented R “igraph::cluster_louvain” function.","code":"\nLV <- igraph::cluster_louvain(simple_net)\nset.seed(4353)\nplot(simple_net, vertex.color = LV$membership)"},{"path":"exploratory-network-analysis.html","id":"calculating-modularity-for-partitions","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.4 Calculating Modularity for Partitions","text":"like compare modularity scores among partitions graph, can achieved using “igraph::modularity” function. modularity call simply supply argument indicating partition membership node. Note can also used attribute data regional designations. following chunk code compare modularity clustering methods described well using subregion designations original Cibola region attribute dataNote although modularity can useful comparing among partitions like approach shown poor detecting small communities within network always appropriate.","code":"\n# Modularity for Girvan-Newman\nmodularity(simple_net, membership = membership(GN))\n#> [1] 0.4103589\n\n# Modularity for walktrap\nmodularity(simple_net, membership = membership(WT))\n#> [1] 0.4157195\n\n# Modularity for Louvain clustering\nmodularity(simple_net, membership = membership(LV))\n#> [1] 0.4131378\n\n# Modularity for subregion\nCibola_attr <- read.csv(\"data/Cibola_attr.csv\")\nmodularity(simple_net, membership = as.factor(Cibola_attr$Region))\n#> [1] 0.1325612"},{"path":"exploratory-network-analysis.html","id":"finding-edges-within-and-between-communities","chapter":"Section 3 Exploratory Network Analysis","heading":"3.7.3.5 Finding Edges Within and Between Communities","text":"many cases may interested identifying edges remain within extend network partition. can done using “igraph::crossing” function. function expects igraph cluster definition object igraph network return list true false values edge true indicates edge extends beyond cluster assigned nodes. Let’s take look first 10 edges simple_net object based Louvain cluster definition.Beyond , plot igraph object add cluster definition call produce network graph clusters outlined nodes extend clusters shown red.","code":"\nigraph::crossing(LV, simple_net)[1:6]\n#>         Apache.Creek|Casa.Malpais \n#>                             FALSE \n#>         Apache.Creek|Coyote.Creek \n#>                             FALSE \n#>         Apache.Creek|Hooper.Ranch \n#>                             FALSE \n#>      Apache.Creek|Horse.Camp.Mill \n#>                             FALSE \n#>        Apache.Creek|Hubble.Corner \n#>                             FALSE \n#> Apache.Creek|Mineral.Creek.Pueblo \n#>                             FALSE\nset.seed(54)\nplot(LV, simple_net)"},{"path":"exploratory-network-analysis.html","id":"case-study","chapter":"Section 3 Exploratory Network Analysis","heading":"3.8 Case Study","text":"case study provided end Chapter 4 Brughmans Peeples (2022) take simple network based Roman era roads spatial proximity settlements Iberian Peninsula calculate basic exploratory network statistics. described book, can create different definitions criteria network edges can impacts network node level properties. case, define three different networks follows:basic network every road connecting two settlements edgeA network retains ties network also connects isolated nodes within 50 Kms one road network settlementsA network retains ties first road network connects isolate nearest neighbor among road network settlementsFirst let’s read data file contains three networks start plotting turn map. details plots work, see section 6 network visualization.Now ’ve replicated visuals, want replicate network statistics. Since ’re going calculate several network statistics networks question, can wrap function save bit time. following function expects igraph network object calculates 10 variables show example book returns matrix.Now let’s run three networks turn reproduce results book.","code":"\n\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\n\nload(\"data/road_networks.RData\")\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\nmyMap <-\n  get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                maptype = \"watercolor\",\n                zoom = 6)\n\n\n# Extract edgelist from network object for road_net\nedgelist1 <- get.edgelist(road_net)\n\n# Create dataframe of beginning and ending points of edges\nedges1 <- as.data.frame(matrix(NA, nrow(edgelist1), 4))\ncolnames(edges1) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist1)) {\n  edges1[i, ] <- c(nodes[which(nodes$Id == edgelist1[i, 1]), 3],\n                   nodes[which(nodes$Id == edgelist1[i, 1]), 2],\n                   nodes[which(nodes$Id == edgelist1[i, 2]), 3],\n                   nodes[which(nodes$Id == edgelist1[i, 2]), 2])\n}\n\nbasic_net <- ggmap(myMap) +\n  geom_segment(\n    data = edges1,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 2,\n    show.legend = F\n  ) +\n  ggtitle(\"Basic Network\") +\n  theme_void()\n\n\n# Extract edgelist from network object for road_net2\nedgelist2 <- get.edgelist(road_net2)\n\n# Create dataframe of beginning and ending points of edges\nedges2 <- as.data.frame(matrix(NA, nrow(edgelist2), 4))\ncolnames(edges2) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist2)) {\n  edges2[i, ] <- c(nodes[which(nodes$Id == edgelist2[i, 1]), 3],\n                   nodes[which(nodes$Id == edgelist2[i, 1]), 2],\n                   nodes[which(nodes$Id == edgelist2[i, 2]), 3],\n                   nodes[which(nodes$Id == edgelist2[i, 2]), 2])\n}\n\nbasic_net_50 <- ggmap(myMap) +\n  geom_segment(\n    data = edges2,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 2,\n    show.legend = F\n  ) +\n  ggtitle(\"Basic Network + 50Km Buffer\") +\n  theme_void()\n\n# Extract edgelist from network object for road_net 3\nedgelist3 <- get.edgelist(road_net3)\n\n# Create dataframe of beginning and ending points of edges\nedges3 <- as.data.frame(matrix(NA, nrow(edgelist3), 4))\ncolnames(edges3) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist3)) {\n  edges3[i, ] <- c(nodes[which(nodes$Id == edgelist3[i, 1]), 3],\n                   nodes[which(nodes$Id == edgelist3[i, 1]), 2],\n                   nodes[which(nodes$Id == edgelist3[i, 2]), 3],\n                   nodes[which(nodes$Id == edgelist3[i, 2]), 2])\n}\n\nbasic_net_nn <- ggmap(myMap) +\n  geom_segment(\n    data = edges3,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 2,\n    show.legend = F\n  ) +\n  ggtitle(\"Basic Network + Nearest Neighbor Isolates\") +\n  theme_void()\n\nlibrary(ggpubr)\n\nbasic_net\n\nbasic_net_50\n\nbasic_net_nn\nlibrary(igraph)\nlibrary(intergraph)\n\nnet_stats <- function(net) {\n  out <- matrix(NA, 10, 2)\n  out[,1] <- c(\"Nodes\", \"Edges\", \"Isolates\", \"Density\", \"Average Degree\",\n               \"Average Shortest Path\", \"Diamater\", \n               \"Clustering Coefficient\", \"Closed Triad Count\",\n               \"Open Triad Count\")\n  # number of nodes\n  out[1, 2] <- vcount(net)\n  # number of edges\n  out[2, 2] <- ecount(net)\n  # number of isolates\n  out[3, 2] <- length(isolates(asNetwork(net)))\n  # network density rounding to the third digit\n  out[4, 2] <- round(edge_density(net), 3)\n  # mean degree rounding to the third digit\n  out[5, 2] <- round(mean(igraph::degree(net)), 3)\n  # mean shortest path length rounding to the third digit\n  out[6, 2] <- round(igraph::mean_distance(net), 3)\n  # network diameter\n  out[7, 2] <- igraph::diameter(net)\n  # average global transitivity rounding to the third digit\n  out[8, 2] <- round(igraph::transitivity(net, type = 'average'), 3)\n  # closed triads in triad_census\n  out[9, 2] <- igraph::triad_census(net)[16]\n  # open triads in triad_census\n  out[10, 2] <- igraph::triad_census(net)[11] \nreturn(out)\n}\n\nns1 <- net_stats(road_net)\n\nns2 <- net_stats(road_net2)\n\nns3 <- net_stats(road_net3)\n\nns_res <- cbind(ns1, ns2[, 2], ns3[, 2])\ncolnames(ns_res) <- c(\"Measure\", \"Basic Network\", \"50 Km Buffer\",\n                      \"Nearest Neighbors\")\n\nknitr::kable(ns_res, format = \"html\")"},{"path":"quantifying-uncertainty.html","id":"quantifying-uncertainty","chapter":"Section 4 Quantifying Uncertainty","heading":"Section 4 Quantifying Uncertainty","text":"section provides code examples accompany Chapter 5 Brughmans Peeples (2022) discussions missing poor quality data archaeological networks. many analyses book possible use number different network software packages conduct similar analyses. analyses presented Chapter 5, however, require creation custom scripts procedures possible programming language environment like R. attempt provide information replicate examples book also provide guidance might modify functions code provided purposes.","code":""},{"path":"quantifying-uncertainty.html","id":"a-general-approach-to-uncertainty","chapter":"Section 4 Quantifying Uncertainty","heading":"4.1 A General Approach to Uncertainty","text":"outlined book, basic approach quantifying dealing uncertainty use sample means understanding robustness vulnerability population sample drawn kinds variability perturbations might expect. procedures advocate primarily take following basic form:Define network based available sample, calculate metrics characterize properties interest network.Derive large number modified samples network created step 1 (underlying data) simulate potential data problem trying address. example, interested impact nodes missing random, randomly delete proportion nodes sample derived network created step 1.Calculate metrics characterize properties features interest every one random samples created step 2 assess central tendency (mean, median) distributional properties (range, standard deviation, distribution shape, etc.) features output appropriate.Compare distributions metrics properties (graph, node, edge level) random samples “original” network created step 1 assess potential impacts perturbation data treatment. comparison properties network created step 1 distribution properties created step 3 provide information directly relevant assessing impact kind perturbation created step 2 original network sample , extension, complete network drawn.underlying assumption approach outlined robustness vulnerability particular perturbation observed network data, drawn complete network unattainable, provides information robustness vulnerability unattainable complete network kinds perturbations. example, interested exploring degree distribution network sampling experiments show massive fluctuations distribution sub-samples small numbers nodes removed random, suggest particular properties network robust nodes missing random degree calculations place much confidence results obtained original sample indicative complete network drawn. hand, say instead find resampling experiments degree distributions sub-samples substantially similar original network sample even moderate large numbers nodes removed. case, might conclude network structure assessments degree distribution robust node missigness within range might expect original sample relation complete network drawn. important note, however, finding transferred metrics given network likely robust certain kinds perturbations certain network metrics, others.sub-sections create basic function conduct analyses show can modified fit almost data perturbation chose simulate.","code":""},{"path":"quantifying-uncertainty.html","id":"missing-at-random","chapter":"Section 4 Quantifying Uncertainty","heading":"4.2 Missing at Random","text":"sub-section accompanies discussion nodes edges missing random Brughmans Peeples (2022) Chapter 5.3.1. take one interval Chaco World ceramic similarity network (ca. .D. 1050-1100) simulate impact nodes missing random network centrality statistics. Download ceramic similarity adjacency matrix follow along.first thing need initialize required libraries import ceramic ware data convert network object. use igraph package. example using simple undirected network.Now need define function removes specified proportion nodes random, assesses specified metric interest, compares sub-sample original sample terms rank order correlation (Spearman’s \\(\\rho\\)) among nodes metric question. attempted write function general possible can modify use meet needs research. subsequent steps document modify basic function assess different data perturbations.","code":"\nlibrary(igraph)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(tnet)\nlibrary(ggpubr)\nlibrary(dplyr)\nlibrary(statnet)\n\n# Import adjacency matrix and covert to network\nchaco <- read.csv(file = 'data/AD1050net.csv', row.names = 1)\n\nchaco_net <- igraph::graph_from_adjacency_matrix(as.matrix(chaco),\n                                                 mode = \"undirected\")"},{"path":"quantifying-uncertainty.html","id":"nodes-missing-at-random","chapter":"Section 4 Quantifying Uncertainty","heading":"4.2.1 Nodes Missing at Random","text":"First, following Chapter 5.3.1, assess robustness data nodes missing random betweenness centrality.“nodes_missing_at_random_bw” function requires three specific pieces information user.net - must include network object igraph format. current version expects simple network code modified types.nsim - must specify number simulations perform. default 1000.props - Finally, must specify proportion nodes retained set nsim runs. provided vector proportions ranging > 0 1. default, script calculate 90% sub-sample way 10% sub-sample 10% intervals using props=c(0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1).said, function designed assess betweenness centrality wish assess another network metric, simply need modify code two places marked . Let’s initialize script take look example book first using betweenness centrality modifying code eigenvector centrality. Note depending size network number simulations specify, take several seconds several minutes.briefly describe works, inner portion function contains two nested “” loops iterate across values “props” every simulation 1 “nsim”. “sub_samp” object vector random integers based node ids determine nodes retained. “sub_net” object subset larger graph includes nodes indicated “sub_samp.” Next, calculate betweenness centrality “sub_net” object create vector values called “temp_stats.” Finally, compare rank order correlation centrality scores “temp_stats” “met_orig” vector values original network add output matrix. run script can visualize results.Now let’s run function eigenvector centrality, time using default arguments function created rather calling directly. Note modified two lines code change igraph::betweenness(net) igraph::eign_centrality(net)$vector. eigen_centrality function outputs just centrality values, need include vector call.","code":"\n# Function for assessing the impact of nodes missing at random on\n# betweenness centrality\nnodes_missing_at_random_bw <- function(net,\n                                       nsim = 1000,\n                                       props = c(0.9, 0.8, 0.7, 0.6,\n                                                 0.5, 0.4, 0.3, 0.2,\n                                                 0.1)) {\n  # insert measure of interest in line below\n  met_orig <- igraph::betweenness(net)\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      sub_samp <- sample(seq(1, vcount(net)), size =\n                           round(vcount(net) * props[j], 0))\n      sub_net <- igraph::induced_subgraph(net, sort(sub_samp))\n      # insert measure of interest in line below (same as above)\n      temp_stats <- igraph::betweenness(sub_net)\n      output[i, j] <- suppressWarnings(cor(temp_stats,\n                                           met_orig[sort(sub_samp)],\n                                           method = 'spearman'))\n    }\n  }\n  return(output)\n}\n\n# Run the function\nset.seed(4561)\nbw_test <- nodes_missing_at_random_bw(\n  net = chaco_net,\n  nsim = 1000,\n  props = c(0.9, 0.8, 0.7, 0.6, 0.5,\n            0.4, 0.3, 0.2, 0.1)\n)\n\n# Visuzlize the results as a boxplot using ggplot.\n# Melt wide data format into long data format first.\ndf <- melt(as.data.frame(bw_test))\n\nggplot(data = df) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )\n# Function for assessing the impact of nodes missing at random on\n# betweenness centrality\nnodes_missing_at_random_ev <- function(net,\n                                       nsim = 1000,\n                                       props = c(0.9, 0.8, 0.7, 0.6, 0.5,\n                                                 0.4, 0.3, 0.2, 0.1)) {\n  # insert measure of interest in line below\n  met_orig <- igraph::eigen_centrality(net)$vector\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      sub_samp <- sample(seq(1, vcount(net)),\n                         size = round(vcount(net) * props[j], 0))\n      sub_net <- igraph::induced_subgraph(net, sort(sub_samp))\n      # insert measure of interest in line below (same as above)\n      temp_stats <- igraph::eigen_centrality(sub_net)$vector\n      output[i, j] <- suppressWarnings(cor(temp_stats,\n                                           met_orig[sort(sub_samp)],\n                                           method = 'spearman'))\n    }\n  }\n  return(output)\n}\n\n# Run the function\nset.seed(5609)\nev_test <- nodes_missing_at_random_ev(net = chaco_net)\n\n# Visuzlize the results as a boxplot.\n# Melt wide data format into long data format\ndf <- melt(as.data.frame(ev_test))\n\nggplot(data = df) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )"},{"path":"quantifying-uncertainty.html","id":"edges-missing-at-random","chapter":"Section 4 Quantifying Uncertainty","heading":"4.2.2 Edges Missing at Random","text":"can also modify function defined little assess impacts edges missing random. case assess impact edges missing random degree centrality. changed two lines “met_orig” “temp_stats” calculate degree also slightly change lines beginning “sub_samp,” “sub_net,” “output[,j]” expect variation edges rather nodes. Specifically, line starts “sub_samp” change “vcount” “ecount” get sample edges rather nodes (vertices). next line use “sub_samp” object “delete_edges” sub sample. Finally, remove brackets “met_orig” since nodes retained example.","code":"\n# Function for assessing the impact of edges missing at random on\n# degree centrality\nedges_missing_at_random_dg <- function(net,\n                                       nsim = 1000,\n                                       props = c(0.9, 0.8, 0.7, 0.6, 0.5,\n                                                 0.4, 0.3, 0.2, 0.1)) {\n  # insert measure of interest in line below\n  met_orig <- igraph::degree(net)\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      sub_samp <- sample(seq(1, ecount(net)),\n                         size = round(ecount(net) * props[j], 0))\n      sub_net <-\n        igraph::delete_edges(net, which(!(seq(\n          1, ecount(net)\n        )\n        %in% sub_samp)))\n      # insert measure of interest in line below (same as above)\n      temp_stats <- igraph::degree(sub_net)\n      output[i, j] <- suppressWarnings(cor(temp_stats, met_orig,\n                                           method = 'spearman'))\n    }\n  }\n  return(output)\n}\n\n# Run the function\nset.seed(5609)\ndg_edge_test <- edges_missing_at_random_dg(net = chaco_net)\n\n# Visuzlize the results as a boxplot.\n# Melt wide data format into long data format\ndf <- melt(as.data.frame(dg_edge_test))\n\nggplot(data = df) +\n  geom_boxplot(aes(x = variable, y = value)) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(1))\n  )"},{"path":"quantifying-uncertainty.html","id":"assessing-indivdiual-nodesedges","chapter":"Section 4 Quantifying Uncertainty","heading":"4.3 Assessing Indivdiual Nodes/Edges","text":"sub-section follows along Chapter 5.3.2 Brughmans Peeples (2022). use Cibola technological similarity network make assessment. script similar used instead outputting correlation coefficients outputs specific rank order node question.function requires four pieces information user:net - igraph network object. currently set simple networks easily modified.target - name target node wish assessprop - proportion nodes wish retain test.nsim - number simulations. default 1000.Briefly function works first determines node number corresponds “target” wish assess creates sub_sample retains target node. subgraph induced (sub_net) metric interest calculated (betweenness case). “output” object vector records specific rank order node question fell terms metric question.Use data follow along.","code":"\n# Read in edgelist file as dataframe and create network object\nCibola_edgelist <-\n  read.csv(file = \"data/Cibola_edgelist.csv\", header = TRUE)\nCibola_net <-\n  igraph::graph_from_edgelist(as.matrix(Cibola_edgelist),\n                              directed = FALSE)\n\n# Function for assessing the impact of rank order correlation in\n# betweenness centrality to nodes missing at random\nindividual_nodes_bw <- function(net, target, prop, nsim = 1000) {\n  output <- NULL\n  for (i in 1:nsim) {\n    target_number <- which(V(net)$name == target)\n    sub_samp <- sample(setdiff(1:vcount(net), target_number),\n                       size = round(vcount(net) * (1 - prop), 0))\n    sub_net <- igraph::induced_subgraph(net,\n                                        sort(setdiff(1:vcount(net), sub_samp)))\n    temp_stats <- igraph::betweenness(sub_net)\n    output[i] <-\n      which(names(sort(temp_stats, decreasing = TRUE)) == target)\n  }\n  return(output)\n}\n\n# Run the function\nset.seed(52793)\nGR <- individual_nodes_bw(\n  net = Cibola_net,\n  target = \"Garcia Ranch\",\n  prop = 0.8,\n  nsim = 1000\n)\n\n# Visualize the results\ndf <- as.data.frame(GR)\ncolnames(df) <- \"RankOrder\"\n\nggplot(df, aes(x = RankOrder)) +\n  geom_bar() +\n  theme_bw() +\n  labs(title = \" \", x = \"Rank Order\", y = \"Count\") +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2))\n  )"},{"path":"quantifying-uncertainty.html","id":"missing-due-to-biased-sampling","chapter":"Section 4 Quantifying Uncertainty","heading":"4.4 Missing Due to Biased Sampling","text":"sub-section follows along Brughmans Peeples (2022) Chapter 5.3.3. many situations interested modeling situations data missing missing random instead influenced biased sampling process. example, say study area lots general reconnaissance surveys recorded large sites full coverage surveys captured smaller sites. case, may wish model missingness small sites likely missing large sites.illustrate approach using co-authorship network example presented book. case start incidence matrix publications authors want assess potential impact missing data. Since gathered data digital repositories citations, likely missing publication reasonable assume likely miss older publications newer ones given inclusion newer publications searchable digital indexes. Thus, example want assess missingness newer publications likely retained older ones sample. compare missing random assess results relate one another.First need provide two data files. first bibliographic attribute data includes date, publication type, information publication designated unique identifier. second incidence matrix publications denoted unique identifier authors. read R create adjaceny matrix author author connections using matrix algebra, convert igraph network object calculate betweenness centrality nodes. provide simple network node link diagram visualize data.network objects created need modify “nodes_missing_at_random_bw” function specific nature question data. Indeed since example relies incidence matrix includes information defined across multiple publications, additional changes structure function.create “nodes_missing_biased_bw” function requires five specific pieces information user.net - must include network object igraph format. current version expects simple network code modified types.inc - must also include incidence matrix (R matrix object) describes relationships publications authorsnsim - must specify number simulations perform. default 1000.props - Finally, must specify proportion nodes retained set nsim runs. provided vector proportions ranging > 0 1. default, script calculate 90% sub-sample way 10% sub-sample 10% intervals using props=c(0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1).lookup_dat - Finally, must provide lookup data connects publication key code year basis simulation. Note function designed work lookup file column names exactly shown (“Publication.Year”, “prob”, “Key”) need modified work data different columns.first step create new column lookup file called “prob” defines probability node retained random sub-sample. simply take vector publication years rescale maximum value (recent publication) equals 1 older publications less 1. mean older publications often removed random sub-samples newer ones.Next create function wraps together. similar “nodes_missing_at_random_bw” function key differences. Specifically:line starting “sub_samp” includes additional argument “prob” assigned probability variable created last step higher probability (newer) publications likely retained.Next, since network co-authorship includes connections made one publication actually need sub-sample incidence matrix. line begining “sub” finds publications retained “sub_samp” object.Next convert “sub” adjacency matrix called “sub_adj” using matrix algebra network object called “sub_net”Finally, calculate betweenness centrality rank order correlations put results output object.going run function nsim=1000 3 sampling fractions (0.9, 0.8, 0.7).place, now need function deals incidence matrix data simulates missigness random. requires single argument change last function. Specifically, need remove “prob=lookup_dat$prob” argument line beginning “sub_samp” ’re ready go.Now can combine results single dataframe plot paired boxplots comparison.","code":"\n\n# Read in publication and author attribute data\nbib <- read.csv('data/biblio_attr.csv')\n# Read in incidence matrix of publication and author data\nbib_dat <-\n  as.matrix(read.csv(\n    'data/biblio_dat.csv',\n    header = T,\n    row.names = 1\n  ))\n# Create adjacency matrix from incidence matrix using matrix algebra\nbib_adj <- t(bib_dat) %*% bib_dat\n# Convert to igraph network object removing self loops (diag=FALSE)\nbib_net <- igraph::graph_from_adjacency_matrix(bib_adj,\n                                               mode = \"undirected\",\n                                               diag = FALSE)\n# Calculate Betweenness Centrality\nbw_all <- igraph::betweenness(bib_net)\n\n# Plot network with nodes scaled based on betweenness\nset.seed(346)\nggraph(bib_net, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(shape = 21,\n                  aes(size = bw_all * 5),\n                  fill = 'gray',\n                  alpha = 0.75) +\n  theme_graph() +\n  theme(legend.position = \"none\")\n# Create a dataframe of all unique combinations of publication code\n# and year from attributes data\nlookup <- unique(bib[, c(1, 4)])\n# Assign a probability for a publication to be retained inverse to\n# the year it was published\nlookup$prob <-\n  (lookup$Publication.Year - min(lookup$Publication.Year)) /\n  (max(lookup$Publication.Year) - min(lookup$Publication.Year))\nhead(lookup)\n#>         Key Publication.Year      prob\n#> 1  FUV8A7JK             2014 0.9583333\n#> 2  C7MRVHWA             2013 0.9375000\n#> 3  3EG6T4P6             1991 0.4791667\n#> 4  I3UPKTTM             2014 0.9583333\n#> 19 9ZVD38UW             2001 0.6875000\n#> 20 XRWFR6XU             1977 0.1875000\n# Function for assessing the impact of data missing due to biased process\n# on betweenness centrality\nnodes_missing_biased_bw <- function(net,\n                                    inc,\n                                    nsim = 1000,\n                                    props = c(0.9, 0.8, 0.7, 0.6, 0.5,\n                                              0.4, 0.3, 0.2, 0.1),\n                                    lookup_dat) {\n  # insert measure of interest in line below\n  met_orig <- igraph::betweenness(net)\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      sub_samp <- sample(seq(1, nrow(lookup_dat)),\n                         size = round(nrow(lookup_dat) * props[j], 0),\n                         prob = lookup_dat$prob) # added prob argument\n      sub <- which(rownames(bib_dat) %in% lookup$Key[sub_samp])\n      sub_adj <- t(inc[sub, ]) %*% inc[sub, ]\n      sub_net <- igraph::graph_from_adjacency_matrix(sub_adj)\n      # insert measure of interest in line below (same as above)\n      temp_stats <- igraph::betweenness(sub_net)\n      output[i, j] <- suppressWarnings(cor(temp_stats, met_orig,\n                                           method = 'spearman'))\n    }\n  }\n  return(output)\n}\n\n# Run fuction\nset.seed(4634)\nbib_bias <- nodes_missing_biased_bw(\n  net = bib_net,\n  inc = bib_dat,\n  lookup_dat = lookup,\n  props = c(0.9, 0.8, 0.7)\n)\nhead(bib_bias)\n#>            0.9       0.8       0.7\n#> [1,] 0.9327931 0.9314217 0.8433757\n#> [2,] 0.9200489 0.9818085 0.7750152\n#> [3,] 0.9999088 0.9763457 0.9079782\n#> [4,] 1.0000000 0.9311525 0.7161128\n#> [5,] 0.9779243 0.8115974 0.8307865\n#> [6,] 0.9778791 0.9998792 0.7273099\n# Function for assessing the impact of nodes missing at random on\n# betweenness centrality\nnodes_missing_at_random_inc_bw <- function(net,\n                                           inc,\n                                           nsim = 1000,\n                                           props = c(0.9, 0.8, 0.7, \n                                                     0.6, 0.5, 0.4,\n                                                     0.3, 0.2, 0.1),\n                                           lookup_dat) {\n  # insert measure of interest in line below\n  met_orig <- igraph::betweenness(net)\n  output <- matrix(NA, nsim, length(props))\n  colnames(output) <- as.character(props)\n  for (j in 1:length(props)) {\n    for (i in 1:nsim) {\n      sub_samp <- sample(seq(1, nrow(lookup_dat)),\n                         size = round(nrow(lookup_dat) * props[j], 0))\n      # removed prob argument\n      sub <- which(rownames(bib_dat) %in% lookup$Key[sub_samp])\n      sub_adj <- t(inc[sub, ]) %*% inc[sub, ]\n      sub_net <- igraph::graph_from_adjacency_matrix(sub_adj)\n      # insert measure of interest in line below (same as above)\n      temp_stats <- igraph::betweenness(sub_net)\n      output[i, j] <- suppressWarnings(cor(temp_stats, met_orig,\n                                           method = 'spearman'))\n    }\n  }\n  return(output)\n}\n\n# Run the function\nset.seed(4363)\nbib_rand <- nodes_missing_at_random_inc_bw(\n  net = bib_net,\n  inc = bib_dat,\n  lookup_dat = lookup,\n  props = c(0.9, 0.8, 0.7)\n)\nhead(bib_rand)\n#>            0.9       0.8       0.7\n#> [1,] 0.9805339 0.9474142 0.8404082\n#> [2,] 0.9551694 0.9539318 0.8840402\n#> [3,] 0.9582099 0.8897556 0.9311734\n#> [4,] 0.9763482 0.8442237 0.7942490\n#> [5,] 0.8576312 0.8242232 0.8278691\n#> [6,] 1.0000000 0.8433042 0.8883410\ndf1 <- melt(bib_rand) # convert wide data to long format\ndf2 <- melt(bib_bias) # convert wide data to long format\n\n# Add a variable denoting which sample it came from\ndf1$Treatment <- rep(\"Random\", nrow(df1))\ndf2$Treatment <- rep(\"Biased\", nrow(df2))\n\n# Bind into a single dataframe, convert sampling faction to factor\n# and change order of levels for plotting\ndf <- rbind(df1, df2)\ndf$Var2 <- as.factor(df$Var2)\ndf$Var2 <- factor(df$Var2, levels = c(\"0.9\", \"0.8\", \"0.7\"))\n\n# Plot the results\nggplot(data = df) +\n  geom_boxplot(aes(x = Var2, y = value, fill = Treatment)) +\n  scale_fill_manual(values = c(\"white\", \"gray\")) +\n  xlab(\"Sub-Sample Size as Proportion of Original\") +\n  ylab(expression(\"Spearman's\" ~ rho)) +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(2)),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(2))\n  )"},{"path":"quantifying-uncertainty.html","id":"edge-probability-modeling","chapter":"Section 4 Quantifying Uncertainty","heading":"4.5 Edge Probability Modeling","text":"section take inspiration recent work area “Dark Networks” (see Everton 2012). field, number methods recently developed allow us directly incorporate assessments reliability specific edges analysis. can done number different ways. Perhaps common approach networks based data gathered intelligence sources (studies terrorist networks) qualitatively assign different levels confidence ties pairs actors using ordinal scale determined based source information (reliable, usually reliable,… unreliable). ordinal scale confidence can converted probability (0 1) probability value used inform creation range “possible” networks given underlying data.aware archaeological examples edges formally/qualitatively assigned “confidence levels” exactly way, think potential applications method. example, define network assign low probability tie two archaeological sites share import third site/region higher probability tie two sites share imports others region. Importantly, methods can used combine information different sources single assessment likelihood connection.Since data structured exactly way, simulate small example analyze . Let’s create network ties associated “probabilities” plot . use “rg_w” function within tnet package simulate random weighted network way.next chunk code define function iterates every edge simulated network just created defines edge either present absent using simple random binomial probability set edge weight described . output function (edge_liklihood) list object contains “nsim” igraph network objects candidate networks original.Next, order extract values interest candidate networks, created another function called “compile_stat” modified measure interest. function iterates “nsim” networks “net_list” list object calculates “degree” case returning results simple matrix. possible compare things like average degree distribution degree particular nodes across canddiate networks.Now run edge_prob function nsim=1000 display candidate networks.use compile_stat function assess degree centrality one particular node, displaying histogram values mean indicated.","code":"\n# Create random weighted network edgelist with weights from list\nsim_edge <- as.matrix(rg_w(\n  nodes = 20,\n  arcs = 80,\n  weights = c(0.2, 0.4, 0.6, 0.8, 1),\n  directed = F,\n  seed = 41267\n))\n\n# Create network object and assign edge weights and node names\nsim_net <- igraph::graph_from_edgelist(sim_edge[, 1:2])\nE(sim_net)$weight <- sim_edge[order(sim_edge[, 3]), 3]\nV(sim_net)$name <- seq(1:20)\n\n# Create color ramp palette\nedge_cols <- colorRampPalette(c('gray', 'darkblue'))(5)\n\n# Plot the resulting network\nset.seed(4364672)\nggraph(sim_net, layout = \"fr\") +\n  geom_edge_link0(aes(width = E(sim_net)$weight * 5),\n                  edge_colour = edge_cols[E(sim_net)$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_net) + 3,\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 3.5,\n    repel = F\n  ) +\n  theme_graph()\n# Define function for assessing and retaining edges based on edge\n# weight probabilities\nedge_prob <- function(net, nsim) {\n  net_list <- list()\n  for (i in 1:nsim) {\n    sub_set <- NULL\n    for (j in 1:ecount(net)) {\n      temp <- rbinom(1, 1, prob = sim_edge[j, 3])\n      if (temp == 1) {\n        sub_set <- c(sub_set, j)\n      }\n    }\n    net_list[[i]] <-\n      igraph::delete_edges(net, which(!(seq(1, ecount(\n        net\n      ))\n      %in% sub_set)))\n  }\n  return(net_list)\n}\n\n# Define function for assessing statistic of interest\ncompile_stat <- function(net_list, nsim) {\n  out <- matrix(NA, length(net_list), nsim)\n  for (i in 1:nsim) {\n    # degree could be changed to any other igraph function that outputs\n    # a vector of length vcount\n    out[, i] <- igraph::degree(net_list[[i]])\n  }\n  return(out)\n}\nEL_test <- edge_prob(sim_net, nsim = 1000)\n\nset.seed(9651)\ncomp1 <- ggraph(EL_test[[1]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[1]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[1]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_net),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\ncomp2 <- ggraph(EL_test[[2]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[2]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[2]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_net),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\ncomp3 <- ggraph(EL_test[[3]], layout = \"fr\") +\n  geom_edge_link0(aes(width = E(EL_test[[3]])$weight),\n                  edge_colour = edge_cols[E(EL_test[[3]])$weight * 5],\n                  show.legend = F) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(sim_net),\n                  fill = 'red') +\n  geom_node_text(\n    aes(label = as.character(name)),\n    col = 'white',\n    size = 2.5,\n    repel = F\n  ) +\n  theme_graph()\n\nggarrange(comp1, comp2, comp3)\ndg_stat <- compile_stat(EL_test, nsim = 1000)\n\ndg_20 <- dg_stat[20, ]\n\ntibble(val = dg_20) %>%\n  ggplot(., aes(val)) +\n  geom_histogram(binwidth = 1) +\n  xlab(\"Degree Centrality of Node 20\") +\n  geom_vline(xintercept = mean(dg_20), col = 'red')"},{"path":"quantifying-uncertainty.html","id":"small-or-variable-sample-size","chapter":"Section 4 Quantifying Uncertainty","heading":"4.6 Small or Variable Sample Size","text":"section follows Brughmans Peeples (2022) Chapter 5.3.5 provide example can use simulation approach outlined assess sampling variability data underlying archaeological networks. example, use apportioned ceramic frequency data Chaco World portion Southwest Social Networks database. can download data follow along.goal sub-section illustrate can use bootstrappping approach assess variability network properties based sampling error raw data underlying archaeological networks. example based ceramic similarity networks involves creating large number random replicates row raw ceramic data sample size held constant (observed sample size site) probabilities given sherd given type determined underlying multinomial frequency distribition types site. words, pull bunch random samples site probability given sample given type determined relative frequency type actual data. procedure completed, can assess centrality metrics graph, node, edge level property determine degree absolute values relative ranks potentially influenced sampling error.many ways set resampling procedure many complications (example, deal limited diversity small samples?). purposes illustration , implement simple procedure simply generate new samples fixed size based observed data determine degree network measures robust perturbation. chunk code create 1000 replicates based original ceramic data.following chunk code first reads ceramic data, converts Brainerd-Robinson similarity matrix defines function called “sampling_error_sim” creates “nsim” random replciates ceramic data, converts similarity matrices, ouputs results list object.following chunk code runs “sampling_error_sim” function defined Chaco ceramic data defines new fucntion called “sim_cor” takes output “sampling_error_sim” original ceramic similarity matrix (ceramic_BR) calculates weighted degree centrality Speraman’s \\(\\rho\\) correlations original similarity matrix random replicate. “sim_cor” script modified use network metric outputs vector. results returned visualize results histogram.Note take several seconds minutes depending computer.described Chapter 5.3.5, cases want observe patterns variation due sampling error individual sites sets sites. next chunk code illustrate produce figure 5.14 Brughmans Peeples (2022) book. Specifically, plot consists series line plots x axis represents node network ordered degree centrality original observed network. node vertical line represents 95% confidence interval around degree across “nsim” random replicates produced evaluate sampling error. blue line represents degree original network red line represents median degree resampled networks.create plot, first iterate every object “sim_nets” calculate weighted degree centrality add two-column matrix along node id. done simulations, use “summarise” function calculate Mean ","code":"\n# Read in raw ceramic data\nceramic <-\n  read.csv(file = \"data/AD1050cer.csv\",\n           header = TRUE,\n           row.names = 1)\n# Convert to proportion\nceramic_p <- prop.table(as.matrix(ceramic), margin = 1)\n# Convert to Brainerd-Robinson similarity matrix\nceramic_BR <- (2 - as.matrix(vegan::vegdist(ceramic_p,\n                                            method = 'manhattan'))) / 2\n\n# Create function for assessing impact of sampling error on\n# weighted degree for similarity network\nsampling_error_sim <- function(cer, nsim = 1000) {\n  sim_list <- list()\n  for (i in 1:nsim) {\n    data_sim <-  NULL\n    # the for-loop below creates a random multinomial replicate\n    # of the ceramic data\n    for (j in 1:nrow(cer)) {\n      data_sim <-\n        rbind(data_sim, t(rmultinom(1, rowSums(cer)[j], prob = cer[j, ])))\n    }\n    # Convert simulated data to proportion, create similarity matrix,\n    # calculate degree, and assess correlation\n    temp_p <- prop.table(as.matrix(data_sim), margin = 1)\n    sim_list[[i]] <- (2 - as.matrix(vegan::vegdist(temp_p,\n                                                   method = 'manhattan'))) /\n      2\n  }\n  return(sim_list)\n}\nset.seed(4634)\nsim_nets <- sampling_error_sim(cer = ceramic, nsim = 1000)\n\nsim_cor <- function(sim_nets, sim) {\n  # change this line to use a different metric\n  dg_orig <- rowSums(sim)\n  dg_cor <- NULL\n  for (i in 1:length(sim_nets)) {\n    # change this line to use a different metric\n    dg_temp <- rowSums(sim_nets[[i]])\n    dg_cor[i] <-\n      suppressWarnings(cor(dg_orig, dg_temp, method = \"spearman\"))\n  }\n  return(dg_cor)\n}\n\ndg_cor <- sim_cor(sim_nets, ceramic_BR)\n\ndf <- as.data.frame(dg_cor)\n\nggplot(df, aes(x = dg_cor)) +\n  geom_histogram(bins = 100, color = 'white', fill = 'black') +\n  theme_bw() +\n  scale_x_continuous(name = 'Correlation in Degree Centraility',\n                     limits = c(0.9, 1)) +\n  theme(\n    axis.text.x = element_text(size = rel(1.5)),\n    axis.text.y = element_text(size = rel(1.5)),\n    axis.title.x = element_text(size = rel(1.5)),\n    axis.title.y = element_text(size = rel(1.5)),\n    legend.text = element_text(size = rel(1.5))\n  )\n# Create data frame containing degree and site id for nsim random\n# similarity matrices\ndf <- matrix(NA, 1, 2) # define empty matrix\n# calculate degree centrality for each random run and bind in\n# matrix along with id\nfor (i in 1:length(sim_nets)) {\n  temp <- cbind(seq(1, nrow(sim_nets[[i]])), rowSums(sim_nets[[i]]))\n  df <- rbind(df, temp)\n}\ndf <- as.data.frame(df[-1, ]) # remove first row in initial matrix\ncolnames(df) <- c(\"site\", \"degree\") # add column names\n\n# Use summarise function to create median, confidence intervals,\n# and other statistics for degree by site.\nout <- df %>%\n  group_by(site) %>%\n  summarise(\n    Mean = mean(degree),\n    Median = median(degree),\n    Max = max(degree),\n    Min = min(degree),\n    Conf = sd(degree) * 1.96\n  )\nout$site <- as.numeric(out$site)\nout <- out[order(rowSums(ceramic_BR)), ]\n\n# Create dataframe of degree centrality for the original ceramic\n# similarity matrix\ndg_wt <- as.data.frame(rowSums(ceramic_BR))\ncolnames(dg_wt) <- \"dg.wt\"\n\n# Plot the results\nggplot() +\n  geom_line(\n    data = out,\n    aes(\n      x = reorder(site, Median),\n      y = Median,\n      group = 1\n    ),\n    col = 'red',\n    lwd = 1.5,\n    alpha = 0.5\n  ) +\n  geom_errorbar(data = out, aes(\n    x = reorder(site, Median),\n    ymin = Median - Conf,\n    ymax = Median + Conf\n  )) +\n  geom_path(\n    data = sort(dg_wt),\n    aes(x = order(dg.wt), y = dg.wt),\n    col = 'blue',\n    lwd = 1.5,\n    alpha = 0.5\n  ) +\n  theme_bw() +\n  ylab('Degree') +\n  scale_x_discrete(name = 'Sites in Rank Order of Degree') +\n  theme(\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    axis.text.y = element_text(size = rel(2)),\n    axis.title.x = element_text(size = rel(2)),\n    axis.title.y = element_text(size = rel(2)),\n    legend.text = element_text(size = rel(2))\n  )"},{"path":"network-visualization.html","id":"network-visualization","chapter":"Section 5 Network Visualization","heading":"Section 5 Network Visualization","text":"section follows along Brughmans Peeples (2022) chapter 6 illustrate wide variety techniques can used network visualization. begin general examples network plotting demonstrate replicate specific examples appear book. examples rely R cases use software provide additional details data formats.already excellent resources online learning create beautiful informative network visuals. recommend excellent online materials produced Dr. Katherine Ognyanova available website Static dynamic network visualization R workshop materials particular. Many examples book take inspiration work. addition , R Graph Gallery website created Holtz Yan provides numerous excellent examples plots R using ggplot2 ggraph packages among many others. new R, probably helpful read bit basic graphic functions (including tutorials listed ) getting started.","code":""},{"path":"network-visualization.html","id":"datasets-and-r-setup","chapter":"Section 5 Network Visualization","heading":"5.1 Datasets and R Setup","text":"order make easy possible users replicate specific visuals book examples tutorial tried make examples modular possible. means provide calls initialize required libraries plot within relevant chunk code (can easily tell package ) also provide links download data required replicate figure description figure . datasets use include .csv format files well .Rdata files contain sets specific R objects formatted required individual chunks code.plan working entire tutorial like download associated data can download zip file. Simply extract zip folder R working directory examples work. Note examples setup data contained sub-folder working directory called “data” (note directories file names case sensitive).","code":""},{"path":"network-visualization.html","id":"visualizing-networks-in-r","chapter":"Section 5 Network Visualization","heading":"5.2 Visualizing Networks in R","text":"many tools available creating network visualizations R including functions built directly igraph statnet packages. get details, first briefly illustrate primary network plotting options igraph statnet visualization package called ggraph. start initializing required libraries reading adjacency matrix creating network objects igraph network/statnet format. basis examples section.","code":"\nlibrary(igraph)\nlibrary(statnet)\nlibrary(ggraph)\nlibrary(intergraph)\n\n\nCibola <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = TRUE,\n           row.names = 1)\n\nCibola_attr <- read.csv(file = \"data/Cibola_attr.csv\", header = TRUE)\n\n# Create network in igraph format\nCibola_i <- igraph::graph_from_adjacency_matrix(as.matrix(Cibola),\n                                                mode = \"undirected\")\nCibola_i\n#> IGRAPH c10bd91 UN-- 31 167 -- \n#> + attr: name (v/c)\n#> + edges from c10bd91 (vertex names):\n#>  [1] Apache.Creek--Casa.Malpais        \n#>  [2] Apache.Creek--Coyote.Creek        \n#>  [3] Apache.Creek--Hooper.Ranch        \n#>  [4] Apache.Creek--Horse.Camp.Mill     \n#>  [5] Apache.Creek--Hubble.Corner       \n#>  [6] Apache.Creek--Mineral.Creek.Pueblo\n#>  [7] Apache.Creek--Rudd.Creek.Ruin     \n#>  [8] Apache.Creek--Techado.Springs     \n#> + ... omitted several edges\n\n# Create network object in statnet/network format\nCibola_n <- asNetwork(Cibola_i)\nCibola_n\n#>  Network attributes:\n#>   vertices = 31 \n#>   directed = FALSE \n#>   hyper = FALSE \n#>   loops = FALSE \n#>   multiple = FALSE \n#>   bipartite = FALSE \n#>   total edges= 167 \n#>     missing edges= 0 \n#>     non-missing edges= 167 \n#> \n#>  Vertex attribute names: \n#>     vertex.names \n#> \n#> No edge attributes"},{"path":"network-visualization.html","id":"networkstatnet","chapter":"Section 5 Network Visualization","heading":"5.2.1 network/statnet","text":"need plot network/statnet network object simply type plot(nameofnetwork). default, creates network plot nodes edges shown color weight using Fruchterman-Reingold graph layout default. , however, many options can altered basic plot. order see details can type ?plot.network console associated document.order change color nodes, layout, symbols, features, can add arguments detailed help document. arguments can include calls functions, mathematical expressions, even additional data attribute files. example following plot, calculate degree centrality directly within plot call divide result 10 ensure nodes reasonable size plot. use “vertex.cex” argument set node size based results expression. change layout using “mode” argument produce network graph using Kamada-Kawai layout. change color nodes represent “Region” variable associated attribute file using “vertex.col” argument set change edge colors using “edge.col” argument. Finally, use “displayisolates=FALSE” indicate want single isolated node plotted. many options.","code":"\nset.seed(6332)\nplot(Cibola_n)\nset.seed(436)\nplot(\n  Cibola_n,\n  vertex.cex = sna::degree(Cibola_n) / 10,\n  mode = \"kamadakawai\",\n  vertex.col = as.factor(Cibola_attr$Region),\n  edge.col = \"darkgray\",\n  displayisolates = FALSE\n)"},{"path":"network-visualization.html","id":"igraph","chapter":"Section 5 Network Visualization","heading":"5.2.2 igraph","text":"igraph package also built plotting function called plot.igraph. call just need type plot(yournetworkhere) provide igraph object (R can tell kind object simply type plot). default igraph plot uses Fruchterman-Reingold layout just like statnet/network default node labeled.Let’s take look options can alter change plot. many options explore help documents igraph.plotting describe detail (type ?igraph.plotting console ). want explore igraph , suggest check Network Visualization tutorial linked provides discussion wide variety options.","code":"\nset.seed(435)\nplot(Cibola_i)\nset.seed(3463)\nplot(\n  Cibola_i,\n  vertex.size = igraph::eigen_centrality(Cibola_i)$vector * 20,\n  layout = layout_with_kk,\n  vertex.color = as.factor(Cibola_attr$Great.Kiva),\n  edge.color = \"darkblue\",\n  vertex.frame.color = \"red\",\n  vertex.label = NA\n)"},{"path":"network-visualization.html","id":"ggraph","chapter":"Section 5 Network Visualization","heading":"5.2.3 ggraph","text":"ggraph package provides powerful set tools plotting visualizing network data R. format used package bit different saw instead relies ggplot2 style plots plot type called modifications made sets lines additional arguments separated “+”. Although takes bit getting used found ggplot format often intuitive making complex graphics understand basics.Essentially, way ggraph call works start ggraph function call includes network object layout information. provide lines specifying edges “geom_edge_link” nodes “geom_node_point” features . Conveniently ggraph function call take either igraph network/statnet object need convert.example. first call igraph network object “Cibola_i” specify Fruchterman-Reingold layout using layout=“fr”. Next, call “geom_edge_link” specify edge colors. “geom_node_point” call specifies many attributes nodes including fill color, outline color, transparency (alpha), shape, size using igraph::degree function). “scale_size” call tells plot scale node size specified previous line range 1 4. Finally “theme_graph” basic call ggraph theme tells plot make background white remove margins around edge plot. Let’s see looks.next section go common options ggraph detail.many options ggraph package recommend exploring help document (?ggraph) well Data Imaginist ggraph tutorial online . examples use ggraph format.","code":"\nset.seed(4368)\n# Specify network to use and layout\nggraph(Cibola_i, layout = \"fr\") +\n  # Specify edge features\n  geom_edge_link(color = \"darkgray\") +\n  # Specify node features\n  geom_node_point(\n    fill = \"blue\",\n    color = \"red\",\n    alpha = 0.5,\n    shape = 22,\n    size = igraph::degree(Cibola_i)\n  ) +\n  # Set the upper and lower limit of the \"size\" variable\n  scale_size(range = c(1, 4)) +\n  # Set the theme \"theme_graph\" is the default theme for networks\n  theme_graph() "},{"path":"network-visualization.html","id":"network-visualization-options","chapter":"Section 5 Network Visualization","heading":"5.3 Network Visualization Options","text":"section illustrate useful graphical options visualizing networks, focusing particular ggraph format. cases similar options available plotting functions statnet igraph. relevant reference specific figures book tutorial code figures produced R presented next session. examples section use Cibola technological similarity data (click download). First call required packages import data.","code":"\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\n\nload(\"data/Peeples2018.Rdata\")\n\n# Create igraph object for plots below\nnet <- asIgraph(BRnet)"},{"path":"network-visualization.html","id":"graph-layout","chapter":"Section 5 Network Visualization","heading":"5.3.1 Graph Layout","text":"Graph layout simply refers placement organization 2-dimensional 3-dimensional space nodes edges network.","code":""},{"path":"network-visualization.html","id":"manual-or-user-defined-layouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.1 Manual or User Defined Layouts","text":"options manually defining node placement graph layout R easiest simply provide x y coordinates directly. example, plot Cibola technological similarity network set x y coordinates group sites region grid configuration. another example approach see Figure 6.1 . example can interactively define layout see Figure 6.5","code":"\n# site_info - site location and attribute data\n\n# Create xy coordinates grouped by region\nxy <-\n  matrix(\n    c(1, 1, 3, 3, 2, 1, 2, 1.2, 3, 3.2, 2, 1.4, 1, 1.2, 2, 2.2, 3, 2, 3, 1, 2.2, 1, \n      2, 3, 2, 3.2, 3, 1.2, 3, 3.4, 1, 2, 3.2, 3.2, 3, 1.4, 3, 2.2, 2, 2, 3.2, 3.4, \n      2.2, 1.2, 3.4, 3.2, 3.2, 1, 2, 3.4, 3.4, 3.4, 2.2, 3, 2.2, 3.2, 2.2, 3.4, \n      1, 1.4, 3, 2.4), \n    nrow = 31, \n    ncol = 2, \n    byrow = TRUE\n)\n\n# Plot using \"manual\" layout and specify xy coordinates\nggraph(net,\n       layout = \"manual\",\n       x = xy[, 1],\n       y = xy[, 2]) +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = FALSE) +\n  theme_graph()"},{"path":"network-visualization.html","id":"geographic-layouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.2 Geographic Layouts","text":"Plotting networks using geographic layout essentially plotting manual layout except specify geographic coordinates instead coordinates. See Figure 6.2 another example.working geographic data, also sometimes useful plot directly top sort base map. many options one convenient use “sf” “ggmap” packages directly download relevant base map layer plot directly top . first requires converting points latitude longitude decimal degrees already format. See details sf package ggmap package details. addition example Figure 6.7 book provides another example.","code":"\nggraph(net,\n       layout = \"manual\",\n       x = site_info$x,\n       y = site_info$y) +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = F) +\n  theme_graph()\nlibrary(sf)\nlibrary(ggmap)\n\n# Convert attribute location data to sf coordinates and change\n# map projection\nlocations_sf <-\n  st_as_sf(site_info, coords = c(\"x\", \"y\"), crs = 26912)\nloc_trans <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(loc_trans)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n\n# Get basemap \"terrain-background\" data for map in black and white\n# the bbox argument is used to specify the corners of the box to be\n# used and zoom determines the detail.\nbase_cibola <- get_stamenmap(\n  bbox = c(-110.2, 33.4, -107.8, 35.3),\n  zoom = 10,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- data.frame(xy[edgelist[, 1], ], xy[edgelist[, 2], ])\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Plot original data on map\nggmap(base_cibola, darken = 0.35) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    alpha = 0.8,\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y, col = site_info$Region),\n    alpha = 0.8,\n    size = 5,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"network-visualization.html","id":"shape-based-and-algorithmic-layouts","chapter":"Section 5 Network Visualization","heading":"5.3.1.3 Shape-Based and Algorithmic Layouts","text":"wide variety shape-based algorithmic layouts available use R. cases, takes change layouts simply modify single line ggraph call specify desired layout. ggraph package can use igraph layouts well many built directly package. See ?ggraph details see options. show examples. Note leave figures calls except argument layout=“yourlayout” ggraph call ggtitle name. layouts involve randomization, use “set.seed()” function make sure always plot . See discussion Figure 6.8 details. Beyond Figure 6.9 provides additional options can used hierarchical network data.","code":"\n# circular layout\ncirc_net <- ggraph(net, layout = \"circle\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region), show.legend = F) +\n  ggtitle(\"Circle\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Fruchcterman-Reingold layout\nset.seed(4366)\nfr_net <- ggraph(net, layout = \"fr\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region), show.legend = F) +\n  ggtitle(\"Fruchterman-Reingold\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Davidsons and Harels annealing algorithm layout\nset.seed(3467)\ndh_net <- ggraph(net, layout = \"dh\") +\n  geom_edge_link(edge_color = \"gray\") +\n  geom_node_point(aes(size = 4, col = site_info$Region),\n                  show.legend = F) +\n  ggtitle(\"Davidson-Harel\") +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1)))\n\n\nlibrary(ggpubr)\nggarrange(circ_net, fr_net, dh_net, nrow = 1, ncol = 3)"},{"path":"network-visualization.html","id":"node-and-edge-options","chapter":"Section 5 Network Visualization","heading":"5.3.2 Node and Edge Options","text":"many options altering color symbol nodes edges within R. section briefly discuss common options. details see discussion figures 6.10 6.16 .","code":""},{"path":"network-visualization.html","id":"nodes","chapter":"Section 5 Network Visualization","heading":"5.3.2.1 Nodes","text":"ggraph changing node options mostly consists changing options within “geom_node_point” call within ggraph figure call. already seen possible set color nodes variable, change size points, can also scale points metric like centrality. Indeed, even possible make call centrality function question directly within figure code.selecting point shapes can use shapes available base R using pch point codes. available options:many options selecting colors nodes edges. can assigned using standard color names can assigned using rgb hex codes. also possible use standard palettes packages like RColorBrewer scales specify categorical continuous color schemes. often done using either “scale_fill_brewer” “scale_color_brewer” calls RColorBrewer. couple examples. examples, colors grouped site region, node size scaled degree centrality, node edge color shape specified call. Note “alpha” command controls transparency relevant part plot. scale_size call specifies maximum minimum size points plot.R Graph Gallery good overview available color palettes RColorBrewer can used.also number advanced methods displaying nodes including displaying figures data visualizations place nodes using images nodes. examples book code outlining create visuals discussions Figure 6.3 Figure 6.13 .","code":"\nlibrary(ggpubr)\nggpubr::show_point_shapes()\nlibrary(RColorBrewer)\n\nset.seed(347)\ng1 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"gray\", alpha = 0.7) +\n  geom_node_point(\n    aes(fill = site_info$Region),\n    shape = 21,\n    size = igraph::degree(net) / 2,\n    alpha = 0.5\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nset.seed(347)\ng2 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"blue\", alpha = 0.3) +\n  geom_node_point(\n    aes(col = site_info$Region),\n    shape = 15,\n    size = igraph::degree(net) / 2,\n    alpha = 1\n  ) +\n  scale_color_brewer(palette = \"Set1\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nggarrange(g1, g2, nrow = 1)"},{"path":"network-visualization.html","id":"edges","chapter":"Section 5 Network Visualization","heading":"5.3.2.2 Edges","text":"Edges can modified terms color, line type, thickness many features just like nodes typically done using “geom_edge_link” call within ggraph. Let’s take look couple additional examples. case ’re going use weighted network object original Peeples2018.Rdata file show can vary edges relation edge attributes like weight.example plot line thickness transparency using edge weights associated network object. also using “scale_edge_color_viridis” specify continuous edge color scheme. details see ?scale_edge_colourAnother feature edges often important visualizations presence absence type arrows. Arrows can modified ggraph using “arrow” argument within “geom_edge_link” call. relevant options length arrow (determines size), “type” argument specifies open closed arrow, spacing arrow can set “end_cap” “start_cap” respectively define gap arrow point node. values can set using absolute measurements shown example . Since undirected network use argument “ends=‘first’” simulated directed network arrowheads drawn first time edge appears edge list. See ?arrow details options.Another common consideration edges shape edges . far used examples edges straight lines, also possible draw arcs fan nodes multiple connections visible. general, need change option use another command “geom_edge_” family commands. example, following chunk code produce network arcs rather straight lines. case argument “strength” controls amount bend lines.also possible show edges instead just gradient scale representing density edges using “geom_edge_density” call. useful large complex networks.","code":"\nlibrary(intergraph)\nnet2 <- asIgraph(BRnet_w)\n\nset.seed(436)\nggraph(net2, \"stress\") +\n  geom_edge_link(aes(width = weight, alpha = weight, col = weight)) +\n  scale_edge_color_viridis() +\n  scale_edge_width(range = c(1, 5)) +\n  geom_node_point(size = 4, col = \"blue\") +\n  labs(edge_color = \"Edge Weight Color Scale\") +\n  theme_graph()\nset.seed(436)\nggraph(net, \"stress\") +\n  geom_edge_link(\n    arrow = arrow(\n      length = unit(2, 'mm'),\n      ends = \"first\",\n      type = \"closed\"\n    ),\n    end_cap = circle(0, 'mm'),\n    start_cap = circle(3, 'mm'),\n    edge_colour = \"black\"\n  ) +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()\nset.seed(436)\nggraph(net, \"kk\") +\n  geom_edge_arc(edge_colour = \"black\", strength = 0.1) +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()\nset.seed(436)\nggraph(net2, \"kk\") +\n  geom_edge_density() +\n  geom_node_point(size = 4, col = \"blue\") +\n  theme_graph()"},{"path":"network-visualization.html","id":"label-options","chapter":"Section 5 Network Visualization","heading":"5.3.3 Label Options","text":"many cases may want label either nodes, edges, features network. relatively easy ggraph “geom_node_text()” command. place labels specified node. use “repel = TRUE” argument repel names slightly node make readable. shown example Figure 6.4 also possible filter labels label certain nodes.also possible label edges adding argument directly “geom_link_” command. practice, really works small networks. next chunk code, create small network demonstrate function.","code":"\n# First set a node attribute called name based on site names\nV(net2)$name <- get.vertex.attribute(BRnet_w, attr = \"vertex.names\")\n\nset.seed(436)\nggraph(net2, \"fr\") +\n  geom_edge_link() +\n  geom_node_point(size = 4, col = \"blue\") +\n  geom_node_text(aes(label = name), size = 3, repel = TRUE) +\n  theme_graph()\ng <- graph(c(\"A\", \"B\",\n             \"B\", \"C\",\n             \"A\", \"C\",\n             \"A\", \"A\",\n             \"C\", \"B\",\n             \"D\", \"C\"))\n\nE(g)$weight <- c(3, 1, 6, 8, 4, 2)\n\nset.seed(4351)\nggraph(g, layout = 'stress') +\n  geom_edge_fan(aes(label = weight)) +\n  geom_node_point(size = 20, col = 'lightblue') +\n  geom_node_text(label = V(g)$name) +\n  theme_graph()"},{"path":"network-visualization.html","id":"be-kind-to-the-color-blind","chapter":"Section 5 Network Visualization","heading":"5.3.4 Be Kind to the Color Blind","text":"selecting color schemes, important consider impact particular color scheme color blind readers. excellent set R scripts GitHub package called colorblindr can help just . slightly modified code colorblindr package created script called colorblindr.R can download use test network. Simply run code script use cvd_grid2() function ggplot ggraph object see simulated colors.chunk code loads colorblindr.R script plots figure using RColorBrewer color “Set2” original unmodified format might look readers common forms color vision issues.","code":"\nlibrary(colorspace)\nsource(\"data/colorblindr.R\")\ncvd_grid2(g1)"},{"path":"network-visualization.html","id":"communities-and-groups","chapter":"Section 5 Network Visualization","heading":"5.3.5 Communities and Groups","text":"Showing communities groups network visualizations can simple color coding nodes edges seen many examples . sometimes also useful highlight groups creating convex hull circle around relevant points. can done ggraph using “geom_mark_hull” command within ggforce package.following chunk code provides simple example using Louvain clustering algorithm.discussion Figure 6.4 provides another similar example. many complicated ways showing network groups provided examples covering figures book. example, Figure 6.18 provides example “group---box” technique using NodeXL software package. Figure 6.19 illustrates use matrices visualization tools Figure 6.20 provides links Nodetrix hybrid visualization software.","code":"\n\nlibrary(ggforce)\n\n# Define clusters\ngrp <- as.factor(cluster_louvain(net2)$membership)\n\nset.seed(4343)\nggraph(net2, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp),\n                  shape = 21,\n                  size = 5,\n                  alpha = 0.75) +\n  # Create hull around points within group and label\n  geom_mark_hull(\n    aes(\n      x,\n      y,\n      group = grp,\n      fill = grp,\n      label = grp\n    ),\n    concavity = 4,\n    expand = unit(2, \"mm\"),\n    alpha = 0.25,\n    label.fontsize = 10\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph()"},{"path":"network-visualization.html","id":"replicating-the-book-figures","chapter":"Section 5 Network Visualization","heading":"5.4 Replicating the Book Figures","text":"section go figure Chapter 6 Brughmans Peeples (2022) detail final graph created figures created using R. figures created R describe software data used provide additional resources available. hope examples serve inspiration network visualization experiments. figures relatively simple others quite complex. presented order appear book.","code":""},{"path":"network-visualization.html","id":"Figure_6_1","chapter":"Section 5 Network Visualization","heading":"5.4.1 Figure 6.1: Manual Layout","text":"Figure 6.1. example early hand drawn network graph (sociogram) published Moreno (1932: 101). Moreno noted nodes top bottom sociogram connections therefore represent nodes greatest importance. specific “important” points emphasized size placement.Note hand drawn version figure presented book digital example presented illustrative purposes. shows can employ user defined layouts directly supplying coordinates nodes plot. Download Moreno data follow along.","code":"\nlibrary(igraph)\nlibrary(ggraph)\n\n# Read in adjacency matrix of Moreno data and covert to network\nMoreno <-\n  as.matrix(read.csv('data/Moreno.csv', header = T, row.names = 1))\ng.Moreno <- graph_from_adjacency_matrix(Moreno)\n\n# Create xy coordinates associated with each node\nxy <- matrix(\n  c(4, 7, 1, 5, 6, 5, 2, 4, 3, 4, 5, 4, 1, 2.5, 6, 2.5, 4, 1),\n  nrow = 9,\n  ncol = 2,\n  byrow = T\n)\n\n# Plot the network using layout = \"manual\" to place nodes using xy coordinates\nggraph(g.Moreno,\n       layout = \"manual\",\n       x = xy[, 1],\n       y = xy[, 2]) +\n  geom_edge_link() +\n  geom_node_point(fill = 'white',\n                  shape = 21,\n                  size = igraph::degree(g.Moreno)) +\n  scale_size(range = c(2, 3)) +\n  theme_graph() "},{"path":"network-visualization.html","id":"Figure_6_2","chapter":"Section 5 Network Visualization","heading":"5.4.2 Figure 6.2: Examples of Common Network Plot Formats","text":"Figure 6.2. plots different visual representations network data Peeples’s (2018) data edges defined based technological similarities cooking pots node represent archaeological settlements.code creates individual figures compiles single composite figure plotting.First read data (data combined single RData file ).Fig 6.2a - simple network graph nodes placed based Fruchterman-Reingold algorithmFig 6.2b - Network graph nodes placed based real geographic locations settlements color coded based sub-regions.Fig 6.2c - graph designed show many different kinds information can combined single network plot. network graph node placement defined stress majorization algorithm (see ), nodes color coded based region, different symbols different kinds public architectural features found sites, nodes scaled based betweenness centrality scores. line weight edge used indicate relative tie-strength.Fig. 6.2d - network graph laid using Kamada-Kawai force directed algorithm nodes color coded based communities detected using Louvain community detection algorithm. community also indicated circle highlighting relevant nodes. Edges within communities shown black edges communities shown red.plot use “.ggplot” function convert traditional igraph plot ggraph plot illustrate can done.Finally, use “ggarrange” function “ggpubr” package combine plots single composite plot.","code":"\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggplotify)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(file = \"data/Peeples2018.Rdata\")\n## contains objects\n# site_info - site locations and attributes\n# ceramicBR - raw Brainerd-Robinson similarity among sites\n# BRnet - binary network with similarity values > 0.65\n#     defined as edges in statnet/network format\n# BRnet_w - weighted network with edges (>0.65) given weight\n#     values based on BR similarity in statnet/network format\n##\n## create simple graph with Fruchterman - Reingold layout\nset.seed(423)\nF6.2a <- ggraph(BRnet, \"fr\") +\n  geom_edge_link(edge_colour = \"grey66\") +\n  geom_node_point(aes(size = 5), col = \"red\", show.legend = FALSE) +\n  theme_graph()\nF6.2a\n## create graph with layout determined by site location and nodes color coded by region\nF6.2b <- ggraph(BRnet, \"manual\",\n                x = site_info$x,\n                y = site_info$y) +\n  geom_edge_link(edge_colour = \"grey66\") +\n  geom_node_point(aes(size = 2, col = site_info$Region),\n                  show.legend = FALSE) +\n  theme_graph()\nF6.2b\n# create vectors of attributes and betweenness centrality and plot\n# network with nodes color coded by region, sized by betweenness,\n# with symbols representing public architectural features, and\n# with edges weighted by BR similarity\ncol1 <- as.factor((site_info$Great.Kiva))\ncol2 <- as.factor((site_info$Region))\nbw <- sna::betweenness(BRnet_w)\n\nF6.2c <- ggraph(BRnet_w, \"stress\") +\n  geom_edge_link(aes(width = weight, alpha = weight),\n                 edge_colour = \"black\",\n                 show.legend = F) +\n  scale_edge_width(range = c(1, 2)) +\n  geom_node_point(aes(\n    size = bw,\n    shape = col1,\n    fill = col1,\n    col = site_info$Region\n  ),\n  show.legend = F) +\n  scale_fill_discrete() +\n  scale_size(range = c(4, 12)) +\n  theme_graph()\nF6.2c\n# convert network object to igraph object and calculate Louvain\n# cluster membership plot and convert to grob to combine in ggplot\ng <- asIgraph(BRnet_w)\nclst <- cluster_louvain(g)\n\nF6.2d <- as.ggplot(\n  ~ plot(\n    clst,\n    g,\n    layout = layout_with_kk,\n    vertex.label = NA,\n    vertex.size = 10,\n    col = rainbow(4)[clst$membership]\n  )\n)\nF6.2d\n# Combine all plots into a single figure using ggarrange\nfigure_6_2 <- ggarrange(\n  F6.2a,\n  F6.2b,\n  F6.2c,\n  F6.2d,\n  nrow = 2,\n  ncol = 2,\n  labels = c('(a)', '(b)', '(c)', '(d)'),\n  font.label = list(size = 22)\n)\n\nfigure_6_2"},{"path":"network-visualization.html","id":"Figure_6_3","chapter":"Section 5 Network Visualization","heading":"5.4.3 Figure 6.3: Examples of Rare Network Plot Formats","text":"Figure 6.3. visualizations using Cibola technological similarity data.Fig 6.3a - weighted heat plot underlying similarity matrix hierarchical clusters shown axis. plot relies packages called “superheat” produces plots formatted see .Fig. 6.3b - arcplot within group ties shown plot group ties shown .plot, read adjacency matrix ordered order want show final plot. Download file follow along.Fig. 6.3c - Network plot sites geographic locations edges bundled using edge bundling hammer routine.function requires “edgebundle” package installed uses Cibola technological similarity data.Fig. 6.3d - Network graph nodes replaced waffle plots show relative frequencies common ceramic technological clusters.somewhat complicated plot requires couple specialized libraries additional steps along way. provide comments code help follow along. Essentially routine creates series waffle plots uses annotation replace nodes final ggraph.Combine plots single figure","code":"\n\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(ggplotify)\nlibrary(superheat)\n\nceramicBRa <- ceramicBR\ndiag(ceramicBRa) <- NA\n\nF6.3a <- as.ggplot(\n  ~ superheat(\n    ceramicBRa,\n    row.dendrogram = T,\n    col.dendrogram = T,\n    grid.hline.col = \"white\",\n    grid.vline.col = \"white\",\n    legend = F,\n    left.label.size = 0,\n    bottom.label.size = 0\n  )\n)\nF6.3a\n\n\narc_dat <- read.csv('data/Peeples_arcplot.csv',\n                    header = T,\n                    row.names = 1)\ng <- graph_from_adjacency_matrix(as.matrix(t(arc_dat)))\n\n# set groups for color\ngrp <- as.factor(c(2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,1,1,1,1,1,1,1,1,\n                   1,1,1,1,1,1)) \n\n\n# Make the graph\nF6.3b <- ggraph(g, layout = \"linear\") +\n  geom_edge_arc(\n    edge_colour = \"black\",\n    edge_alpha = 0.2,\n    edge_width = 0.7,\n    fold = F,\n    strength = 1,\n    show.legend = F\n  ) +\n  geom_node_point(\n    aes(\n      size = igraph::degree(g),\n      color = grp,\n      fill = grp\n    ),\n    alpha = 0.5,\n    show.legend = F\n  ) +\n  scale_size_continuous(range = c(4, 8)) +\n  theme_graph()\nF6.3b\nlibrary(edgebundle)\nload(\"data/Peeples2018.Rdata\")\n\n# Create attribute file with rquired data\nxy<- as.data.frame(site_info[,1:2])\nxy <- cbind(xy,site_info$Region)\ncolnames(xy) <- c('x','y','Region')\n\n# Run hammer bundling routine\ng <- asIgraph(BRnet)\nhbundle <- edge_bundle_hammer(g, xy, bw = 5, decay = 0.3)\n\nF6.3c <-   ggplot()+\n  geom_path(data = hbundle,aes(x,y,group=group),\n            col=\"gray66\",size=0.5) +\n  geom_point(data = xy,aes(x,y,col=Region),\n             size=5, alpha=0.75, show.legend=F)+\n  theme_void()\nF6.3c\n# Initialize libraries\nlibrary(ggwaffle)\nlibrary(tidyverse)\n\n# Create igraph object from data imported above\nCibola_adj <-\n  read.csv(file = \"data/Cibola_adj.csv\",\n           header = TRUE,\n           row.names = 1)\ng <- graph_from_adjacency_matrix(as.matrix(Cibola_adj),\n                                 mode = \"undirected\")\n\n# Import raw ceramic data and convert to proportions\nceramic_clust <- read.csv(file = \"data/Cibola_clust.csv\",\n                          header = T,\n                          row.names = 1)\nceramic.p <- prop.table(as.matrix(ceramic_clust), margin = 1)\n\n# Assign vertex attributes to the network object g which represent\n# columns in the ceramic.p table\nV(g)$C1 <- ceramic.p[, 1]\nV(g)$C2 <- ceramic.p[, 2]\nV(g)$C3 <- ceramic.p[, 3]\nV(g)$C4 <- ceramic.p[, 4]\nV(g)$C5 <- ceramic.p[, 5]\nV(g)$C6 <- ceramic.p[, 6]\nV(g)$C7 <- ceramic.p[, 7]\nV(g)$C8 <- ceramic.p[, 8]\nV(g)$C9 <- ceramic.p[, 9]\nV(g)$C10 <- ceramic.p[, 10]\n\n# Precompute the layout and assign coordinates as x and y in network g\nset.seed(345434534)\nxy <- layout_with_fr(g)\nV(g)$x <- xy[, 1]\nV(g)$y <- xy[, 2]\n\n# Create a data frame that contains the 4 most common\n# categories in the ceramic table, the node id, and the proportion\n# of that ceramic category at that node\nnodes_wide <- igraph::as_data_frame(g, \"vertices\")\nnodes_long <- nodes_wide %>% dplyr::select(C1:C4) %>%\n  mutate(id = 1:nrow(nodes_wide)) %>%\n  gather(\"attr\", \"value\", C1:C4)\nnodes_out <- NULL\nfor (j in 1:nrow(nodes_long)) {\n  temp <- do.call(\"rbind\", replicate(round(nodes_long[j, ]$value * 50, 0),\n                                     nodes_long[j, ], simplify = FALSE))\n  nodes_out <- rbind(nodes_out, temp)\n}\n\n# Create a list object for the call to each bar chart by node\nbar_list <- lapply(1:vcount(g), function(i) {\n  gt_plot <- ggplotGrob(\n    ggplot(waffle_iron(nodes_out[nodes_out$id == i,],\n                       aes_d(group = attr))) +\n      geom_waffle(aes(x, y, fill = group), size = 0.1) +\n      coord_equal() +\n      labs(x = NULL, y = NULL) +\n      theme(\n        legend.position = \"none\",\n        panel.background = element_rect(fill = \"white\", colour = NA),\n        line = element_blank(),\n        text = element_blank()\n      )\n  )\n  panel_coords <- gt_plot$layout[gt_plot$layout$name == \"panel\",]\n  gt_plot[panel_coords$t:panel_coords$b, panel_coords$l:panel_coords$r]\n})\n\n# Convert the results above into custom annotation\nannot_list <- lapply(1:vcount(g), function(i) {\n  xmin <- nodes_wide$x[i] - .2\n  xmax <- nodes_wide$x[i] + .2\n  ymin <- nodes_wide$y[i] - .2\n  ymax <- nodes_wide$y[i] + .2\n  annotation_custom(\n    bar_list[[i]],\n    xmin = xmin,\n    xmax = xmax,\n    ymin = ymin,\n    ymax = ymax\n  )\n})\n\n# create basic network\np <- ggraph(g, \"manual\", x = V(g)$x, y = V(g)$y) +\n  geom_edge_link0() +\n  theme_graph() +\n  coord_fixed()\n\n# put everything together by combining with the annotation (bar plots + network)\nF6.3d <- Reduce(\"+\", annot_list, p)\nF6.3d\nlibrary(ggpubr)\nfigure_6_3 <- ggarrange(F6.3a, F6.3b, F6.3c, F6.3d, nrow=2, ncol=2, \n                        labels=c('(a)','(b)','(c)','(d)'), \n                        font.label=list(size=22))\n\nfigure_6_3"},{"path":"network-visualization.html","id":"Figure_6_4","chapter":"Section 5 Network Visualization","heading":"5.4.4 Figure 6.4: Simple Network with Clusters","text":"Figure 6.4 network shared lithic material sources among Clovis sites western North America.example shows define indicate groups label points.","code":"\nlibrary(ggforce)\nlibrary(ggraph)\nlibrary(statnet)\nlibrary(igraph)\n\nClovis <- read.csv(\"data/Clovis.csv\", header = T, row.names = 1)\ncolnames(Clovis) <- row.names(Clovis)\ngraph <- graph_from_adjacency_matrix(as.matrix(Clovis),\n                                     mode = \"undirected\", diag = F)\n\nbw <- igraph::betweenness(graph)\n\ngrp <- as.factor(cluster_louvain(graph)$membership)\n\nset.seed(43643548)\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(edge_width = 1, color = 'gray') +\n  geom_node_point(aes(fill = grp, size = bw, color = grp),\n                  shape = 21,\n                  alpha = 0.75) +\n  scale_size(range = c(2, 20)) +\n  geom_mark_hull(\n    aes(\n      x,\n      y,\n      group = grp,\n      fill = grp,\n      label = grp,\n      color = NA\n    ),\n    concavity = 4,\n    expand = unit(2, \"mm\"),\n    alpha = 0.25,\n    label.fontsize = 12\n  ) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  geom_node_text(aes(label = ifelse(bw > 40,\n                                    as.character(name),\n                                    NA_character_)), size = 4) +\n  theme_graph() +\n  theme(legend.position = \"none\")"},{"path":"network-visualization.html","id":"Figure_6_5","chapter":"Section 5 Network Visualization","heading":"5.4.5 Figure 6.5: Interactive Layout","text":"Figure 6.5 produced NetDraw creating simple network just creating two configurations nodes. options creating similar figure R. simplest use igraph network object “tkplot” function. function brings window lets drag move nodes (without initial algorithmic layout) ’re done can assign new positions variable use plotting. Use data follow along.bring window like example click “Close” automatically create variables locational information plotting.","code":"\nlibrary(igraph)\nlibrary(intergraph)\n\nload(\"data/Peeples2018.Rdata\")\n\nCibola_i <- asIgraph(BRnet)\n\nlocs <- tkplot(Cibola_i)\nCoords <- tkplot.getcoords(locs)\nplot(Cibola_i, layout=Coords)"},{"path":"network-visualization.html","id":"Figure_6_6","chapter":"Section 5 Network Visualization","heading":"5.4.6 Figure 6.6: Absolute Geographic Layout","text":"Fig. 6.6. Map major Roman roads major settlements Iberian Peninsula, () roads mapped along actual geographic paths (b) roads shown simple line segments nodes.figure appears book originally created using GIS software possible prepare quite similar figure R using tools outlined . reproduce results presented need download node information file road edge list.","code":"\n\n\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\n\nedges1 <- read.csv(\"data/Hispania_roads.csv\", header = T)\nedges1 <- edges1[which(edges1$Weight > 25), ]\nnodes <- read.csv(\"data/Hispania_nodes.csv\", header = T)\nnodes <- nodes[which(nodes$Id %in% c(edges1$Source, edges1$Target)), ]\n\nroad_net <-\n  graph_from_edgelist(as.matrix(edges1[, 1:2]), directed = FALSE)\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(road_net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\n\nmyMap <- get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                       maptype = \"watercolor\",\n                       zoom = 6)\n\nggmap(myMap) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 1.5,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"network-visualization.html","id":"Figure_6_7","chapter":"Section 5 Network Visualization","heading":"5.4.7 Figure 6.7: Distorted Geographic Layout","text":"Fig. 6.7. ceramic similarity network San Pedro River Valley Arizona shows challenges creating geographic network layouts. Figure 6.7a shows sites original locations whereas figure 6.7b shifts locations improve visibility network structure. Note distorted geographic layout retains basic relationships among nodes altering locations slightly.Unfortunately first map contains real site locations share data . second map can still reproduced given nothing code . difference required produce Figure 6.7a replace “coord” site coordinates actual site locations.","code":"\nlibrary(igraph)\nlibrary(sf)\nlibrary(ggmap)\nlibrary(ggsn)\nlibrary(ggrepel)\nlibrary(ggpubr)\n\nload(\"data/Figure6_7.Rdata\")\n# g.net - igraph network object of San Pedro sites based on\n# ceramic similarity\n\n# Define coordinates of \"jittered\" points\n# These points were originally created using the \"jitter\" function\n# until a reasonable set of points were found.\ncoord <- c(-110.7985, 32.97888,\n-110.7472, 32.89950,\n-110.6965, 32.83496,\n-110.6899, 32.91499,\n-110.5508, 32.72260,\n-110.4752, 32.60533,\n-110.3367, 32.33341,\n-110.5930, 32.43487,\n-110.8160, 32.86185,\n-110.6650, 32.64882,\n-110.4558, 32.56866,\n-110.6879, 32.60055,\n-110.7428, 32.93124,\n-110.4173, 32.34401,\n-110.7000, 32.73344)\n\nattr <- c(\"Swingle's Sample\",\"Ash Terrace\",\"Lost Mound\",\n          \"Dudleyville Mound\",\"Leaverton\",\"High Mesa\",\n          \"Elliott Site\",\"Bayless Ruin\",\"Flieger\",\n          \"Big Bell\",\"111 Ranch\",\"Twin Hawks\",\"Artifact Hill\",\n          \"Jose Solas Ruin\",\"Wright\")\n\n\n# Convert coordinates to data frame\nzz <- as.data.frame(matrix(coord, nrow = 15, byrow = TRUE))\ncolnames(zz) <- c('x', 'y')\n\n# Get basemap \"terrain-background\" data for map in black and white\nbase3 <- get_stamenmap(\n  bbox = c(-111, 32.2, -110, 33.1),\n  zoom = 10,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(g.net)\n\n# Create dataframe of beginning and ending points of edges\nedges2 <- data.frame(zz[edgelist[, 1], ], zz[edgelist[, 2], ])\ncolnames(edges2) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Plot jittered coordinates on map\nfigure_6_7 <- ggmap(base3, darken = 0.35) +\n  geom_segment(\n    data = edges2,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    size = 1\n  ) +\n  geom_point(\n    data = zz,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'red',\n    size = 5,\n    show.legend = F\n  ) +\n  geom_text_repel(aes(x = x, y = y, label = attr), data = zz, size = 3) +\n  scalebar(\n    x.min = -111,\n    x.max = -110.75,\n    y.min = 32.25,\n    y.max = 33,\n    dist = 10,\n    dist_unit = \"km\",\n    st.bottom = FALSE,\n    transform = TRUE,\n    model = \"WGS84\"\n  ) +\n  theme_void()\n\nfigure_6_7"},{"path":"network-visualization.html","id":"Figure_6_8","chapter":"Section 5 Network Visualization","heading":"5.4.8 Figure 6.8: Graph Layout Algorithms","text":"Fig. 6.8. Several different graph layouts using “Zachary karate” network. graph, nodes scale based betweenness centrality color coded based optimal clusters based modularity maximization.","code":"\n\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\nlibrary(igraphdata)\nlibrary(graphlayouts)\nlibrary(sf)\nlibrary(ggmap)\n\n# Load igraph aegean_net data\n#data(aegean_net)\naegean <- read.csv(\"data/aegean.csv\", row.names = 1, header = T)\naegean_dist <- aegean\naegean_dist[aegean_dist > 124] <- 0\naegean_dist[aegean_dist > 0] <- 1\naegean_net <- graph_from_adjacency_matrix(as.matrix(aegean_dist))\n\n# Define cluster membership and betweenness centrality for plotting\ngrp <- as.factor(cluster_optimal(aegean_net)$membership)\nbw <- as.numeric(igraph::betweenness(aegean_net))\n\n# Create geographic network and plot\nnodes <- read.csv('data/aegean_locs.csv')\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes,\n           coords = c(\"Longitude\", \"Latitude\"),\n           crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\nmyMap <- get_stamenmap(bbox = c(22, 34.5, 29, 38.8),\n                       zoom = 8,\n                       maptype = \"terrain-background\")\n\n# Extract edgelist from network object for road_net\nedgelist1 <- get.edgelist(aegean_net)\n\n# Create dataframe of beginning and ending points of edges\nedges1 <- as.data.frame(matrix(NA, nrow(edgelist1), 4))\ncolnames(edges1) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist1)) {\n  edges1[i, ] <-\n    c(nodes[which(nodes$Name == edgelist1[i, 1]), ]$Longitude,\n      nodes[which(nodes$Name == edgelist1[i, 1]), ]$Latitude,\n      nodes[which(nodes$Name == edgelist1[i, 2]), ]$Longitude,\n      nodes[which(nodes$Name == edgelist1[i, 2]), ]$Latitude)\n}\n\ngeo_net <- ggmap(myMap) +\n  geom_segment(\n    data = edges1,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y, size = bw, fill = grp),\n    alpha = 0.8,\n    shape = 21,\n    show.legend = F\n  ) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  ggtitle(\"Geographic\") +\n  theme(plot.title = element_text(size = rel(1)))\n\n# Multidimensional Scaling Layout with color by cluster and node\n# size by betweenness\nset.seed(435353)\ng.mds <- ggraph(aegean_net, layout = \"mds\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Multi-Dimensional Scaling\") +\n  theme(legend.position = \"none\")\n\n# Fruchterman-Reingold Layout with color by cluster and node size\n# by betweenness\nset.seed(435353)\ng.fr <- ggraph(aegean_net, layout = \"fr\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Fruchterman-Reingold\") +\n  theme(legend.position = \"none\")\n\n# Kamada-Kawai Layout with color by cluster and node size by betweenness\nset.seed(435353)\ng.kk <- ggraph(aegean_net, layout = \"kk\") +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21 ,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Kamada-Kawai\") +\n  theme(legend.position = \"none\")\n\n# Radial Centrality Layout with color by cluster and node size by\n# betweenness\nset.seed(435353)\ng.cent <- ggraph(aegean_net,\n                 layout = \"centrality\",\n                 centrality = igraph::betweenness(aegean_net)) +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Radial Centrality\") +\n  theme(legend.position = \"none\")\n\n# Spectral Layout with color by cluster and node size by betweenness\nu1 <- layout_with_eigen(aegean_net)\ng.spec <- ggraph(aegean_net,\n                 layout = \"manual\",\n                 x = u1[, 1],\n                 y = u1[, 2]) +\n  geom_edge_link0(width = 0.2) +\n  geom_node_point(aes(fill = grp, size = bw),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(4, 12)) +\n  scale_color_brewer(palette = \"Set2\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  scale_edge_color_manual(values = c(rgb(0, 0, 0, 0.3),\n                                     rgb(0, 0, 0, 1))) +\n  \n  theme_graph() +\n  theme(plot.title = element_text(size = rel(1))) +\n  ggtitle(\"Spectral\") +\n  theme(legend.position = \"none\")\n\n\nfigure_6_8 <-\n  ggarrange(geo_net,\n            g.mds,\n            g.fr,\n            g.kk,\n            g.cent,\n            g.spec,\n            ncol = 2,\n            nrow = 3)\nfigure_6_8"},{"path":"network-visualization.html","id":"Figure_6_9","chapter":"Section 5 Network Visualization","heading":"5.4.9 Figure 6.9: Heirarchical Graph Layouts","text":"Fig. 6.9. Examples visualizations based hierarchical graph data. ) Graph nodes color coded hierarchical level. B) Bubble plot nodes scaled proportional sub-group size. C) Dendrogram hierarchical cluster data. D) Radial graph edges bundled based similarity relations. Edges color coded red origin purple destination help visualize direction.graphs based hierarchical graph created assigning nodes leaves hierarchical cluster analysis performed Cibola ceramic technological cluster data. data 6.9d randomly generated following example R Graph Gallery. Use data follow along.","code":"\n# initialize libraries\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ape)\nlibrary(RColorBrewer)\nlibrary(ggpubr)\n\nload(file = \"data/Figure6_9.Rdata\")\n\nset.seed(4353543)\nh1 <- ggraph(h_graph, 'circlepack') +\n  geom_edge_link() +\n  geom_node_point(aes(colour = depth, size = (max(depth) - depth) / 2),\n                  show.legend = F) +\n  scale_color_viridis() +\n  theme_graph() +\n  coord_fixed()\n\nset.seed(643346463)\nh2 <- ggraph(h_graph, 'circlepack') +\n  geom_node_circle(aes(fill = depth),\n                   size = 0.25,\n                   n = 50,\n                   show.legend = F) +\n  scale_fill_viridis() +\n  theme_graph() +\n  coord_fixed()\n\nh3 <- ggraph(h_graph, 'dendrogram') +\n  geom_node_point(aes(filter = leaf),\n                  color = 'blue' ,\n                  alpha = 0.7,\n                  size = 3) +\n  theme_graph() +\n  geom_edge_link()\n\nh4 <-\n  ggraph(sub_grp_graph, layout = 'dendrogram', circular = TRUE) +\n  geom_conn_bundle(\n    data = get_con(from = from, to = to),\n    alpha = 0.2,\n    width = 0.9,\n    tension = 0.9,\n    aes(colour = ..index..)\n  ) +\n  scale_edge_colour_distiller(palette = \"RdPu\") +\n  geom_node_point(aes(\n    filter = leaf,\n    x = x * 1.05,\n    y = y * 1.05,\n    colour = group\n  ), size = 3) +\n  scale_colour_manual(values = rep(brewer.pal(9, \"Paired\") , 30)) +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\nfigure_6_9 <- ggarrange(\n  h1,\n  h2,\n  h3,\n  h4,\n  ncol = 2,\n  nrow = 2,\n  labels = c('(a)', '(b)', '(c)', '(d)')\n)\nfigure_6_9"},{"path":"network-visualization.html","id":"Figure_6_10","chapter":"Section 5 Network Visualization","heading":"5.4.10 Figure 6.10: Be kind to the color blind","text":"","code":"\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(RColorBrewer)\nlibrary(colorspace)\nsource(\"data/colorblindr.R\")\n\nload(\"data/Peeples2018.Rdata\")\n\n# Create igraph object for plots below\nnet <- asIgraph(BRnet)\n\nset.seed(347)\ng1 <- ggraph(net, layout = \"kk\") +\n  geom_edge_link(edge_color = \"gray\", alpha = 0.7) +\n  geom_node_point(\n    aes(fill = site_info$Region),\n    shape = 21,\n    size = igraph::degree(net) / 2,\n    alpha = 0.5\n  ) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_graph() +\n  theme(legend.position = \"none\")\n\ncvd_grid2(g1)"},{"path":"network-visualization.html","id":"Figure_6_11","chapter":"Section 5 Network Visualization","heading":"5.4.11 Figure 6.11: Node Symbol and Color Schemes","text":"Fig. 6.11. Examples different node color symbol schemes. Note adding color size eases identification particular values, particular closely spaced points. Using transparency can similarly aid showing multiple overlapping nodes.version appears book compiled labeled Adobe Illustrator.","code":"\nlibrary(scales)\n\nplot(\n  x = 1:5,\n  y = rep(2, 5),\n  pch = 16,\n  cex = seq(5:10),\n  col = \"blue\",\n  ylim = c(0, 4),\n  bty = 'n',\n  xaxt = 'n',\n  yaxt = 'n',\n  xlab = '',\n  ylab = ''\n)\npoints(\n  x = 1:5,\n  y = rep(1.5, 5),\n  pch = 21,\n  cex = seq(5:10),\n  bg = heat.colors(5, rev = T)\n)\npoints(\n  x = 1:5,\n  y = rep(1, 5),\n  pch = c(1, 2, 3, 4, 5),\n  cex = seq(5:10),\n  bg = 'skyblue',\n  col = 'blue',\n  lwd = 2\n)\n\nset.seed(34456)\nx <- rnorm(15, 1, 0.5)\ny <- rnorm(15, 1, 0.5)\nxy <- cbind(x, y)\nxy2 <- cbind(x + 5, y)\nxy3 <- cbind(x + 10, y)\nxy4 <- cbind(x + 15, y)\nxy5 <- cbind(x + 20, y)\n\nsize <- sample(c(5, 6, 7, 8, 9), size = 15, replace = T)\nsize <- size - 4\n\nh.col <- heat.colors(5, rev = T)\n\nplot(\n  xy[order(size, decreasing = T), ],\n  pch = 16,\n  col = 'blue',\n  cex = size[order(size, decreasing = T)],\n  xlim = c(0, 22),\n  ylim = c(-1, 3),\n  bty = 'n',\n  xaxt = 'n',\n  yaxt = 'n',\n  xlab = '',\n  ylab = ''\n)\npoints(xy2[order(size, decreasing = T), ],\n       pch = 21,\n       bg = h.col[size[order(size, decreasing = T)]],\n       cex = size[order(size, decreasing = T)])\npoints(xy3[order(size, decreasing = T), ],\n       pch = size[order(size, decreasing = T)],\n       col = 'blue',\n       cex = size[order(size, decreasing = T)])\npoints(\n  xy4[order(size, decreasing = T), ],\n  pch = 21,\n  col = 'gray66',\n  bg = alpha('blue', 0.7),\n  cex = size[order(size, decreasing = T)]\n)\npoints(xy5[order(size, decreasing = T), ],\n       pch = 21,\n       bg = alpha(h.col[size[order(size, decreasing = T)]], 0.7),\n       cex = size[order(size, decreasing = T)])"},{"path":"network-visualization.html","id":"Figure_6_12","chapter":"Section 5 Network Visualization","heading":"5.4.12 Figure 6.12: Image for Node","text":"Fig. 6.12. Network graph showing similarity among carved faces Banés, Holguín province, Cuba. Nodes depicted objects question edges represent shared attributes numbers indicating number shared attributes pair faces.Figure 6.12 used permission Angus Mol original produced 2014 book.","code":""},{"path":"network-visualization.html","id":"Figure_6_13","chapter":"Section 5 Network Visualization","heading":"5.4.13 Figure 6.13: Images for Nodes","text":"Fig. 6.13. Two-mode network ceramics sites San Pedro Valley ceramic ware categories represented graphic example type.version Figure 6.13 Brughmans Peeples (2022) book originally created NetDraw modified add node pictures Adobe Photoshop. approach preferred produced higher resolution consistent images graphics produce directly R particular feature. , however, possible use images place nodes R networks example illustrates.found practice feature R works best simple icons. using high resolution images lots color detail images works better create initial image format something like R NetDraw modify network graphical editing software fact. can download data follow along.","code":"\nlibrary(png)\nlibrary(igraph)\n\nload(\"data/Figure6_13.Rdata\")\n# two_mode_net - igraph two mode network object\n# img.1 <- readPNG(\"images/site.png\")\n#img.2 <- readPNG(\"images/pot.png\")\n\nV(two_mode_net)$raster <- list(img.1, img.2)[V(two_mode_net)$type + 1]\n\nset.seed(34673)\nplot(\n  two_mode_net,\n  vertex.shape = \"raster\",\n  vertex.label = NA,\n  vertex.size = 16,\n  vertex.size2 = 16,\n  edge.width = 2,\n  edge.color = \"red\"\n)"},{"path":"network-visualization.html","id":"Figure_6_14","chapter":"Section 5 Network Visualization","heading":"5.4.14 Figure 6.14: Edge Thickness and Color","text":"Fig. 6.14. random weighted graph edge line thickness color used indicate weight 5 categories.can download data images follow along.","code":"\n\n\nlibrary(igraph)\nlibrary(ggraph)\n\nload(\"data/Figure6_14.Rdata\")\n\nedge.cols <- colorRampPalette(c('gray', 'darkblue'))(5)\n\nset.seed(43644)\nggraph(g.net, layout = \"fr\") +\n  geom_edge_link0(aes(width = E(g.net)$weight),\n                  edge_colour = edge.cols[E(g.net)$weight]) +\n  geom_node_point(shape = 21,\n                  size = igraph::degree(g.net) + 3,\n                  fill = 'red') +\n  theme_graph() +\n  theme(legend.title = element_blank()) "},{"path":"network-visualization.html","id":"Figure_6_15","chapter":"Section 5 Network Visualization","heading":"5.4.15 Figure 6.15: Edge Direction","text":"Fig. 6.15. Two methods displaying directed ties using arrows () arcs (c). simple networks represent relationships shown adjacency matrix center (b).See tutorial details using arrows ggraph.","code":"\n\nlibrary(igraph)\nlibrary(grid)\nlibrary(gridExtra)\n\ng <- graph( c(\"A\", \"B\",\n              \"B\", \"C\",\n              \"A\", \"C\",\n              \"A\", \"A\",\n              \"C\",\"B\",\n              \"D\",\"C\"))\n\nlayout(matrix(c(1, 1, 2, 3, 3), 1, 5, byrow = TRUE))\n\nset.seed(4355467)\nplot(\n  g,\n  edge.arrow.size = 1,\n  vertex.color = \"black\",\n  vertex.size = 50,\n  vertex.frame.color = \"gray\",\n  vertex.label.color = \"white\",\n  edge.width = 2,\n  vertex.label.cex = 2.75,\n  vertex.label.dist = 0,\n  vertex.label.family = 'Helvetica'\n)\n\nplot.new()\nadj1 <- as.data.frame(as.matrix(as_adjacency_matrix(g)))\ntt2 <- ttheme_minimal(base_size = 25)\ngrid.table(adj1, theme = tt2)\n\nplot(\n  g,\n  edge.arrow.size = 1.25,\n  vertex.color = \"black\",\n  vertex.size = 50,\n  vertex.frame.color = \"gray\",\n  vertex.label.color = \"white\",\n  edge.width = 2,\n  edge.curved = 0.3,\n  vertex.label.cex = 2.75,\n  vertex.label.dist = 0,\n  vertex.label.family = 'Helvetica'\n) "},{"path":"network-visualization.html","id":"Figure_6_16","chapter":"Section 5 Network Visualization","heading":"5.4.16 Figure 6.16: Edge Binarization","text":"Fig. 6.16. networks show data based similarity scores among sites U.S. Southwest (ca. .D. 1350-1400) different cutoff binarization.following chunk code uses ceramic similarity data SWSN database defines three different cutoff thresholds defining edges.","code":"\n\nlibrary(igraph)\nlibrary(statnet)\nlibrary(intergraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_16.Rdata\")\n# Contains similarity matrix AD1350sim\n\nAD1350sim_cut0_5 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.25),\n  directed = FALSE\n))\nAD1350sim_cut0_75 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.5),\n  directed = FALSE\n))\nAD1350sim_cut0_9 <- asIgraph(network(\n  event2dichot(AD1350sim,\n               method = \"absolute\",\n               thresh = 0.75),\n  directed = FALSE\n))\n\nset.seed(4637)\ng0.50 <- ggraph(AD1350sim_cut0_5, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.25\") +\n  theme_graph()\n\nset.seed(574578)\ng0.75 <- ggraph(AD1350sim_cut0_75, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.50\") +\n  theme_graph()\n\nset.seed(7343)\ng0.90 <- ggraph(AD1350sim_cut0_9, layout = \"fr\") +\n  geom_edge_link0(edge_colour = \"black\") +\n  geom_node_point(shape = 21, fill = 'gray') +\n  ggtitle(\"0.75\") +\n  theme_graph()\n\nggarrange(g0.50, g0.75, g0.90, nrow = 1, ncol = 3)"},{"path":"network-visualization.html","id":"Figure_6_17","chapter":"Section 5 Network Visualization","heading":"5.4.17 Figure 6.17: Edge Bundling","text":"Fig. 6.17. Network map ceramic similarity U.S. Southwest/Mexican Northwest ca. .D. 1350-1400 based hammer bundling algorithm.function relies “edgebundle” package combine sets nodes similar relations single paths. Use data follow along. Note procedure can take several seconds minutes depending speed computer. Note figure look somewhat different one book locations sites jittered data security","code":"\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(edgebundle)\nlibrary(ggmap)\nlibrary(sf)\n\nload('data/Figure6_17.Rdata')\n# attr.dat - site attribute data\n# g.net - igraph network object\nload('data/map.RData')\n# map3 - state outlines\n# base2 - terrain basemap in black and white\n\nlocations_sf <- st_as_sf(attr.dat, coords = c(\"V3\", \"V4\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\nhbundle <- edge_bundle_hammer(g.net, xy, bw = 0.9, decay = 0.2)\n\nggmap(base2, darken = 0.15) +\n  geom_polygon(\n    data = map3,\n    aes(x, y,\n        group = Group.1),\n    col = \"black\",\n    size = 0.5,\n    fill = NA\n  ) +\n  geom_path(\n    data = hbundle,\n    aes(x, y, group = group),\n    color = \"white\",\n    show.legend = F\n  ) +\n  geom_path(\n    data = hbundle,\n    aes(x, y, group = group),\n    color = \"darkorchid4\",\n    show.legend = F\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.4,\n    size = 2.5,\n    show.legend = F\n  ) +\n  theme_graph()"},{"path":"network-visualization.html","id":"Figure_6_18","chapter":"Section 5 Network Visualization","heading":"5.4.18 Figure 6.18: Group-in-a-box","text":"Fig. 6.18. Example group---box custom graph layout created NodeXL based ceramic similarity data U.S. Southwest/Mexican Northwest ca. AD 1350-1400.group---box network format , far aware, currently implemented NodeXL platform. software package add-Microsoft Excel allows creation analysis network graphs using wide variety useful visualization tools. produce “Group---box” layout simply need paste set edge list values NodeXL Excel Template, define groups (based algorithm vertex attribute), sure select “Layout graph’s groups box” layout options.details use NodeXL see extensive documentation online. commercial versions software available group---box example shown can produced free version.download Excel workbook set example provided book click .","code":""},{"path":"network-visualization.html","id":"Figure_6_19","chapter":"Section 5 Network Visualization","heading":"5.4.19 Figure 6.19: Weighted Adjacency Matrix","text":"Fig. 6.19. Dual display network graph associated weighted adjacency matrix based Peeples (2018) ceramic technology data.plot uses sub-set Cibola technological similarity network data produce typical node-link diagram associated weighted adjacency matrix. Use data follow along.","code":"\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_19.Rdata\")\n# graph6.18 - graph object in igraph format\n# node_list - dataframe with node details\n# edge_list - edge_list which contains information on groups\n# and edge weight\n\nset.seed(343645)\ncoords <- layout_with_fr(graph6.18)\ng1 <- ggraph(graph6.18, \"manual\",\n             x = coords[, 1],\n             y = coords[, 2]) +\n  geom_edge_link(aes(),\n                 color = 'gray75',\n                 alpha = 0.5,\n                 show.legend = F) +\n  geom_node_point(aes(color = as.factor(V(graph6.18)$comm), size = 5),\n                  show.legend = F) +\n  scale_color_manual(values = c('#8da0cb', '#66c2a5', '#fc8d62'),\n                     guide = F) +\n  theme_graph()\n\n# Set order of nodes to order in which they appear in the y axis in\n# the network graph above\nname_order <- node_list[order(coords[, 2]), ]$name\n\n# Adjust the 'to' and 'from' factor levels so they are equal\n# to this complete list of node names\nplot_data <- edge_list %>% mutate(to = factor(to, levels = name_order),\n                                  from = factor(from, levels = rev(name_order)))\n\n# Now run the ggplot code again\n# Create the adjacency matrix plot\ng2 <- ggplot(plot_data, aes(\n  x = from,\n  y = to,\n  fill = group,\n  alpha = (weight * 1.5)\n)) +\n  geom_tile() +\n  theme_bw() +\n  scale_x_discrete(drop = FALSE) +\n  scale_y_discrete(drop = FALSE) +\n  theme(\n    axis.text.x = element_text(\n      angle = 270,\n      hjust = 0,\n      size = rel(0.5)\n    ),\n    axis.text.y = element_text(size = rel(0.5)),\n    aspect.ratio = 1,\n    legend.position = \"none\"\n  ) +\n  xlab('') +\n  ylab('') +\n  scale_fill_manual(values = c('#8da0cb', '#66c2a5', '#fc8d62', 'black'),\n                    guide = F)\n\n# Combine into a single figure\nfigure6_19 <- ggarrange(g1, g2, nrow = 1)\n\nfigure6_19"},{"path":"network-visualization.html","id":"Figure_6_20","chapter":"Section 5 Network Visualization","heading":"5.4.20 Figure 6.20: Nodetrix Diagram","text":"Fig. 6.20. Nodetrix visualization Peeples (2018) ceramic technological data showing one dense cluster adjacency matrix remainder graph node-link diagram.Nodetrix interactive visualization created using Javascript implementation available GitHub user jdfekete, Jean-Daniel Fekete one original authors method (Henry et al. 2007).details running Javascript program described GitHub page beyond scope tutorial. illustrate , however, can export R *.json format required program using “d3r” “rjson” packages.","code":"\n\nlibrary(d3r)\nlibrary(rjson)\n\n# net <- igraph network object\n\ndata_json <- d3_igraph(net)\n\n\ndj <- jsonlite::fromJSON(data_json)\ndj$links[[1]] <- as.numeric(dj$links[[1]])\ndj$links[[2]] <- as.numeric(dj$links[[2]])\ndj <- jsonlite::toJSON(dj)\n\nwrite(dj, \"network.json\")"},{"path":"network-visualization.html","id":"Figure_6_21","chapter":"Section 5 Network Visualization","heading":"5.4.21 Figure 6.21: The Filmstrip Approach","text":"Fig. 6.21. demonstration filmstrip approach plotting longitudinal network data. data represent networks ceramic similarity San Pedro Valley Arizona three consecutive 50-year intervals.Use data replicate figures shown .","code":"\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\n\nload(\"data/Figure6_21.Rdata\")\n\nset.seed(4543)\ng1 <- ggraph(AD1250net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1250-1300\") +\n  theme_graph()\n\nset.seed(4543)\ng2 <- ggraph(AD1300net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1300-1350\") +\n  theme_graph()\n\n\nset.seed(4543)\ng3 <- ggraph(AD1350net, \"kk\") +\n  geom_edge_link(aes(), color = 'gray75', show.legend = F) +\n  geom_node_point(aes(),\n                  size = 1,\n                  show.legend = F,\n                  color = \"blue\") +\n  ggtitle(\"AD1350-1400\") +\n  theme_graph()\n\nfigure6_21 <- ggarrange(g1, g2, g3, nrow = 1)\n\nfigure6_21"},{"path":"network-visualization.html","id":"Figure_6_22","chapter":"Section 5 Network Visualization","heading":"5.4.22 Figure 6.22: Similtaneous Display","text":"Fig. 6.22. Examples simultaneous display two consecutive intervals San Pedro valley ceramic similarity network. ) network using Kamada-Kawai algorithm edges color coded based time period. B) arc plot showing ties consecutive intervals line.Use data follow along.","code":"\n\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(ggpubr)\nlibrary(ggrepel)\n\nload(\"data/Figure6_22.Rdata\")\n\ngraph <- graph_from_data_frame(net.all)\n\nxy <- layout_with_kk(graph)\nxy <- cbind(sites,xy)\nxy <- as.data.frame(xy)\ncolnames(xy) <- c('site','x','y')\nxy$x <- as.numeric(xy$x)\nxy$y <- as.numeric(xy$y)\n\nset.seed(6436)\nsimilt.net <- ggraph(graph,layout=\"manual\",\n                     x=xy$x, y=xy$y) +\n  geom_edge_link(aes(colour = Period), alpha=0.3, width=1) +\n  geom_node_point(size=3) +\n  theme_graph() +\n  theme(legend.title = element_text(size=rel(1)),\n        legend.text = element_text(size=rel(1)),\n        legend.key.height= unit(1, 'cm'),\n        legend.key.width= unit(2, 'cm'))\n\n# Make the graph\nlin.net <- ggraph(SPgraph, layout=\"linear\") +\n  geom_edge_arc(edge_colour=\"black\", edge_alpha=0.4, edge_width=0.3,\n                fold=F, strength=1) +\n  geom_node_point(aes(size=igraph::degree(SPgraph)), col='red',\n                  alpha=0.5) +\n  scale_size_continuous(range=c(4,8)) +\n  theme_graph() +\n  theme(legend.title=element_blank(),\n        plot.margin=unit(c(0,0,0.4,0), \"null\"),\n        panel.spacing=unit(c(0,0,3.4,0), \"null\")) +\n  annotate(\"text\", x = 3, y = 3, label = \"AD 1250-1300\",\n           size=4) +\n  annotate(\"text\", x = 3, y = -3, label = \"AD 1300-1350\",\n           size=4)\n\nsimilt.net\n\nlin.net"},{"path":"network-visualization.html","id":"Figure_6_23","chapter":"Section 5 Network Visualization","heading":"5.4.23 Figure 6:23: Timelines and Time Prisms","text":"Fig. 6.23. plot shows two displays ceramic similarity data Sonoran Desert U.S. Southwest time prism (top) timeline (bottom).Use data follow along.","code":"\n\nlibrary(networkDynamic)\nlibrary(ndtv)\nlibrary(GISTools)\nlibrary(statnet)\n\nload(\"data/Figure6_23.Rdata\")\n\n# create networkDynamic object from list containing multiple\n# sna network objects\nSanPedro <- networkDynamic(network.list = SP_nets)\n#> Neither start or onsets specified, assuming start=0\n#> Onsets and termini not specified, assuming each network in network.list should have a discrete spell of length 1\n#> Argument base.net not specified, using first element of network.list instead\n#> Created net.obs.period to describe network\n#>  Network observation period info:\n#>   Number of observation spells: 1 \n#>   Maximal time range observed: 0 until 5 \n#>   Temporal mode: discrete \n#>   Time unit: step \n#>   Suggested time increment: 1\n\n# Compute animation\ncompute.animation(SanPedro, default.dist = 7, animation.mode = 'MDSJ')\n#> slice parameters:\n#>   start:0\n#>   end:5\n#>   interval:1\n#>   aggregate.dur:1\n#>   rule:latest\n#> \n#> [1] \"MDSJ starting stress: 5333.748322735649\"\n#> [2] \"MDSJ ending stress: 959.8403889430563\"  \n#> [1] \"MDSJ starting stress: 1513.37664545105\"\n#> [2] \"MDSJ ending stress: 953.4925252779665\" \n#> [1] \"MDSJ starting stress: 8135.582271649673\"\n#> [2] \"MDSJ ending stress: 794.6838984207894\"  \n#> [1] \"MDSJ starting stress: 32217.392056956618\"\n#> [2] \"MDSJ ending stress: 592.4696838819254\"   \n#> [1] \"MDSJ starting stress: 630.6742514219839\"\n#> [2] \"MDSJ ending stress: 567.800667042469\"\n\n# Define colors for regions\nmycol <- c(\n  add.alpha('#1b9e77', 0.75),\n  add.alpha('#d95f02', 0.75),\n  add.alpha('#7570b3', 0.75),\n  add.alpha('#e7298a', 0.75),\n  add.alpha('#66a61e', 0.75),\n  add.alpha('#e6ab02', 0.75)\n)\n\n# Plot time prism\nset.seed(364467)\ntimePrism(\n  SanPedro,\n  at = c(1, 2, 3),\n  displaylabels = F,\n  planes = TRUE,\n  display.isolates = F,\n  label.cex = 0.5,\n  usearrows = F,\n  vertex.cex = 0.5,\n  edge.col = 'gray50',\n  vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)]\n)\n\n# Plot proximity timeline\nset.seed(235254)\nproximity.timeline(\n  SanPedro,\n  default.dist = 10,\n  mode = 'sammon',\n  labels.at = 17,\n  vertex.cex = 4,\n  render.edges = F,\n  vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)],\n  chain.direction = 'reverse',\n  xaxt = 'n'\n)"},{"path":"network-visualization.html","id":"Figure_6_24","chapter":"Section 5 Network Visualization","heading":"5.4.24 Figure 6.24: Animation","text":"Fig. 6.24. example three frames network animation.Figure 6.24 created using ndtv package data produced figure 6.23. simply rendered animation output interactive html widget. figure book represents 3 screen shots video. See ndtv documentation details.","code":"\nrender.d3movie(SanPedro, vertex.col = mycol[factor(SP_attr$SWSN_MacroGroup)],\n               output.mode = \"inline\")"},{"path":"network-visualization.html","id":"Figure_6_25","chapter":"Section 5 Network Visualization","heading":"5.4.25 Figure 6.25: Interactive Networks","text":"Fig. 6.25. example dynamic network visual created R. Notice nodes edges responding movement edge cursor drop menu allows selection nodes group.example closely follow example provided Static dynamic network visualization R workshop documents online using Cibola technological similarity data instead.","code":"\n\nlibrary(visNetwork)\nlibrary(networkD3)\nlibrary(igraph)\n\nload(\"data/Figure6_25.Rdata\") # Contains an igraph graph object\n\n# Use igraph to make the graph and find membership\nclust <- cluster_louvain(graph)\nmembers <- membership(clust)\n\n# Convert to object suitable for networkD3\ngraph_d3 <- igraph_to_networkD3(graph, group = members)\n\n# Modify interactive network to allow highlighting by groups, etc.\nlinks <- graph_d3$links\ncolnames(links) <- c('from', 'to')\nlinks[, 1] <- links[, 1] + 1\nlinks[, 2] <- links[, 2] + 1\nnodes <- graph_d3$nodes\ncolnames(nodes)[1] <- 'id'\n\nvis.nodes <- nodes\nvis.links <- links\n\nvis.nodes$shape  <- \"dot\"\nvis.nodes$shadow <- TRUE # Nodes will drop shadow\nvis.nodes$borderWidth <- 2 # Node border width\n\nvis.nodes$color.background <- c(\"slategrey\", \"tomato\", \"gold\",\n                                \"purple\")[nodes$group]\nvis.nodes$color.border <- \"black\"\nvis.nodes$color.highlight.background <- \"orange\"\nvis.nodes$color.highlight.border <- \"darkred\"\n\nvisnet <- visNetwork(vis.nodes, vis.links)\n\nvisOptions(visnet, highlightNearest = TRUE, selectedBy = \"group\")"},{"path":"network-visualization.html","id":"figure-6.26-swsn-example-1","chapter":"Section 5 Network Visualization","heading":"5.4.26 Figure 6.26: SWSN Example 1","text":"Fig. 6.26. Networks time SWSN project area (Mills et al. 2013).figure original plot Mills et al. 2013 produced R compiled modified using Adobe Illustrator. First regional color scheme defined time period plotted using color scheme. Illustrator components arranged rough geographic positions isolates placed margin.following chunk code reproduces Figure 6.26 one time period (AD1300-1350). Download data follow along.","code":"\n\nlibrary(statnet)\nlibrary(ggraph)\n\nload(\"data/Figure6_26.Rdata\")\n\n# Create sna network object\nnet <-\n  network(event2dichot(sim, method = \"absolute\", thresh = 0.75), \n          directed = F)\n\n# define color scheme. colors listed in order based on the \n# factor attr$Macro\nmyCols <- c(\"#000738\", \"#ffa1a1\", \"#ad71d8\", \"#016d1b\", \"#00ff30\",\n            \"#92d8ff\", \"#ffffff\", \"#adadad\", \"#846b00\", \"#ff0000\",\n            \"#5273dd\", \"#946a43\", \"#a00000\", \"#f97c00\", \"#00ffec\",\n            \"#ffff3e\", \"#824444\", \"#00ba89\", \"#00ba89\", \"#0303ff\")\n\n# Plot network\nset.seed(235)\nggraph(net, layout = \"fr\") +\n  geom_edge_link(alpha = 0.5) +\n  geom_node_point(aes(fill = as.factor(attr$Macro), size = evcent(net)),\n                  shape = 21,\n                  show.legend = F) +\n  scale_size(range = c(1.5, 3)) +\n  scale_fill_manual(values = myCols) +\n  theme_graph()"},{"path":"network-visualization.html","id":"figure-6.27-swsn-example-2","chapter":"Section 5 Network Visualization","heading":"5.4.27 Figure 6.27: SWSN Example 2","text":"Fig. 6.27. explicit geographic map network SWSN project area time (Mills et al. 2013).original version figure produced ArcGIS using data prepared R. show network maps edges color coded geogrpahic length can produced R. provide code prepare map one time period (AD1300-1350). Use data follow along. Note figure differ slightly one book original Mills et al. 2013 publication site locations jittered.","code":"\nlibrary(statnet)\nlibrary(igraph)\nlibrary(intergraph)\nlibrary(ggmap)\nlibrary(sf)\n\n# Load in network and map data\nload(\"data/Figure6_27.Rdata\")\n\n# prepare network object\nnet <- network(event2dichot(sim, method = 'absolute', thresh = 0.75),\n               directed = F)\nr.net <- asIgraph(net)\n\n# convert coordinates to lat/long and covert to sf object\nlocations_sf <- st_as_sf(attr,\n                         coords = c(\"EASTING\", \"NORTHING\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\n# output coordinates in dataframe\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Create edgelist with xy coordinates for each source and target\nedgelist2 <- get.edgelist(r.net)\nedges2 <- data.frame(xy[edgelist2[, 1], ], xy[edgelist2[, 2], ])\ncolnames(edges2) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\n\n# Determine the geographic distances of edges\ndist.meas <- NULL\nfor (i in 1:nrow(edges2)) {\n  temp <- as.matrix(edges2[i, ])\n  dist.meas[i] <- as.numeric(dist(rbind(temp[1, 1:2],\n                                        temp[1, 3:4]))) / 0.009\n}\n\n# Order edges so shorest will plot last\nnet.dat <- as.data.frame(cbind(edges2, dist.meas))\nnet.dat <- net.dat[order(net.dat$dist.meas, decreasing = T), ]\n\n# Create bins in distance measurement\nnet.dat <- net.dat %>% mutate(\n    DistBins = cut(dist.meas, breaks = c(-Inf, 25, 100, 250, Inf)))\n\n# Plot network map\nggmap(base2, darken = 0.5) +\n  geom_polygon(\n    data = map3,\n    aes(x, y, group = Group.1),\n    col = \"black\",\n    size = 0.5,\n    fill = NA\n  ) +\n  geom_segment(\n    data = net.dat,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2,\n      col = DistBins\n    ),\n    size = 0.15,\n    show.legend = F\n  ) +\n  scale_color_manual(values = c(\"white\", \"skyblue\", \"dodgerblue\",\n                                \"darkblue\")) +\n  theme_graph()"},{"path":"spatial-networks.html","id":"spatial-networks","chapter":"Section 6 Spatial Networks","heading":"Section 6 Spatial Networks","text":"section follows along Chapter 7 Brughmans Peeples (2022) provide information implement spatial network models analyses R.","code":""},{"path":"spatial-networks.html","id":"dataset-and-setup","chapter":"Section 6 Spatial Networks","heading":"6.1 Dataset and Setup","text":"initial examples section use Roman Road data Iberian Penninsula. dataset consists csv file set Roman settlements csv file edge list defining connections among settlements terms roads.","code":"\n\nlibrary(igraph)\nlibrary(ggmap)\nlibrary(sf)\n\nedges1 <- read.csv(\"data/Hispania_roads.csv\", header = T)\nnodes <- read.csv(\"data/Hispania_nodes.csv\", header = T)\n\nroad_net <-\n  graph_from_edgelist(as.matrix(edges1[, 1:2]), directed = FALSE)\n\n# Convert attribute location data to sf coordinates\nlocations_sf <-\n  st_as_sf(nodes, coords = c(\"long\", \"lat\"), crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(locations_sf)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(coord1)\ncolnames(xy) <- c('x', 'y')\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(road_net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\n\nmyMap <- get_stamenmap(bbox = c(-9.5, 36, 3, 43.8),\n                       maptype = \"watercolor\",\n                       zoom = 6)\n\nggmap(myMap) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 2,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"spatial-networks.html","id":"planar-networks-and-trees","chapter":"Section 6 Spatial Networks","heading":"6.2 Planar Networks and Trees","text":"","code":""},{"path":"spatial-networks.html","id":"evaluating-planarity","chapter":"Section 6 Spatial Networks","heading":"6.2.1 Evaluating Planarity","text":"planar network network can drawn plane edges cross instead always end nodes. many small networks relatively easy determine whether network planar simply viewing network graph. larger graphs, can sometimes difficult.package available R called RBGL R implementation something called Boost Graph Library. set routines includes many powerful tools characterizing network topology including planarity. package , however, CRAN archive packages worked far reside needs installed another archive called Bioconductor. order install libary, run following lines code.place can now preform analysis called Boyer-Myrvold planarity test (Boyer Myrvold 2004). analysis performs set operations graph structure evaluate whether can defined planar graph (see publication details).Let’s take look Roman Road data.results suggests Roman Road data planar. can plot data evaluate see crossed edges repositioned.Now, way example, can generate small random network planar see results test. Note network graph produced visual planar small number nodes moved. Unfortunately planar graph drawing currently implemented igraph packages automatically plot graph planar even meets criteria planar graph.another example graph layout algorithm happens produce planar graph.","code":"\nif(!requireNamespace(\"BiocManager\", quietly = TRUE))\n  install.packages(\"BiocManager\")\n\nBiocManager::install(\"RBGL\")\nlibrary(RBGL)\n\n# First convert to a graphNEL object for planarity test\ng <- as_graphnel(road_net)\n# Implement test\nboyerMyrvoldPlanarityTest(g)\n#> [1] FALSE\nlibrary(ggraph)\n\nset.seed(5364)\nggraph(road_net, layout = 'kk') +\n  geom_edge_link() +\n  geom_node_point(size = 3) +\n  ggtitle(\"Network of Roman Roads\") +\n  theme_graph()\nset.seed(49)\ng <- erdos.renyi.game(20, 1 / 8)\n\nset.seed(939)\nggraph(g, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng <- as_graphnel(g)\nboyerMyrvoldPlanarityTest(g)\n#> [1] TRUE\nset.seed(4957)\ng <- erdos.renyi.game(20, 1 / 8)\n\nset.seed(939)\nggraph(g, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng <- as_graphnel(g)\nboyerMyrvoldPlanarityTest(g)\n#> [1] TRUE"},{"path":"spatial-networks.html","id":"defining-trees","chapter":"Section 6 Spatial Networks","heading":"6.2.2 Defining Trees","text":"tree network connected acyclic. Trees contain minimum number edges set nodes connected, results acyclic network interesting properties:Every edge tree bridge, removal increase number components (see section 4.4.5).number edges tree equal number nodes minus one.can one single path every pair nodes tree.R using igraph package possible generate trees also take existing network define called minimum spanning tree graph minimum acyclic component.Let’s create simple tree using “make_tree” function igraph.example can see branch leaf structure network central nodes hubs number nodes , cycles back previous nodes. Thus, tree inherently hierarchical.next sub-section, discuss use minimum spanning trees.also possible plot trees heirarchical network layout nodes arranged levels hierarchy. case need specify node nodes represent first layer using “root” call within ggraph call.","code":"\ntree1 <- make_tree(n = 50, children = 5, mode = \"undirected\")\ntree1\n#> IGRAPH 332eab6 U--- 50 49 -- Tree\n#> + attr: name (g/c), children (g/n), mode (g/c)\n#> + edges from 332eab6:\n#>  [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  2-- 7  2-- 8  2-- 9\n#>  [9]  2--10  2--11  3--12  3--13  3--14  3--15  3--16  4--17\n#> [17]  4--18  4--19  4--20  4--21  5--22  5--23  5--24  5--25\n#> [25]  5--26  6--27  6--28  6--29  6--30  6--31  7--32  7--33\n#> [33]  7--34  7--35  7--36  8--37  8--38  8--39  8--40  8--41\n#> [41]  9--42  9--43  9--44  9--45  9--46 10--47 10--48 10--49\n#> [49] 10--50\n\nplot(tree1)\nggraph(tree1,\n       layout = 'igraph',\n       algorithm = 'tree',\n       root = 1) +\n  geom_edge_diagonal(edge_width = 0.5, alpha = .4) +\n  geom_node_text(aes(label = V(tree1)), size = 3.5) +\n  theme_void() "},{"path":"spatial-networks.html","id":"spatial-network-models","chapter":"Section 6 Spatial Networks","heading":"6.3 Spatial Network Models","text":"Chapter 7.5 Brughmans Peeples (2022) go series spatial network models provide number different ways defining networks spatial data. sub-section demonstrate define analyze networks using approaches.","code":""},{"path":"spatial-networks.html","id":"relative-neighborhood-networks","chapter":"Section 6 Spatial Networks","heading":"6.3.1 Relative Neighborhood Networks","text":"Relative neighborhood graph: pair nodes connected nodes area marked overlap circle around node radius equal distance nodes.R package cccd contains functions define relative neighborhood networks distance data using “rng” function. function can either take distance matrix object created set coordinates calculate distance within call. output function igraph object. large graphs also possible limit search possible neighbors k neighbors.Let’s use previously created distance matrix plot results.can also plot results using geographic coordinates.","code":"\nlibrary(cccd)\n\nrng1 <- rng(nodes[, c(3, 2)])\n\nggraph(rng1, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\nggraph(rng1,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"spatial-networks.html","id":"gabriel-graphs","chapter":"Section 6 Spatial Networks","heading":"6.3.2 Gabriel Graphs","text":"Gabriel graph: pair nodes connected Gabriel graph nodes lie within circular region diameter equal distance pair nodes.can use function cccd package define Gabriel Graph igraph objects x y coordinates. Let’s take look using Roman Road data. See ?gg details options including different algorithms calculating Gabriel Graphs. define Gabriel graph plot using algorithmic layout geographic coordinates.","code":"\ngg1 <- gg(x = nodes[, c(3, 2)])\n\nggraph(gg1, layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\nggraph(gg1,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"spatial-networks.html","id":"beta-skeletons","chapter":"Section 6 Spatial Networks","heading":"6.3.3 Beta Skeletons","text":"Beta skeleton: Gabriel graph diameter circle controlled parameter beta.R gg function producing Gabriel Graphs procedure beta skeletons built directly . argument r gg function controls beta parameter. r=1 traditional Gabriel graph returned. parameter r > 1 stricter definition connection resulting fewer ties r < 1 link criteria loosened. See ?gg details.","code":"\nbeta_s <- gg(x = nodes[, c(3, 2)], r = 1.5)\n\nggraph(beta_s,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"spatial-networks.html","id":"minimum-spanning-trees","chapter":"Section 6 Spatial Networks","heading":"6.3.4 Minimum Spanning Trees","text":"Minimum spanning tree: set nodes Euclidean plane, edges created pairs nodes form tree node can reached node, sum Euclidean edge lengths less sum spanning tree.Perhaps common use-case trees archaeological networks define minimum spanning tree given graph minimum set nodes edges required fully connected graph. igraph package built-function defines minimum spanning tree given graph. Let’s try Roman Road plot node-link diagram map.Note minimum spanning trees can also used weighted graphs weighted connections preferred defining tree structure. See ?mst details.","code":"\nmst_net <- igraph::mst(road_net)\n\nset.seed(4643)\nggraph(mst_net, layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point(size = 4) +\n  theme_graph()\n\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(mst_net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(nodes[which(nodes$Id == edgelist[i, 1]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 1]), 2],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 3],\n                  nodes[which(nodes$Id == edgelist[i, 2]), 2])\n}\n\nggmap(myMap) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_point(\n    data = nodes[, c(3, 2)],\n    aes(long, lat),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 1.5,\n    show.legend = F\n  ) +\n  theme_void()\n#> Warning: Removed 2 rows containing missing values\n#> (geom_point)."},{"path":"spatial-networks.html","id":"delaunay-triangulation","chapter":"Section 6 Spatial Networks","heading":"6.3.5 Delaunay Triangulation","text":"Delaunay triangulation: pair nodes connected edge corresponding regions Voronoi diagram share side.Voronoi diagram Thiessen polygons: node set nodes Euclidean plane, region created covering area closer equidistant node node set.package deldir R allows calculation Delaunay triangles x y coordinates input. default deldir function define boundary extends slightly beyond xy coordinates points included analysis. boundary can also specified within call using “rw” argument. See ?deldir details.results function can directly plotted output also contains coordinates necessary integrate results another type figure like ggmap. Let’s take look.","code":"\nlibrary(deldir)\n\ndt1 <- deldir(nodes[, 3], nodes[, 2])\n\nplot(dt1)\n\n# Extract Voronoi polygons for plotting\nmapdat <- as.data.frame(dt1$dirsgs)\n# Extract network for plotting\nmapdat2 <- as.data.frame(dt1$delsgs)\n\nggmap(myMap) +\n  geom_segment(\n    data = mapdat,\n    aes(\n      x = x1,\n      y = y1,\n      xend = x2,\n      yend = y2\n    ),\n    col = 'black',\n    size = 1\n  ) +\n  geom_segment(\n    data = mapdat2,\n    aes(\n      x = x1,\n      y = y1,\n      xend = x2,\n      yend = y2\n    ),\n    col = 'red',\n    size = 1\n  ) +\n  geom_point(\n    data = nodes,\n    aes(long, lat),\n    alpha = 0.8,\n    col = 'black',\n    fill = \"white\",\n    shape = 21,\n    size = 3,\n    show.legend = F\n  ) +\n  theme_void()"},{"path":"spatial-networks.html","id":"k-nearest-neighbors","chapter":"Section 6 Spatial Networks","heading":"6.3.6 K-nearest Neighbors","text":"K-nearest neighbor network: node connected K nodes closest .cccd package routine allows calculation K-nearest neighbor graphs geographic coordinates precomputed distance matrix. example use Roman Road data calculate K=1 K=6 nearest neighbor networks plot simultaneously.","code":"\n# Calculate k=1 nearest neighbor graph\nnn1 <- nng(x = nodes[, c(3, 2)], k = 1)\n\n# Calculate k=6 nearest neighbor graph\nnn6 <- nng(x = nodes[, c(3, 2)], k = 6)\n\nEL1 <- as.data.frame(\n  rbind(cbind(get.edgelist(nn6),\n         rep(\"K=6\", nrow(get.edgelist(nn1))\n             )),\n        cbind(get.edgelist(nn1), \n          rep(\"K=1\", nrow(get.edgelist(nn1))\n             ))))\n\ncolnames(EL1) <- c(\"from\", \"to\", \"K\")\n\ng <- graph_from_data_frame(EL1)\n\n# Plot both graphs\nggraph(g, layout = \"manual\",\n       x = nodes[, 3], y = nodes[, 2]) +\n  geom_edge_link(aes(color = factor(K)), width = 1.5) +\n  geom_node_point(size = 2) +\n  labs(edge_color = \"K\") +\n  theme_graph()"},{"path":"spatial-networks.html","id":"maximum-distance-networks","chapter":"Section 6 Spatial Networks","heading":"6.3.7 Maximum Distance Networks","text":"Maximum distance network: node connected nodes distance closer equal threshold value. order define maximum distance network simply need define threshold distance define nodes greater distance unconnected nodes within distance connected. can done base R using dist function used .Since coordinates using decimal degrees need calculate distances based “great circles” across globe rather Euclidean distances projected plane. function called “distm” “geosphere” package allows us . working projected data, can simply use “dist” function place “distm” like example .Next, order define minimum distance network simply binarize matrix. can using “event2dichot” function within statnet package easily create R network objects. Let’s try Roman Road data thresholds 100,000 250,000 meters.","code":"\nlibrary(statnet)\nlibrary(geosphere)\n\nd1 <- distm(nodes[, c(3, 2)])\n\n# Note we use the leq=TRUE argument here as we want nodes less than\n# the threshold to count.\nnet100 <- network(event2dichot(\n  d1,\n  method = 'absolute',\n  thresh = 100000,\n  leq = TRUE\n),\ndirected = F)\nnet250 <- network(event2dichot(\n  d1,\n  method = 'absolute',\n  thresh = 250000,\n  leq = TRUE\n),\ndirected = F)\n\n# Plot 100 Km network\nggraph(net100,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\n# Plot 250 Km network\nggraph(net250,\n       layout = \"manual\",\n       x = nodes[, 3],\n       y = nodes[, 2]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()"},{"path":"spatial-networks.html","id":"case-studies","chapter":"Section 6 Spatial Networks","heading":"6.4 Case Studies","text":"","code":""},{"path":"spatial-networks.html","id":"proximity-of-iron-age-sites-in-southern-spain","chapter":"Section 6 Spatial Networks","heading":"6.4.1 Proximity of Iron Age sites in Southern Spain","text":"first case study Chapter 7 Brughmans Peeples (2022) example several methods defining networks using spatial data outlined using locations 86 sites Guadalquivir river valley Southern Spain. code chunks , replicate analyses presented book.First read data represents site location information lat/long decimal degrees.Next create distance matrix based decimal degrees locations using “distm” function.can create maximum distance networks 10km 18km distance plot using geographic location nodes node placement.want combine degree distribution plot network frame, can use “inset_element” function “patchwork” library.Next, calculate relative neighborhood graph site locations plot nodes positioned geographic space.chunk code calculates plots Gabrial graph associated degree distribution plot.Next, ’ll plot K-nearest neighbors graphs k= 2, 3, 4, 6 associated degree distribution .","code":"\nguad <- read.csv(\"data/Guadalquivir.csv\", header=TRUE)\nlibrary(geosphere)\n\ng_dist1 <- as.matrix(distm(guad[, c(2, 3)]))\n\ng_dist1[1:4, 1:4]\n#>          [,1]     [,2]     [,3]     [,4]\n#> [1,]     0.00 69995.82 42265.58 51296.53\n#> [2,] 69995.82     0.00 28240.50 29202.84\n#> [3,] 42265.58 28240.50     0.00 23692.10\n#> [4,] 51296.53 29202.84 23692.10     0.00\nlibrary(intergraph)\n\n# Note we use the leq=TRUE argument here as we want nodes less than the threshold to count.\nnet10 <- asIgraph(network(\n  event2dichot(\n    g_dist1,\n    method = 'absolute',\n    thresh = 10000,\n    leq = TRUE\n  ),\n  directed = F\n))\nnet18 <- asIgraph(network(\n  event2dichot(\n    g_dist1,\n    method = 'absolute',\n    thresh = 18000,\n    leq = TRUE\n  ),\n  directed = F\n))\n\ng10_deg <- as.data.frame(igraph::degree(net10))\ncolnames(g10_deg) <- 'degree'\ng18_deg <- as.data.frame(igraph::degree(net18))\ncolnames(g18_deg) <- 'degree'\n\n# Plot histogram of degree for 10km network\nh10 <- ggplot(data = g10_deg) +\n  geom_histogram(aes(x = degree), bins = 15)\n\n# Plot histogram of degree for 18km network\nh18 <- ggplot(data = g18_deg) +\n  geom_histogram(aes(x = degree), bins = 15)\n\n# Plot 10 Km network\ng10 <- ggraph(net10,\n              layout = \"manual\",\n              x = guad[, 2],\n              y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\n# Plot 18 Km network\ng18 <- ggraph(net18,\n              layout = \"manual\",\n              x = guad[, 2],\n              y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng18\nlibrary(patchwork)\n\nplot_a <- g10 + inset_element(\n  h10,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_b <- g18 + inset_element(\n  h18,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_a\nplot_b\nrng1 <- rng(guad[, 2:3])\n\ng_rng <- ggraph(rng1,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng_rng_deg <- as.data.frame(igraph::degree(rng1))\ncolnames(g_rng_deg) <- 'degree'\n\n# Plot histogram of degree for relative neighborhood network\nh_rng <- ggplot(data = g_rng_deg) +\n  geom_histogram(aes(x = degree), bins = 3)\n\nplot_c <- g_rng + inset_element(\n  h_rng,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\n\nplot_c\ngg1 <- gg(x = guad[, 2:3])\n\ng_gg <- ggraph(gg1,\n               layout = \"manual\",\n               x = guad[, 2],\n               y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng_gg_deg <- as.data.frame(igraph::degree(gg1))\ncolnames(g_gg_deg) <- 'degree'\n\n# Plot histogram of degree for relative neighborhood network\nh_gg <- ggplot(data = g_gg_deg) +\n  geom_histogram(aes(x = degree), bins = 5)\n\nplot_d <- g_gg + inset_element(\n  h_gg,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\n\nplot_d\n# Calculate k=2,3,4, and 6 nearest neighbor graphs\nnn2 <- nng(x = guad[, 2:3], k = 2)\nnn3 <- nng(x = guad[, 2:3], k = 3)\nnn4 <- nng(x = guad[, 2:3], k = 4)\nnn6 <- nng(x = guad[, 2:3], k = 6)\n\n# Initialiize network graph for each k value\ng_nn2 <- ggraph(nn2,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng_nn3 <- ggraph(nn3,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng_nn4 <- ggraph(nn4,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\ng_nn6 <- ggraph(nn6,\n                layout = \"manual\",\n                x = guad[, 2],\n                y = guad[, 3]) +\n  geom_edge_link() +\n  geom_node_point(size = 2) +\n  theme_graph()\n\n# Set up dataframes of degree distribution for each network\nnn2_deg <- as.data.frame(igraph::degree(nn2))\ncolnames(nn2_deg) <- 'degree'\nnn3_deg <- as.data.frame(igraph::degree(nn3))\ncolnames(nn3_deg) <- 'degree'\nnn4_deg <- as.data.frame(igraph::degree(nn4))\ncolnames(nn4_deg) <- 'degree'\nnn6_deg <- as.data.frame(igraph::degree(nn6))\ncolnames(nn6_deg) <- 'degree'\n\n# Initialize histogram plot for each degree distribution\nh_nn2 <- ggplot(data = nn2_deg) +\n  geom_histogram(aes(x = degree), bins = 5) +\n  scale_x_continuous(limits = c(0, max(nn2_deg)))\nh_nn3 <- ggplot(data = nn3_deg) +\n  geom_histogram(aes(x = degree), bins = 6) +\n  scale_x_continuous(limits = c(0, max(nn3_deg)))\nh_nn4 <- ggplot(data = nn4_deg) +\n  geom_histogram(aes(x = degree), bins = 6) +\n  scale_x_continuous(limits = c(0, max(nn4_deg)))\nh_nn6 <- ggplot(data = nn6_deg) +\n  geom_histogram(aes(x = degree), bins = 5) +\n  scale_x_continuous(limits = c(0, max(nn6_deg)))\n\nplot_a <- g_nn2 + inset_element(\n  h_nn2,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_b <- g_nn3 + inset_element(\n  h_nn3,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_c <- g_nn4 + inset_element(\n  h_nn4,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\nplot_d <- g_nn6 + inset_element(\n  h_nn6,\n  left = 0,\n  bottom = 0.7,\n  right = 0.25,\n  top = 0.99\n)\n\nplot_a\nplot_b\nplot_c\nplot_d"},{"path":"spatial-networks.html","id":"networks-in-space-in-the-u.s.-southwest","chapter":"Section 6 Spatial Networks","heading":"6.4.2 Networks in Space in the U.S. Southwest","text":"second case study Chapter 7 Brughmans Peeples (2022) provides example can use spatial network methods analyze material cultural network data. use Chaco World data can download map data, site attribute data, ceramic frequency data follow along.first analysis expores degree similarities ceramics (terms Brainerd-Robinson similarity based wares) can explained spatial distance. simply define ceramic similarity matrix, Euclidean distance matrix, fit model using distance explain ceramic similarity using general additive model (gam) approach. gam function use mgcv package. Note object “dmat” created using “dist” function data started already projected site locations using UTM coordinates.results show described book, spatial distance statistically significant predictor ceramic similarity distance appear explain 37.2% variation ceramic similarity.next analysis presented book creates series minimum distance networks 36Kms way nearly 400Kms concentric days travel (36Kms one day travel foot) explore proportion variance explained networks constrained distance.Finally, let’s recreate figure 7.8 book display 36km minimum distance network Chaco region ca. AD 1050-1100. follows basic format plotting minimum distance networks defined .","code":"\nlibrary(mgcv)\n\nload('data/map.RData')\nattr <- read.csv('data/AD1050attr.csv', row.names = 1)\ncer <- read.csv('data/AD1050cer.csv',\n                header = T,\n                row.names = 1)\nsim <-\n  (2 - as.matrix(vegan::vegdist(prop.table(\n    as.matrix(cer), 1), \n    method = 'manhattan'))) / 2\n\ndmat <- as.matrix(dist(attr[, 9:10]))\n\nfit <- gam(as.vector(sim) ~ as.vector(dmat))\nsummary(fit)\n#> \n#> Family: gaussian \n#> Link function: identity \n#> \n#> Formula:\n#> as.vector(sim) ~ as.vector(dmat)\n#> \n#> Parametric coefficients:\n#>                   Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)      7.979e-01  2.547e-03   313.3   <2e-16 ***\n#> as.vector(dmat) -2.487e-06  1.448e-08  -171.8   <2e-16 ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> \n#> R-sq.(adj) =  0.372   Deviance explained = 37.2%\n#> GCV = 0.082702  Scale est. = 0.082699  n = 49729\n# Create a sequence of distances from 36km to 400kms by concentric\n# days travel on foot\nkms <- seq(36000, 400000, by = 36000)\n\n# Define minimum distance networks for each item in \"kms\" and the\n# calculate variance explained\ntemp.out <- NULL\nfor (i in 1:length(kms)) {\n  dmat.temp <- dmat\n  dmat.temp[dmat > kms[i]] <- 0\n  dmat.temp[dmat.temp > 0] <- 1\n  # Calculate gam model and output r^2 value\n  temp <- gam(as.vector(sim[lower.tri(sim)]) ~\n                as.vector(dmat.temp[lower.tri(dmat.temp)]))\n  temp.out[i] <- summary(temp)$r.sq\n}\n\n# Create data frame of output\ndat <- as.data.frame(cbind(kms / 1000, temp.out))\ncolnames(dat) <- c('Dist', 'Cor')\n\nlibrary(ggplot2)\n\n# Plot the results\nggplot(data = dat) +\n  geom_line(aes(x = Dist, y = Cor)) +\n  geom_point(aes(x = Dist, y = Cor), size = 3) +\n  xlab(\"Maximum Distance Network Threshold (Km)\") +\n  ylab(\"Proportion of Variance Explained\") +\n  theme_bw() +\n  theme(\n    axis.text.x = element_text(size = rel(1.5)),\n    axis.text.y = element_text(size = rel(1.5)),\n    axis.title.x = element_text(size = rel(1.5)),\n    axis.title.y = element_text(size = rel(1.5))\n  )\nd36 <- as.matrix(dist(attr[, 9:10]))\nd36[d36 < 36001] <- 1\nd36[d36 > 1] <- 0\ng36.net <- graph_from_adjacency_matrix(d36, mode = \"undirected\")\n\nlocations_sf <- st_as_sf(attr,\n                         coords = c(\"EASTING\", \"NORTHING\"),\n                         crs = 26912)\nz <- st_transform(locations_sf, crs = 4326)\ncoord1 <- do.call(rbind, st_geometry(z)) %>%\n  tibble::as_tibble() %>% setNames(c(\"lon\", \"lat\"))\n\nxy <- as.data.frame(cbind(attr$SWSN_Site, coord1))\ncolnames(xy) <- c('site', 'x', 'y')\n\nbase <- get_stamenmap(\n  bbox = c(-110.75, 33.5, -107, 38),\n  zoom = 8,\n  maptype = \"terrain-background\",\n  color = \"bw\"\n)\n\n\n# Extract edgelist from network object\nedgelist <- get.edgelist(g36.net)\n\n# Create dataframe of beginning and ending points of edges\nedges <- as.data.frame(matrix(NA, nrow(edgelist), 4))\ncolnames(edges) <- c(\"X1\", \"Y1\", \"X2\", \"Y2\")\nfor (i in 1:nrow(edgelist)) {\n  edges[i, ] <- c(xy[which(xy$site == edgelist[i, 1]), 2],\n                  xy[which(xy$site == edgelist[i, 1]), 3],\n                  xy[which(xy$site == edgelist[i, 2]), 2],\n                  xy[which(xy$site == edgelist[i, 2]), 3])\n}\n\n\nfigure7_8 <- ggmap(base, darken = 0.15) +\n  geom_segment(\n    data = edges,\n    aes(\n      x = X1,\n      y = Y1,\n      xend = X2,\n      yend = Y2\n    ),\n    col = 'white',\n    size = 0.10,\n    show.legend = F\n  ) +\n  geom_point(\n    data = xy,\n    aes(x, y),\n    alpha = 0.65,\n    size = 1,\n    col = 'red',\n    show.legend = F\n  ) +\n  theme_void()\n\nfigure7_8"},{"path":"references-and-r-packages.html","id":"references-and-r-packages","chapter":"References and R Packages","heading":"References and R Packages","text":"","code":""}]
